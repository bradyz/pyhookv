// This file is auto-generated, do NOT edit!
#include "pybind11/pybind11.h"
#include "scripthook/natives.h"
#include "natives_type.h"
namespace py = pybind11;
void defNatives(py::module m) {
	py::class_<Vector3>(m, "Vector3").def("__init__", [](Vector3 &self, float x, float y, float z) {new (&self) Vector3{ x, 0, y, 0, z, 0 }; }).def_readwrite("x", &Vector3::x).def_readwrite("y", &Vector3::y).def_readwrite("z", &Vector3::z);
void custom(py::class_<Py_Ai>);
void custom(py::class_<Py_Any>);
void custom(py::class_<Py_App>);
void custom(py::class_<Py_Audio>);
void custom(py::class_<Py_Blip>);
void custom(py::class_<Py_Brain>);
void custom(py::class_<Py_Cam>);
void custom(py::class_<Py_Controls>);
void custom(py::class_<Py_Cutscene>);
void custom(py::class_<Py_Datafile>);
void custom(py::class_<Py_Decisionevent>);
void custom(py::class_<Py_Decorator>);
void custom(py::class_<Py_Dlc1>);
void custom(py::class_<Py_Dlc2>);
void custom(py::class_<Py_Entity>);
void custom(py::class_<Py_Fire>);
void custom(py::class_<Py_Gameplay>);
void custom(py::class_<Py_Graphics>);
void custom(py::class_<Py_Hash>);
void custom(py::class_<Py_Interior>);
void custom(py::class_<Py_Itemset>);
void custom(py::class_<Py_Mobile>);
void custom(py::class_<Py_Network>);
void custom(py::class_<Py_Networkcash>);
void custom(py::class_<Py_Object>);
void custom(py::class_<Py_Pathfind>);
void custom(py::class_<Py_Ped>);
void custom(py::class_<Py_Pickup>);
void custom(py::class_<Py_Player>);
void custom(py::class_<Py_Rope>);
void custom(py::class_<Py_ScrHandle>);
void custom(py::class_<Py_Script>);
void custom(py::class_<Py_Socialclub>);
void custom(py::class_<Py_Stats>);
void custom(py::class_<Py_Streaming>);
void custom(py::class_<Py_System>);
void custom(py::class_<Py_Time>);
void custom(py::class_<Py_Ui>);
void custom(py::class_<Py_Unk>);
void custom(py::class_<Py_Unk1>);
void custom(py::class_<Py_Unk2>);
void custom(py::class_<Py_Unk3>);
void custom(py::class_<Py_Vehicle>);
void custom(py::class_<Py_Void>);
void custom(py::class_<Py_Water>);
void custom(py::class_<Py_Weapon>);
void custom(py::class_<Py_Worldprobe>);
void custom(py::class_<Py_Zone>);
void custom(py::class_<Py_uint>);
	py::class_<Py_Void> py_Void(m, "Void");
	py_Void.def("__bool__", [](Py_Void t){return (BOOL)t.id;});
	py_Void
;
	custom(py_Void);
	py::class_<Py_Any> py_Any(m, "Any");
	py_Any.def("__bool__", [](Py_Any t){return (BOOL)t.id;});
	py_Any
;
	custom(py_Any);
	py::class_<Py_uint> py_uint(m, "uint");
	py_uint.def("__bool__", [](Py_uint t){return (BOOL)t.id;});
	py_uint
;
	custom(py_uint);
	py::class_<Py_Hash> py_Hash(m, "Hash");
	py_Hash.def("__bool__", [](Py_Hash t){return (BOOL)t.id;});
	py_Hash
.def(py::init<DWORD>());
	custom(py_Hash);
	py::class_<Py_Entity> py_Entity(m, "Entity",py_Any);
	py_Entity.def("__bool__", [](Py_Entity t){return (BOOL)t.id;});
	py_Entity
		.def_property_readonly("alpha", [](Py_Entity entity) -> int { return ENTITY::GET_ENTITY_ALPHA(entity.id); })
		.def_property_readonly("attached_to", [](Py_Entity entity) -> Py_Entity { return ENTITY::GET_ENTITY_ATTACHED_TO(entity.id); })
		.def_property_readonly("collision_normal_of_last_hit_for_entity", [](Py_Entity entity) -> Vector3 { return ENTITY::GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(entity.id); })
		.def_property_readonly("forward_vector", [](Py_Entity entity) -> Vector3 { return ENTITY::GET_ENTITY_FORWARD_VECTOR(entity.id); })
		.def_property_readonly("forward_x", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_FORWARD_X(entity.id); })
		.def_property_readonly("forward_y", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_FORWARD_Y(entity.id); })
		.def_property("heading", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_HEADING(entity.id); }, [](Py_Entity entity,float heading) -> void { return ENTITY::SET_ENTITY_HEADING(entity.id,heading); })
		.def_property("health", [](Py_Entity entity) -> int { return ENTITY::GET_ENTITY_HEALTH(entity.id); }, [](Py_Entity entity,int health) -> void { return ENTITY::SET_ENTITY_HEALTH(entity.id,health); })
		.def_property_readonly("height_above_ground", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_HEIGHT_ABOVE_GROUND(entity.id); })
		.def_property_readonly("is_a_mission_entity", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_A_MISSION_ENTITY(entity.id); })
		.def_property_readonly("is_a_ped", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_A_PED(entity.id); })
		.def_property_readonly("is_a_vehicle", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_A_VEHICLE(entity.id); })
		.def_property_readonly("is_an_entity", [](Py_Entity entity) -> BOOL { return ENTITY::IS_AN_ENTITY(entity.id); })
		.def_property_readonly("is_an_object", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_AN_OBJECT(entity.id); })
		.def_property_readonly("is_attached", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_ATTACHED(entity.id); })
		.def_property_readonly("is_attached_to_any_object", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_ATTACHED_TO_ANY_OBJECT(entity.id); })
		.def_property_readonly("is_attached_to_any_ped", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_ATTACHED_TO_ANY_PED(entity.id); })
		.def_property_readonly("is_attached_to_any_vehicle", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(entity.id); })
		.def_property_readonly("is_dead", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_DEAD(entity.id); })
		.def_property_readonly("is_in_air", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_IN_AIR(entity.id); })
		.def_property_readonly("is_in_water", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_IN_WATER(entity.id); })
		.def_property_readonly("is_occluded", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_OCCLUDED(entity.id); })
		.def_property_readonly("is_on_screen", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_ON_SCREEN(entity.id); })
		.def_property_readonly("is_static", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_STATIC(entity.id); })
		.def_property_readonly("is_upsidedown", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_UPSIDEDOWN(entity.id); })
		.def_property_readonly("is_visible", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_VISIBLE(entity.id); })
		.def_property_readonly("is_visible_to_script", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_VISIBLE_TO_SCRIPT(entity.id); })
		.def_property_readonly("is_waiting_for_world_collision", [](Py_Entity entity) -> BOOL { return ENTITY::IS_ENTITY_WAITING_FOR_WORLD_COLLISION(entity.id); })
		.def_property_readonly("last_material_hit_by_entity", [](Py_Entity entity) -> Py_Hash { return ENTITY::GET_LAST_MATERIAL_HIT_BY_ENTITY(entity.id); })
		.def_property("lod_dist", [](Py_Entity entity) -> int { return ENTITY::GET_ENTITY_LOD_DIST(entity.id); }, [](Py_Entity entity,int value) -> void { return ENTITY::SET_ENTITY_LOD_DIST(entity.id,value); })
		.def_property("max_health", [](Py_Entity entity) -> int { return ENTITY::GET_ENTITY_MAX_HEALTH(entity.id); }, [](Py_Entity entity,int value) -> void { return ENTITY::SET_ENTITY_MAX_HEALTH(entity.id,value); })
		.def_property_readonly("model", [](Py_Entity entity) -> Py_Hash { return ENTITY::GET_ENTITY_MODEL(entity.id); })
		.def_property_readonly("nearest_player_to_entity", [](Py_Entity entity) -> Py_Player { return ENTITY::GET_NEAREST_PLAYER_TO_ENTITY(entity.id); })
		.def_property_readonly("object_index_from_index", [](Py_Entity entity) -> Py_Object { return ENTITY::GET_OBJECT_INDEX_FROM_ENTITY_INDEX(entity.id); })
		.def_property_readonly("ped_index_from_index", [](Py_Entity entity) -> Py_Ped { return ENTITY::GET_PED_INDEX_FROM_ENTITY_INDEX(entity.id); })
		.def_property_readonly("physics_heading", [](Py_Entity entity) -> float { return ENTITY::_GET_ENTITY_PHYSICS_HEADING(entity.id); })
		.def_property_readonly("pitch", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_PITCH(entity.id); })
		.def_property_readonly("population_type", [](Py_Entity entity) -> int { return ENTITY::_GET_ENTITY_POPULATION_TYPE(entity.id); })
		.def_property_readonly("roll", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_ROLL(entity.id); })
		.def_property_readonly("rotation_velocity", [](Py_Entity entity) -> Vector3 { return ENTITY::GET_ENTITY_ROTATION_VELOCITY(entity.id); })
		.def_property_readonly("speed", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_SPEED(entity.id); })
		.def_property_readonly("submerged_level", [](Py_Entity entity) -> float { return ENTITY::GET_ENTITY_SUBMERGED_LEVEL(entity.id); })
		.def_property_readonly("type", [](Py_Entity entity) -> int { return ENTITY::GET_ENTITY_TYPE(entity.id); })
		.def_property_readonly("vehicle_index_from_index", [](Py_Entity entity) -> Py_Vehicle { return ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(entity.id); })
		.def_property_readonly("velocity", [](Py_Entity entity) -> Vector3 { return ENTITY::GET_ENTITY_VELOCITY(entity.id); })
		.def("set_always_prerender", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_ALWAYS_PRERENDER(entity.id,toggle); })
		.def("set_can_be_damaged", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_CAN_BE_DAMAGED(entity.id,toggle); })
		.def("set_can_be_targeted_without_los", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(entity.id,toggle); })
		.def("set_dynamic", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_DYNAMIC(entity.id,toggle); })
		.def("set_has_gravity", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_HAS_GRAVITY(entity.id,toggle); })
		.def("set_invincible", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_INVINCIBLE(entity.id,toggle); })
		.def("set_lights", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_LIGHTS(entity.id,toggle); })
		.def("set_load_collision_flag", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_LOAD_COLLISION_FLAG(entity.id,toggle); })
		.def("set_max_speed", [](Py_Entity entity,float speed) -> void { return ENTITY::SET_ENTITY_MAX_SPEED(entity.id,speed); })
		.def("set_motion_blur", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_MOTION_BLUR(entity.id,toggle); })
		.def("set_only_damaged_by_player", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(entity.id,toggle); })
		.def("set_records_collisions", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_RECORDS_COLLISIONS(entity.id,toggle); })
		.def("set_render_scorched", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::SET_ENTITY_RENDER_SCORCHED(entity.id,toggle); })
		.def("set_trafficlight_override", [](Py_Entity entity,int state) -> void { return ENTITY::SET_ENTITY_TRAFFICLIGHT_OVERRIDE(entity.id,state); })
		.def("apply_force_to_center_of_mass", [](Py_Entity entity,int forceType,float x,float y,float z,BOOL p5,BOOL p6,BOOL p7,BOOL p8) -> void { return ENTITY::APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(entity.id,forceType,x,y,z,p5,p6,p7,p8); })
		.def("apply_force_to_entity", [](Py_Entity entity,int forceType,float x,float y,float z,float xRot,float yRot,float zRot,int p8,BOOL isRel,BOOL ignoreUpVec,BOOL p11,BOOL p12,BOOL p13) -> void { return ENTITY::APPLY_FORCE_TO_ENTITY(entity.id,forceType,x,y,z,xRot,yRot,zRot,p8,isRel,ignoreUpVec,p11,p12,p13); })
		.def("attach_to_entity", [](Py_Entity entity1,Py_Entity entity2,int boneIndexEnt2,float posX,float posY,float posZ,float rotX,float rotY,float rotZ,BOOL p9,BOOL isRelative,BOOL collision,BOOL allowRotation,int boneIndexEnt1,BOOL fixedRot) -> void { return ENTITY::ATTACH_ENTITY_TO_ENTITY(entity1.id,entity2.id,boneIndexEnt2,posX,posY,posZ,rotX,rotY,rotZ,p9,isRelative,collision,allowRotation,boneIndexEnt1,fixedRot); })
		.def("attach_to_physically", [](Py_Entity entity1,Py_Entity entity2,int boneIndex1,int boneIndex2,float posX1,float posY1,float posZ1,float posX2,float posY2,float posZ2,float rotX,float rotY,float rotZ,float breakForce,BOOL fixedRot,BOOL p15,BOOL collision,BOOL p17,int p18) -> void { return ENTITY::ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(entity1.id,entity2.id,boneIndex1,boneIndex2,posX1,posY1,posZ1,posX2,posY2,posZ2,rotX,rotY,rotZ,breakForce,fixedRot,p15,collision,p17,p18); })
		.def("clear_last_damage_entity", [](Py_Entity entity) -> void { return ENTITY::CLEAR_ENTITY_LAST_DAMAGE_ENTITY(entity.id); })
		.def("detach_entity", [](Py_Entity entity,BOOL p1,BOOL p2) -> void { return ENTITY::DETACH_ENTITY(entity.id,p1,p2); })
		.def("does_belong_to_this_script", [](Py_Entity entity,BOOL p1) -> BOOL { return ENTITY::DOES_ENTITY_BELONG_TO_THIS_SCRIPT(entity.id,p1); })
		.def("does_exist", [](Py_Entity entity) -> BOOL { return ENTITY::DOES_ENTITY_EXIST(entity.id); })
		.def("does_have_drawable", [](Py_Entity entity) -> BOOL { return ENTITY::DOES_ENTITY_HAVE_DRAWABLE(entity.id); })
		.def("does_have_physics", [](Py_Entity entity) -> BOOL { return ENTITY::DOES_ENTITY_HAVE_PHYSICS(entity.id); })
		.def("force_ai_and_animation_update", [](Py_Entity entity) -> void { return ENTITY::FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(entity.id); })
		.def("freeze_position", [](Py_Entity entity,BOOL toggle) -> void { return ENTITY::FREEZE_ENTITY_POSITION(entity.id,toggle); })
		.def("get_anim_current_time", [](Py_Entity entity,char* animDict,char* animName) -> float { return ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(entity.id,animDict,animName); })
		.def("get_anim_total_time", [](Py_Entity entity,char* animDict,char* animName) -> float { return ENTITY::GET_ENTITY_ANIM_TOTAL_TIME(entity.id,animDict,animName); })
		.def("get_bone_index_by_name", [](Py_Entity entity,char* boneName) -> int { return ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(entity.id,boneName); })
		.def("get_coords", [](Py_Entity entity,BOOL alive) -> Vector3 { return ENTITY::GET_ENTITY_COORDS(entity.id,alive); })
		.def("get_height", [](Py_Entity entity,float X,float Y,float Z,BOOL atTop,BOOL inWorldCoords) -> float { return ENTITY::GET_ENTITY_HEIGHT(entity.id,X,Y,Z,atTop,inWorldCoords); })
		.def("get_nearest_player_to_on_team", [](Py_Entity entity,int team) -> Py_Player { return ENTITY::GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(entity.id,team); })
		.def("get_offset_from_given_world_coords", [](Py_Entity entity,float posX,float posY,float posZ) -> Vector3 { return ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entity.id,posX,posY,posZ); })
		.def("get_offset_from_in_world_coords", [](Py_Entity entity,float offsetX,float offsetY,float offsetZ) -> Vector3 { return ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity.id,offsetX,offsetY,offsetZ); })
		.def("get_rotation", [](Py_Entity entity,int p1) -> Vector3 { return ENTITY::GET_ENTITY_ROTATION(entity.id,p1); })
		.def("get_world_position_of_bone", [](Py_Entity entity,int boneIndex) -> Vector3 { return ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(entity.id,boneIndex); })
		.def("has_anim_event_fired", [](Py_Entity entity,Py_Hash actionHash) -> BOOL { return ENTITY::HAS_ANIM_EVENT_FIRED(entity.id,actionHash.id); })
		.def("has_anim_finished", [](Py_Entity entity,char* animDict,char* animName,int p3) -> BOOL { return ENTITY::HAS_ENTITY_ANIM_FINISHED(entity.id,animDict,animName,p3); })
		.def("has_been_damaged_by_any_object", [](Py_Entity entity) -> BOOL { return ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(entity.id); })
		.def("has_been_damaged_by_any_ped", [](Py_Entity entity) -> BOOL { return ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(entity.id); })
		.def("has_been_damaged_by_any_vehicle", [](Py_Entity entity) -> BOOL { return ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(entity.id); })
		.def("has_been_damaged_by_entity", [](Py_Entity entity1,Py_Entity entity2,BOOL p2) -> BOOL { return ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(entity1.id,entity2.id,p2); })
		.def("has_clear_los_to_entity", [](Py_Entity entity1,Py_Entity entity2,int traceType) -> BOOL { return ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(entity1.id,entity2.id,traceType); })
		.def("has_clear_los_to_in_front", [](Py_Entity entity1,Py_Entity entity2) -> BOOL { return ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(entity1.id,entity2.id); })
		.def("has_collided_with_anything", [](Py_Entity entity) -> BOOL { return ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(entity.id); })
		.def("has_collision_loaded_around_entity", [](Py_Entity entity) -> BOOL { return ENTITY::HAS_COLLISION_LOADED_AROUND_ENTITY(entity.id); })
		.def("is_at_coord", [](Py_Entity entity,float posX,float posY,float posZ,float sizeX,float sizeY,float sizeZ,BOOL p7,BOOL p8,int p9) -> BOOL { return ENTITY::IS_ENTITY_AT_COORD(entity.id,posX,posY,posZ,sizeX,sizeY,sizeZ,p7,p8,p9); })
		.def("is_at_entity", [](Py_Entity entity1,Py_Entity entity2,float sizeX,float sizeY,float sizeZ,BOOL p5,BOOL p6,int p7) -> BOOL { return ENTITY::IS_ENTITY_AT_ENTITY(entity1.id,entity2.id,sizeX,sizeY,sizeZ,p5,p6,p7); })
		.def("is_attached_to_entity", [](Py_Entity from,Py_Entity to) -> BOOL { return ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(from.id,to.id); })
		.def("is_in_angled_area", [](Py_Entity entity,float x1,float y1,float z1,float x2,float y2,float z2,float angle,BOOL p8,BOOL p9,Py_Any p10) -> BOOL { return ENTITY::IS_ENTITY_IN_ANGLED_AREA(entity.id,x1,y1,z1,x2,y2,z2,angle,p8,p9,p10.id); })
		.def("is_in_area", [](Py_Entity entity,float x1,float y1,float z1,float x2,float y2,float z2,BOOL p7,BOOL p8,Py_Any p9) -> BOOL { return ENTITY::IS_ENTITY_IN_AREA(entity.id,x1,y1,z1,x2,y2,z2,p7,p8,p9.id); })
		.def("is_in_zone", [](Py_Entity entity,char* zone) -> BOOL { return ENTITY::IS_ENTITY_IN_ZONE(entity.id,zone); })
		.def("is_playing_anim", [](Py_Entity entity,char* animDict,char* animName,int p4) -> BOOL { return ENTITY::IS_ENTITY_PLAYING_ANIM(entity.id,animDict,animName,p4); })
		.def("is_touching_entity", [](Py_Entity entity,Py_Entity targetEntity) -> BOOL { return ENTITY::IS_ENTITY_TOUCHING_ENTITY(entity.id,targetEntity.id); })
		.def("is_touching_model", [](Py_Entity entity,Py_Hash modelHash) -> BOOL { return ENTITY::IS_ENTITY_TOUCHING_MODEL(entity.id,modelHash.id); })
		.def("is_upright", [](Py_Entity entity,float angle) -> BOOL { return ENTITY::IS_ENTITY_UPRIGHT(entity.id,angle); })
		.def("play_anim", [](Py_Entity entity,char* animName,char* propName,float p3,BOOL p4,BOOL p5,BOOL p6,float delta,Py_Any bitset) -> BOOL { return ENTITY::PLAY_ENTITY_ANIM(entity.id,animName,propName,p3,p4,p5,p6,delta,bitset.id); })
		.def("play_synchronized_anim", [](Py_Entity entity,Py_Entity syncedScene,char* animation,char* propName,float p4,float p5,Py_Any p6,float p7) -> BOOL { return ENTITY::PLAY_SYNCHRONIZED_ENTITY_ANIM(entity.id,syncedScene.id,animation,propName,p4,p5,p6.id,p7); })
		.def("process_attachments", [](Py_Entity entity) -> void { return ENTITY::PROCESS_ENTITY_ATTACHMENTS(entity.id); })
		.def("reset_alpha", [](Py_Entity entity) -> void { return ENTITY::RESET_ENTITY_ALPHA(entity.id); })
		.def("set_alpha", [](Py_Entity entity,int alphaLevel,BOOL skin) -> void { return ENTITY::SET_ENTITY_ALPHA(entity.id,alphaLevel,skin); })
		.def("set_anim_current_time", [](Py_Entity entity,char* animDictionary,char* animName,float time) -> void { return ENTITY::SET_ENTITY_ANIM_CURRENT_TIME(entity.id,animDictionary,animName,time); })
		.def("set_anim_speed", [](Py_Entity entity,char* animDictionary,char* animName,float speedMultiplier) -> void { return ENTITY::SET_ENTITY_ANIM_SPEED(entity.id,animDictionary,animName,speedMultiplier); })
		.def("set_as_mission_entity", [](Py_Entity entity,BOOL value,BOOL byThisScript) -> void { return ENTITY::SET_ENTITY_AS_MISSION_ENTITY(entity.id,value,byThisScript); })
		.def("set_can_be_damaged_by_relationship_group", [](Py_Entity entity,BOOL p1,Py_Any p2) -> void { return ENTITY::SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(entity.id,p1,p2.id); })
		.def("set_collision", [](Py_Entity entity,BOOL toggle,BOOL keepPhysics) -> void { return ENTITY::SET_ENTITY_COLLISION(entity.id,toggle,keepPhysics); })
		.def("set_coords", [](Py_Entity entity,float X,float Y,float Z,BOOL xAxis,BOOL yAxis,BOOL zAxis,BOOL p7) -> void { return ENTITY::SET_ENTITY_COORDS(entity.id,X,Y,Z,xAxis,yAxis,zAxis,p7); })
		.def("set_coords_2", [](Py_Entity entity,float X,float Y,float Z,BOOL xAxis,BOOL yAxis,BOOL zAxis,BOOL p7) -> void { return ENTITY::_SET_ENTITY_COORDS_2(entity.id,X,Y,Z,xAxis,yAxis,zAxis,p7); })
		.def("set_coords_no_offset", [](Py_Entity entity,float X,float Y,float Z,BOOL p4,BOOL p5,BOOL p6) -> void { return ENTITY::SET_ENTITY_COORDS_NO_OFFSET(entity.id,X,Y,Z,p4,p5,p6); })
		.def("set_is_target_priority", [](Py_Entity entity,BOOL p1,float p2) -> void { return ENTITY::SET_ENTITY_IS_TARGET_PRIORITY(entity.id,p1,p2); })
		.def("set_no_collision_entity", [](Py_Entity entity1,Py_Entity entity2,BOOL toggle) -> void { return ENTITY::SET_ENTITY_NO_COLLISION_ENTITY(entity1.id,entity2.id,toggle); })
		.def("set_only_damaged_by_relationship_group", [](Py_Entity entity,BOOL p1,Py_Any p2) -> void { return ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(entity.id,p1,p2.id); })
		.def("set_proofs", [](Py_Entity entity,BOOL bulletProof,BOOL fireProof,BOOL explosionProof,BOOL collisionProof,BOOL meleeProof,BOOL p6,BOOL p7,BOOL drownProof) -> void { return ENTITY::SET_ENTITY_PROOFS(entity.id,bulletProof,fireProof,explosionProof,collisionProof,meleeProof,p6,p7,drownProof); })
		.def("set_quaternion", [](Py_Entity entity,float x,float y,float z,float w) -> void { return ENTITY::SET_ENTITY_QUATERNION(entity.id,x,y,z,w); })
		.def("set_rotation", [](Py_Entity entity,float pitch,float roll,float yaw,int p4,BOOL p5) -> void { return ENTITY::SET_ENTITY_ROTATION(entity.id,pitch,roll,yaw,p4,p5); })
		.def("set_velocity", [](Py_Entity entity,float x,float y,float z) -> void { return ENTITY::SET_ENTITY_VELOCITY(entity.id,x,y,z); })
		.def("set_visible", [](Py_Entity entity,BOOL toggle,BOOL unkb) -> void { return ENTITY::SET_ENTITY_VISIBLE(entity.id,toggle,unkb); })
		.def("stop_anim", [](Py_Entity entity,char* animation,char* animGroup,float p3) -> Py_Any { return ENTITY::STOP_ENTITY_ANIM(entity.id,animation,animGroup,p3); })
		.def("stop_synchronized_anim", [](Py_Entity entity,float p1,BOOL p2) -> BOOL { return ENTITY::STOP_SYNCHRONIZED_ENTITY_ANIM(entity.id,p1,p2); })
		.def("would_be_occluded", [](Py_Entity entity,float x,float y,float z,BOOL p4) -> BOOL { return ENTITY::WOULD_ENTITY_BE_OCCLUDED(entity.id,x,y,z,p4); })
		.def_static("create_forced_object", [](float x,float y,float z,Py_Any p3,Py_Hash modelHash,BOOL p5) -> void { return ENTITY::CREATE_FORCED_OBJECT(x,y,z,p3.id,modelHash.id,p5); })
		.def_static("create_model_hide", [](float p0,float p1,float p2,float p3,Py_Any p4,BOOL p5) -> void { return ENTITY::CREATE_MODEL_HIDE(p0,p1,p2,p3,p4.id,p5); })
		.def_static("create_model_hide_excluding_script_objects", [](float p0,float p1,float p2,float p3,Py_Any p4,BOOL p5) -> void { return ENTITY::CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(p0,p1,p2,p3,p4.id,p5); })
		.def_static("create_model_swap", [](float p0,float p1,float p2,float p3,Py_Any p4,Py_Any p5,BOOL p6) -> void { return ENTITY::CREATE_MODEL_SWAP(p0,p1,p2,p3,p4.id,p5.id,p6); })
		.def_static("get_anim_duration", [](char* animDict,char* animName) -> float { return ENTITY::_GET_ANIM_DURATION(animDict,animName); })
		.def_static("get_upright_value", [](Py_Any p0) -> float { return ENTITY::GET_ENTITY_UPRIGHT_VALUE(p0.id); })
		.def_static("remove_forced_object", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return ENTITY::REMOVE_FORCED_OBJECT(p0.id,p1.id,p2.id,p3.id,p4.id); })
		.def_static("remove_model_hide", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> void { return ENTITY::REMOVE_MODEL_HIDE(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("remove_model_swap", [](float p0,float p1,float p2,float p3,Py_Any p4,Py_Any p5,BOOL p6) -> void { return ENTITY::REMOVE_MODEL_SWAP(p0,p1,p2,p3,p4.id,p5.id,p6); })
		.def_static("stop_synchronized_map_anim", [](float p0,float p1,float p2,float p3,Py_Any p4,float p5) -> BOOL { return ENTITY::STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(p0,p1,p2,p3,p4.id,p5); })
;
	custom(py_Entity);
	py::class_<Py_Player> py_Player(m, "Player",py_Any);
	py_Player.def("__bool__", [](Py_Player t){return (BOOL)t.id;});
	py_Player
		.def_property_readonly("are_flashing_stars_about_to_drop", [](Py_Player player) -> BOOL { return PLAYER::ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(player.id); })
		.def_property_readonly("are_stars_greyed_out", [](Py_Player player) -> BOOL { return PLAYER::ARE_PLAYER_STARS_GREYED_OUT(player.id); })
		.def_property_readonly("can_start_mission", [](Py_Player player) -> BOOL { return PLAYER::CAN_PLAYER_START_MISSION(player.id); })
		.def_property_readonly("current_stealth_noise", [](Py_Player player) -> float { return PLAYER::GET_PLAYER_CURRENT_STEALTH_NOISE(player.id); })
		.def_property_readonly("group", [](Py_Player player) -> int { return PLAYER::GET_PLAYER_GROUP(player.id); })
		.def_property_readonly("has_reserve_parachute", [](Py_Player player) -> BOOL { return PLAYER::GET_PLAYER_HAS_RESERVE_PARACHUTE(player.id); })
		.def_property("invincible", [](Py_Player player) -> BOOL { return PLAYER::GET_PLAYER_INVINCIBLE(player.id); }, [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_INVINCIBLE(player.id,toggle); })
		.def_property_readonly("is_climbing", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_CLIMBING(player.id); })
		.def_property_readonly("is_control_on", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_CONTROL_ON(player.id); })
		.def_property_readonly("is_dead", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_DEAD(player.id); })
		.def_property_readonly("is_free_aiming", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_FREE_AIMING(player.id); })
		.def_property_readonly("is_free_for_ambient_task", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_FREE_FOR_AMBIENT_TASK(player.id); })
		.def_property_readonly("is_playing", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_PLAYING(player.id); })
		.def_property_readonly("is_pressing_horn", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_PRESSING_HORN(player.id); })
		.def_property_readonly("is_ready_for_cutscene", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_READY_FOR_CUTSCENE(player.id); })
		.def_property_readonly("is_riding_train", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_RIDING_TRAIN(player.id); })
		.def_property_readonly("is_script_control_on", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_SCRIPT_CONTROL_ON(player.id); })
		.def_property_readonly("is_special_ability_active", [](Py_Player player) -> BOOL { return PLAYER::IS_SPECIAL_ABILITY_ACTIVE(player.id); })
		.def_property_readonly("is_special_ability_enabled", [](Py_Player player) -> BOOL { return PLAYER::IS_SPECIAL_ABILITY_ENABLED(player.id); })
		.def_property_readonly("is_special_ability_meter_full", [](Py_Player player) -> BOOL { return PLAYER::IS_SPECIAL_ABILITY_METER_FULL(player.id); })
		.def_property_readonly("is_targetting_anything", [](Py_Player player) -> BOOL { return PLAYER::IS_PLAYER_TARGETTING_ANYTHING(player.id); })
		.def_property("max_armour", [](Py_Player player) -> int { return PLAYER::GET_PLAYER_MAX_ARMOUR(player.id); }, [](Py_Player player,int value) -> void { return PLAYER::SET_PLAYER_MAX_ARMOUR(player.id,value); })
		.def_property_readonly("name", [](Py_Player player) -> char* { return PLAYER::GET_PLAYER_NAME(player.id); })
		.def_property_readonly("ped", [](Py_Player player) -> Py_Ped { return PLAYER::GET_PLAYER_PED(player.id); })
		.def_property_readonly("ped_script_index", [](Py_Player player) -> Py_Ped { return PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(player.id); })
		.def_property_readonly("sprint_stamina_remaining", [](Py_Player player) -> float { return PLAYER::GET_PLAYER_SPRINT_STAMINA_REMAINING(player.id); })
		.def_property_readonly("sprint_time_remaining", [](Py_Player player) -> float { return PLAYER::GET_PLAYER_SPRINT_TIME_REMAINING(player.id); })
		.def_property("team", [](Py_Player player) -> int { return PLAYER::GET_PLAYER_TEAM(player.id); }, [](Py_Player player,int team) -> void { return PLAYER::SET_PLAYER_TEAM(player.id,team); })
		.def_property_readonly("time_since_drove_against_traffic", [](Py_Player player) -> int { return PLAYER::GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(player.id); })
		.def_property_readonly("time_since_drove_on_pavement", [](Py_Player player) -> int { return PLAYER::GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(player.id); })
		.def_property_readonly("time_since_hit_ped", [](Py_Player player) -> int { return PLAYER::GET_TIME_SINCE_PLAYER_HIT_PED(player.id); })
		.def_property_readonly("time_since_hit_vehicle", [](Py_Player player) -> int { return PLAYER::GET_TIME_SINCE_PLAYER_HIT_VEHICLE(player.id); })
		.def_property_readonly("underwater_time_remaining", [](Py_Player player) -> float { return PLAYER::GET_PLAYER_UNDERWATER_TIME_REMAINING(player.id); })
		.def_property_readonly("wanted_centre_position", [](Py_Player player) -> Vector3 { return PLAYER::GET_PLAYER_WANTED_CENTRE_POSITION(player.id); })
		.def_property_readonly("wanted_level", [](Py_Player player) -> int { return PLAYER::GET_PLAYER_WANTED_LEVEL(player.id); })
		.def_property_readonly("wanted_level_radius", [](Py_Player player) -> float { return PLAYER::GET_WANTED_LEVEL_RADIUS(player.id); })
		.def("set_air_drag_multiplier_for_players_vehicle", [](Py_Player player,float multiplier) -> void { return PLAYER::SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(player.id,multiplier); })
		.def("set_all_random_peds_flee", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_ALL_RANDOM_PEDS_FLEE(player.id,toggle); })
		.def("set_auto_give_parachute_when_enter_plane", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(player.id,toggle); })
		.def("set_can_be_hassled_by_gangs", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(player.id,toggle); })
		.def("set_can_do_drive_by", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_CAN_DO_DRIVE_BY(player.id,toggle); })
		.def("set_can_leave_parachute_smoke_trail", [](Py_Player player,BOOL enabled) -> void { return PLAYER::SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(player.id,enabled); })
		.def("set_can_use_cover", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_CAN_USE_COVER(player.id,toggle); })
		.def("set_cloth_pin_frames", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_CLOTH_PIN_FRAMES(player.id,toggle); })
		.def("set_disable_ambient_melee_move", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_DISABLE_AMBIENT_MELEE_MOVE(player.id,toggle); })
		.def("set_dispatch_cops_for_player", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_DISPATCH_COPS_FOR_PLAYER(player.id,toggle); })
		.def("set_everyone_ignore_player", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_EVERYONE_IGNORE_PLAYER(player.id,toggle); })
		.def("set_force_skip_aim_intro", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_FORCE_SKIP_AIM_INTRO(player.id,toggle); })
		.def("set_forced_aim", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_FORCED_AIM(player.id,toggle); })
		.def("set_forced_zoom", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_FORCED_ZOOM(player.id,toggle); })
		.def("set_health_recharge_multiplier", [](Py_Player player,float regenRate) -> void { return PLAYER::SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(player.id,regenRate); })
		.def("set_hud_anim_stop_level", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_HUD_ANIM_STOP_LEVEL(player.id,toggle); })
		.def("set_ignore_low_priority_shocking_events", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(player.id,toggle); })
		.def("set_lockon", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_LOCKON(player.id,toggle); })
		.def("set_lockon_range_override", [](Py_Player player,float range) -> void { return PLAYER::SET_PLAYER_LOCKON_RANGE_OVERRIDE(player.id,range); })
		.def("set_may_only_enter_this_vehicle", [](Py_Player player,Py_Vehicle vehicle) -> void { return PLAYER::SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(player.id,vehicle.id); })
		.def("set_melee_weapon_damage_modifier", [](Py_Player player,float modifier) -> void { return PLAYER::SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(player.id,modifier); })
		.def("set_melee_weapon_defense_modifier", [](Py_Player player,float modifier) -> void { return PLAYER::SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(player.id,modifier); })
		.def("set_model", [](Py_Player player,Py_Hash model) -> void { return PLAYER::SET_PLAYER_MODEL(player.id,model.id); })
		.def("set_noise_multiplier", [](Py_Player player,float multiplier) -> void { return PLAYER::SET_PLAYER_NOISE_MULTIPLIER(player.id,multiplier); })
		.def("set_parachute_model_override", [](Py_Player player,Py_Hash model) -> void { return PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(player.id,model.id); })
		.def("set_parachute_pack_model_override", [](Py_Player player,Py_Hash model) -> void { return PLAYER::SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player.id,model.id); })
		.def("set_police_ignore_player", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_POLICE_IGNORE_PLAYER(player.id,toggle); })
		.def("set_reflag_prefer_rear_seats", [](Py_Player player,int flags) -> void { return PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(player.id,flags); })
		.def("set_run_sprint_multiplier_for_player", [](Py_Player player,float multiplier) -> void { return PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(player.id,multiplier); })
		.def("set_simulate_aiming", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_SIMULATE_AIMING(player.id,toggle); })
		.def("set_sneaking_noise_multiplier", [](Py_Player player,float multiplier) -> void { return PLAYER::SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(player.id,multiplier); })
		.def("set_sprint", [](Py_Player player,BOOL toggle) -> void { return PLAYER::SET_PLAYER_SPRINT(player.id,toggle); })
		.def("set_stealth_perception_modifier", [](Py_Player player,float value) -> void { return PLAYER::SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(player.id,value); })
		.def("set_swim_multiplier_for_player", [](Py_Player player,float multiplier) -> void { return PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(player.id,multiplier); })
		.def("set_vehicle_damage_modifier", [](Py_Player player,float damageAmount) -> void { return PLAYER::SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(player.id,damageAmount); })
		.def("set_vehicle_defense_modifier", [](Py_Player player,float modifier) -> void { return PLAYER::SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(player.id,modifier); })
		.def("set_wanted_level_difficulty", [](Py_Player player,float difficulty) -> void { return PLAYER::SET_WANTED_LEVEL_DIFFICULTY(player.id,difficulty); })
		.def("set_wanted_level_now", [](Py_Player player,BOOL p1) -> void { return PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(player.id,p1); })
		.def("set_weapon_damage_modifier", [](Py_Player player,float damageAmount) -> void { return PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(player.id,damageAmount); })
		.def("set_weapon_defense_modifier", [](Py_Player player,float modifier) -> void { return PLAYER::SET_PLAYER_WEAPON_DEFENSE_MODIFIER(player.id,modifier); })
		.def("can_ped_hear_player", [](Py_Player player,Py_Ped ped) -> BOOL { return PLAYER::CAN_PED_HEAR_PLAYER(player.id,ped.id); })
		.def("change_ped", [](Py_Player player,Py_Ped ped,BOOL b1,BOOL b2) -> void { return PLAYER::CHANGE_PLAYER_PED(player.id,ped.id,b1,b2); })
		.def("clear_has_damaged_at_least_one_non_animal_ped", [](Py_Player player) -> void { return PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player.id); })
		.def("clear_has_damaged_at_least_one_ped", [](Py_Player player) -> void { return PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(player.id); })
		.def("clear_parachute_model_override", [](Py_Player player) -> void { return PLAYER::CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(player.id); })
		.def("clear_parachute_pack_model_override", [](Py_Player player) -> void { return PLAYER::CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(player.id); })
		.def("clear_parachute_variation_override", [](Py_Player player) -> void { return PLAYER::CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player.id); })
		.def("clear_wanted_level", [](Py_Player player) -> void { return PLAYER::CLEAR_PLAYER_WANTED_LEVEL(player.id); })
		.def("disable_firing", [](Py_Player player,BOOL toggle) -> void { return PLAYER::DISABLE_PLAYER_FIRING(player.id,toggle); })
		.def("disable_vehicle_rewards", [](Py_Player player) -> void { return PLAYER::DISABLE_PLAYER_VEHICLE_REWARDS(player.id); })
		.def("enable_special_ability", [](Py_Player player,BOOL toggle) -> void { return PLAYER::ENABLE_SPECIAL_ABILITY(player.id,toggle); })
		.def("give_ragdoll_control", [](Py_Player player,BOOL toggle) -> void { return PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(player.id,toggle); })
		.def("has_been_spotted_in_stolen_vehicle", [](Py_Player player) -> BOOL { return PLAYER::HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(player.id); })
		.def("has_damaged_at_least_one_non_animal_ped", [](Py_Player player) -> BOOL { return PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(player.id); })
		.def("has_damaged_at_least_one_ped", [](Py_Player player) -> BOOL { return PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(player.id); })
		.def("has_left_the_world", [](Py_Player player) -> BOOL { return PLAYER::HAS_PLAYER_LEFT_THE_WORLD(player.id); })
		.def("has_teleport_finished", [](Py_Player player) -> BOOL { return PLAYER::_HAS_PLAYER_TELEPORT_FINISHED(player.id); })
		.def("is_being_arrested", [](Py_Player player,BOOL atArresting) -> BOOL { return PLAYER::IS_PLAYER_BEING_ARRESTED(player.id,atArresting); })
		.def("is_free_aiming_at_entity", [](Py_Player player,Py_Entity entity) -> BOOL { return PLAYER::IS_PLAYER_FREE_AIMING_AT_ENTITY(player.id,entity.id); })
		.def("is_targetting_entity", [](Py_Player player,Py_Entity entity) -> BOOL { return PLAYER::IS_PLAYER_TARGETTING_ENTITY(player.id,entity.id); })
		.def("is_wanted_level_greater", [](Py_Player player,int wantedLevel) -> BOOL { return PLAYER::IS_PLAYER_WANTED_LEVEL_GREATER(player.id,wantedLevel); })
		.def("remove_helmet", [](Py_Player player,BOOL p2) -> void { return PLAYER::REMOVE_PLAYER_HELMET(player.id,p2); })
		.def("report_crime", [](Py_Player player,int crimeType,int wantedLvlThresh) -> void { return PLAYER::REPORT_CRIME(player.id,crimeType,wantedLvlThresh); })
		.def("reset_arrest_state", [](Py_Player player) -> void { return PLAYER::RESET_PLAYER_ARREST_STATE(player.id); })
		.def("reset_input_gait", [](Py_Player player) -> void { return PLAYER::RESET_PLAYER_INPUT_GAIT(player.id); })
		.def("reset_stamina", [](Py_Player player) -> void { return PLAYER::RESET_PLAYER_STAMINA(player.id); })
		.def("reset_wanted_level_difficulty", [](Py_Player player) -> void { return PLAYER::RESET_WANTED_LEVEL_DIFFICULTY(player.id); })
		.def("restore_stamina", [](Py_Player player,float p1) -> void { return PLAYER::RESTORE_PLAYER_STAMINA(player.id,p1); })
		.def("set_all_random_peds_flee_this_frame", [](Py_Player player) -> void { return PLAYER::SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(player.id); })
		.def("set_areas_generator_orientation", [](Py_Player player) -> void { return PLAYER::SET_AREAS_GENERATOR_ORIENTATION(player.id); })
		.def("set_control", [](Py_Player player,BOOL toggle,int possiblyFlags) -> void { return PLAYER::SET_PLAYER_CONTROL(player.id,toggle,possiblyFlags); })
		.def("set_has_reserve_parachute", [](Py_Player player) -> void { return PLAYER::SET_PLAYER_HAS_RESERVE_PARACHUTE(player.id); })
		.def("set_may_not_enter_any_vehicle", [](Py_Player player) -> void { return PLAYER::SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(player.id); })
		.def("set_parachute_variation_override", [](Py_Player player,int p1,Py_Any p2,Py_Any p3,BOOL p4) -> void { return PLAYER::SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(player.id,p1,p2.id,p3.id,p4); })
		.def("set_targeting_mode", [](Py_Player player) -> void { return PLAYER::SET_PLAYER_TARGETING_MODE(player.id); })
		.def("set_wanted_centre_position", [](Py_Player player,float x,float y,float z) -> void { return PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(player.id,x,y,z); })
		.def("set_wanted_level", [](Py_Player player,int wantedLevel,BOOL p2) -> void { return PLAYER::SET_PLAYER_WANTED_LEVEL(player.id,wantedLevel,p2); })
		.def("set_wanted_level_no_drop", [](Py_Player player,int wantedLevel,BOOL p2) -> void { return PLAYER::SET_PLAYER_WANTED_LEVEL_NO_DROP(player.id,wantedLevel,p2); })
		.def("simulate_input_gait", [](Py_Player player,float amount,int gaitType,float speed,BOOL p4,BOOL p5) -> void { return PLAYER::SIMULATE_PLAYER_INPUT_GAIT(player.id,amount,gaitType,speed,p4,p5); })
		.def("special_ability_charge_absolute", [](Py_Player player,int p1,BOOL p2) -> void { return PLAYER::SPECIAL_ABILITY_CHARGE_ABSOLUTE(player.id,p1,p2); })
		.def("special_ability_charge_continuous", [](Py_Player player,BOOL p1) -> void { return PLAYER::SPECIAL_ABILITY_CHARGE_CONTINUOUS(player.id,p1); })
		.def("special_ability_charge_large", [](Py_Player player,BOOL p1,BOOL p2) -> void { return PLAYER::SPECIAL_ABILITY_CHARGE_LARGE(player.id,p1,p2); })
		.def("special_ability_charge_medium", [](Py_Player player,BOOL p1,BOOL p2) -> void { return PLAYER::SPECIAL_ABILITY_CHARGE_MEDIUM(player.id,p1,p2); })
		.def("special_ability_charge_normalized", [](Py_Player player,float p1,BOOL p2) -> void { return PLAYER::SPECIAL_ABILITY_CHARGE_NORMALIZED(player.id,p1,p2); })
		.def("special_ability_charge_small", [](Py_Player player,BOOL p1,BOOL p2) -> void { return PLAYER::SPECIAL_ABILITY_CHARGE_SMALL(player.id,p1,p2); })
		.def("special_ability_deactivate", [](Py_Player player) -> void { return PLAYER::SPECIAL_ABILITY_DEACTIVATE(player.id); })
		.def("special_ability_deactivate_fast", [](Py_Player player) -> void { return PLAYER::SPECIAL_ABILITY_DEACTIVATE_FAST(player.id); })
		.def("special_ability_deplete_meter", [](Py_Player player,BOOL p1) -> void { return PLAYER::SPECIAL_ABILITY_DEPLETE_METER(player.id,p1); })
		.def("special_ability_fill_meter", [](Py_Player player,BOOL p1) -> void { return PLAYER::SPECIAL_ABILITY_FILL_METER(player.id,p1); })
		.def("special_ability_reset", [](Py_Player player) -> void { return PLAYER::SPECIAL_ABILITY_RESET(player.id); })
		.def("start_teleport", [](Py_Player player,float x,float y,float z,float heading,BOOL p5,BOOL p6,BOOL p7) -> void { return PLAYER::START_PLAYER_TELEPORT(player.id,x,y,z,heading,p5,p6,p7); })
		.def_static("assisted_movement_close_route", []() -> void { return PLAYER::ASSISTED_MOVEMENT_CLOSE_ROUTE(); })
		.def_static("assisted_movement_flush_route", []() -> void { return PLAYER::ASSISTED_MOVEMENT_FLUSH_ROUTE(); })
		.def_static("attach_virtual_bound", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7) -> void { return PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(p0,p1,p2,p3,p4,p5,p6,p7); })
		.def_static("detach_virtual_bound", []() -> void { return PLAYER::PLAYER_DETACH_VIRTUAL_BOUND(); })
		.def_static("display_system_signin_ui", [](Py_ScrHandle scrHandle) -> void { return PLAYER::DISPLAY_SYSTEM_SIGNIN_UI(scrHandle.id); })
		.def_static("force_cleanup", [](int cleanupFlags) -> void { return PLAYER::FORCE_CLEANUP(cleanupFlags); })
		.def_static("force_cleanup_for_all_threads_with_this_name", [](char* name,int cleanupFlags) -> void { return PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(name,cleanupFlags); })
		.def_static("force_cleanup_for_thread_with_this_id", [](int id,int cleanupFlags) -> void { return PLAYER::FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(id,cleanupFlags); })
		.def_static("get_cause_of_most_recent_force_cleanup", []() -> int { return PLAYER::GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP(); })
		.def_static("get_index", []() -> Py_Player { return PLAYER::GET_PLAYER_INDEX(); })
		.def_static("get_max_wanted_level", []() -> int { return PLAYER::GET_MAX_WANTED_LEVEL(); })
		.def_static("get_number_of_players", []() -> int { return PLAYER::GET_NUMBER_OF_PLAYERS(); })
		.def_static("get_players_last_vehicle", []() -> Py_Vehicle { return PLAYER::GET_PLAYERS_LAST_VEHICLE(); })
		.def_static("get_time_since_last_arrest", []() -> int { return PLAYER::GET_TIME_SINCE_LAST_ARREST(); })
		.def_static("get_time_since_last_death", []() -> int { return PLAYER::GET_TIME_SINCE_LAST_DEATH(); })
		.def_static("get_wanted_level_threshold", [](int wantedLevel) -> int { return PLAYER::GET_WANTED_LEVEL_THRESHOLD(wantedLevel); })
		.def_static("give_achievement_to_player", [](int achievement) -> BOOL { return PLAYER::GIVE_ACHIEVEMENT_TO_PLAYER(achievement); })
		.def_static("has_achievement_been_passed", [](int achievement) -> BOOL { return PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(achievement); })
		.def_static("has_force_cleanup_occurred", [](int cleanupFlags) -> BOOL { return PLAYER::HAS_FORCE_CLEANUP_OCCURRED(cleanupFlags); })
		.def_static("id", []() -> Py_Player { return PLAYER::PLAYER_ID(); })
		.def_static("int_to_participantindex", [](int value) -> int { return PLAYER::INT_TO_PARTICIPANTINDEX(value); })
		.def_static("int_to_playerindex", [](int value) -> Py_Player { return PLAYER::INT_TO_PLAYERINDEX(value); })
		.def_static("is_logging_in_np", []() -> BOOL { return PLAYER::IS_PLAYER_LOGGING_IN_NP(); })
		.def_static("is_online", []() -> BOOL { return PLAYER::IS_PLAYER_ONLINE(); })
		.def_static("is_special_ability_unlocked", [](Py_Hash Johnelle) -> BOOL { return PLAYER::IS_SPECIAL_ABILITY_UNLOCKED(Johnelle.id); })
		.def_static("is_system_ui_being_displayed", []() -> BOOL { return PLAYER::IS_SYSTEM_UI_BEING_DISPLAYED(); })
		.def_static("is_teleport_active", []() -> BOOL { return PLAYER::IS_PLAYER_TELEPORT_ACTIVE(); })
		.def_static("network_id_to_int", []() -> int { return PLAYER::NETWORK_PLAYER_ID_TO_INT(); })
		.def_static("ped_id", []() -> Py_Ped { return PLAYER::PLAYER_PED_ID(); })
		.def_static("set_cloth_lock_counter", [](int value) -> void { return PLAYER::SET_PLAYER_CLOTH_LOCK_COUNTER(value); })
		.def_static("set_cloth_package_index", [](int index) -> void { return PLAYER::SET_PLAYER_CLOTH_PACKAGE_INDEX(index); })
		.def_static("set_max_wanted_level", [](int maxWantedLevel) -> void { return PLAYER::SET_MAX_WANTED_LEVEL(maxWantedLevel); })
		.def_static("set_police_radar_blips", [](BOOL toggle) -> void { return PLAYER::SET_POLICE_RADAR_BLIPS(toggle); })
		.def_static("set_special_ability_multiplier", [](float multiplier) -> void { return PLAYER::SET_SPECIAL_ABILITY_MULTIPLIER(multiplier); })
		.def_static("set_wanted_level_multiplier", [](float multiplier) -> void { return PLAYER::SET_WANTED_LEVEL_MULTIPLIER(multiplier); })
		.def_static("special_ability_lock", [](Py_Hash playerModel) -> void { return PLAYER::SPECIAL_ABILITY_LOCK(playerModel.id); })
		.def_static("special_ability_unlock", [](Py_Hash playerModel) -> void { return PLAYER::SPECIAL_ABILITY_UNLOCK(playerModel.id); })
		.def_static("start_firing_amnesty", [](int duration) -> void { return PLAYER::START_FIRING_AMNESTY(duration); })
		.def_static("stop_teleport", []() -> void { return PLAYER::STOP_PLAYER_TELEPORT(); })
;
	custom(py_Player);
	py::class_<Py_Ped> py_Ped(m, "Ped",py_Entity);
	py_Ped.def("__bool__", [](Py_Ped t){return (BOOL)t.id;});
	py_Ped
		.def_property("accuracy", [](Py_Ped ped) -> int { return PED::GET_PED_ACCURACY(ped.id); }, [](Py_Ped ped,int accuracy) -> void { return PED::SET_PED_ACCURACY(ped.id,accuracy); })
		.def_property("alertness", [](Py_Ped ped) -> Py_Any { return PED::GET_PED_ALERTNESS(ped.id); }, [](Py_Ped ped,Py_Any value) -> void { return PED::SET_PED_ALERTNESS(ped.id,value.id); })
		.def_property("armour", [](Py_Ped ped) -> int { return PED::GET_PED_ARMOUR(ped.id); }, [](Py_Ped ped,int amount) -> void { return PED::SET_PED_ARMOUR(ped.id,amount); })
		.def_property_readonly("can_knock_off_vehicle", [](Py_Ped ped) -> BOOL { return PED::CAN_KNOCK_PED_OFF_VEHICLE(ped.id); })
		.def_property("can_ragdoll", [](Py_Ped ped) -> BOOL { return PED::CAN_PED_RAGDOLL(ped.id); }, [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_RAGDOLL(ped.id,toggle); })
		.def_property_readonly("cause_of_death", [](Py_Ped ped) -> Py_Hash { return PED::GET_PED_CAUSE_OF_DEATH(ped.id); })
		.def_property("combat_movement", [](Py_Ped ped) -> Py_Any { return PED::GET_PED_COMBAT_MOVEMENT(ped.id); }, [](Py_Ped ped,int combatMovement) -> void { return PED::SET_PED_COMBAT_MOVEMENT(ped.id,combatMovement); })
		.def_property("combat_range", [](Py_Ped ped) -> Py_Any { return PED::GET_PED_COMBAT_RANGE(ped.id); }, [](Py_Ped ped,int p1) -> void { return PED::SET_PED_COMBAT_RANGE(ped.id,p1); })
		.def_property("enveff_scale", [](Py_Ped ped) -> float { return PED::GET_PED_ENVEFF_SCALE(ped.id); }, [](Py_Ped ped,float value) -> void { return PED::SET_PED_ENVEFF_SCALE(ped.id,value); })
		.def_property_readonly("group_index", [](Py_Ped ped) -> int { return PED::GET_PED_GROUP_INDEX(ped.id); })
		.def_property_readonly("is_a_player", [](Py_Ped ped) -> BOOL { return PED::IS_PED_A_PLAYER(ped.id); })
		.def_property_readonly("is_aiming_from_cover", [](Py_Ped ped) -> BOOL { return PED::IS_PED_AIMING_FROM_COVER(ped.id); })
		.def_property_readonly("is_being_jacked", [](Py_Ped ped) -> BOOL { return PED::IS_PED_BEING_JACKED(ped.id); })
		.def_property_readonly("is_being_stealth_killed", [](Py_Ped ped) -> BOOL { return PED::IS_PED_BEING_STEALTH_KILLED(ped.id); })
		.def_property_readonly("is_climbing", [](Py_Ped ped) -> BOOL { return PED::IS_PED_CLIMBING(ped.id); })
		.def_property_readonly("is_conversation_dead", [](Py_Ped ped) -> BOOL { return PED::IS_CONVERSATION_PED_DEAD(ped.id); })
		.def_property_readonly("is_diving", [](Py_Ped ped) -> BOOL { return PED::IS_PED_DIVING(ped.id); })
		.def_property_readonly("is_doing_driveby", [](Py_Ped ped) -> BOOL { return PED::IS_PED_DOING_DRIVEBY(ped.id); })
		.def_property_readonly("is_ducking", [](Py_Ped ped) -> BOOL { return PED::IS_PED_DUCKING(ped.id); })
		.def_property_readonly("is_falling", [](Py_Ped ped) -> BOOL { return PED::IS_PED_FALLING(ped.id); })
		.def_property_readonly("is_fatally_injured", [](Py_Ped ped) -> BOOL { return PED::IS_PED_FATALLY_INJURED(ped.id); })
		.def_property_readonly("is_fleeing", [](Py_Ped ped) -> BOOL { return PED::IS_PED_FLEEING(ped.id); })
		.def_property_readonly("is_getting_into_a_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_GETTING_INTO_A_VEHICLE(ped.id); })
		.def_property_readonly("is_going_into_cover", [](Py_Ped ped) -> BOOL { return PED::IS_PED_GOING_INTO_COVER(ped.id); })
		.def_property_readonly("is_hanging_on_to_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_HANGING_ON_TO_VEHICLE(ped.id); })
		.def_property_readonly("is_human", [](Py_Ped ped) -> BOOL { return PED::IS_PED_HUMAN(ped.id); })
		.def_property_readonly("is_hurt", [](Py_Ped ped) -> BOOL { return PED::IS_PED_HURT(ped.id); })
		.def_property_readonly("is_in_any_boat", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_ANY_BOAT(ped.id); })
		.def_property_readonly("is_in_any_heli", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_ANY_HELI(ped.id); })
		.def_property_readonly("is_in_any_plane", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_ANY_PLANE(ped.id); })
		.def_property_readonly("is_in_any_police_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_ANY_POLICE_VEHICLE(ped.id); })
		.def_property_readonly("is_in_any_sub", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_ANY_SUB(ped.id); })
		.def_property_readonly("is_in_any_taxi", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_ANY_TAXI(ped.id); })
		.def_property_readonly("is_in_any_train", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_ANY_TRAIN(ped.id); })
		.def_property_readonly("is_in_cover_facing_left", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_COVER_FACING_LEFT(ped.id); })
		.def_property_readonly("is_in_flying_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_FLYING_VEHICLE(ped.id); })
		.def_property_readonly("is_in_group", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_GROUP(ped.id); })
		.def_property_readonly("is_in_melee_combat", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_MELEE_COMBAT(ped.id); })
		.def_property_readonly("is_in_parachute_free_fall", [](Py_Ped ped) -> BOOL { return PED::IS_PED_IN_PARACHUTE_FREE_FALL(ped.id); })
		.def_property_readonly("is_injured", [](Py_Ped ped) -> BOOL { return PED::IS_PED_INJURED(ped.id); })
		.def_property_readonly("is_jacking", [](Py_Ped ped) -> BOOL { return PED::IS_PED_JACKING(ped.id); })
		.def_property_readonly("is_jumping", [](Py_Ped ped) -> BOOL { return PED::IS_PED_JUMPING(ped.id); })
		.def_property_readonly("is_jumping_out_of_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_JUMPING_OUT_OF_VEHICLE(ped.id); })
		.def_property_readonly("is_male", [](Py_Ped ped) -> BOOL { return PED::IS_PED_MALE(ped.id); })
		.def_property_readonly("is_on_any_bike", [](Py_Ped ped) -> BOOL { return PED::IS_PED_ON_ANY_BIKE(ped.id); })
		.def_property_readonly("is_on_foot", [](Py_Ped ped) -> BOOL { return PED::IS_PED_ON_FOOT(ped.id); })
		.def_property_readonly("is_on_mount", [](Py_Ped ped) -> BOOL { return PED::IS_PED_ON_MOUNT(ped.id); })
		.def_property_readonly("is_on_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_ON_VEHICLE(ped.id); })
		.def_property_readonly("is_performing_stealth_kill", [](Py_Ped ped) -> BOOL { return PED::IS_PED_PERFORMING_STEALTH_KILL(ped.id); })
		.def_property_readonly("is_planting_bomb", [](Py_Ped ped) -> BOOL { return PED::IS_PED_PLANTING_BOMB(ped.id); })
		.def_property_readonly("is_prone", [](Py_Ped ped) -> BOOL { return PED::IS_PED_PRONE(ped.id); })
		.def_property_readonly("is_ragdoll", [](Py_Ped ped) -> BOOL { return PED::IS_PED_RAGDOLL(ped.id); })
		.def_property_readonly("is_reloading", [](Py_Ped ped) -> BOOL { return PED::IS_PED_RELOADING(ped.id); })
		.def_property_readonly("is_running_mobile_phone_task", [](Py_Ped ped) -> BOOL { return PED::IS_PED_RUNNING_MOBILE_PHONE_TASK(ped.id); })
		.def_property_readonly("is_running_ragdoll_task", [](Py_Ped ped) -> BOOL { return PED::IS_PED_RUNNING_RAGDOLL_TASK(ped.id); })
		.def_property_readonly("is_shooting", [](Py_Ped ped) -> BOOL { return PED::IS_PED_SHOOTING(ped.id); })
		.def_property_readonly("is_sitting_in_any_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_SITTING_IN_ANY_VEHICLE(ped.id); })
		.def_property_readonly("is_stopped", [](Py_Ped ped) -> BOOL { return PED::IS_PED_STOPPED(ped.id); })
		.def_property_readonly("is_swimming", [](Py_Ped ped) -> BOOL { return PED::IS_PED_SWIMMING(ped.id); })
		.def_property_readonly("is_swimming_under_water", [](Py_Ped ped) -> BOOL { return PED::IS_PED_SWIMMING_UNDER_WATER(ped.id); })
		.def_property_readonly("is_tracked", [](Py_Ped ped) -> BOOL { return PED::IS_PED_TRACKED(ped.id); })
		.def_property_readonly("is_tracked_visible", [](Py_Ped ped) -> BOOL { return PED::IS_TRACKED_PED_VISIBLE(ped.id); })
		.def_property_readonly("is_trying_to_enter_a_locked_vehicle", [](Py_Ped ped) -> BOOL { return PED::IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(ped.id); })
		.def_property_readonly("is_using_action_mode", [](Py_Ped ped) -> BOOL { return PED::IS_PED_USING_ACTION_MODE(ped.id); })
		.def_property_readonly("is_using_any_scenario", [](Py_Ped ped) -> BOOL { return PED::IS_PED_USING_ANY_SCENARIO(ped.id); })
		.def_property_readonly("is_vaulting", [](Py_Ped ped) -> BOOL { return PED::IS_PED_VAULTING(ped.id); })
		.def_property_readonly("is_wearing_helmet", [](Py_Ped ped) -> BOOL { return PED::IS_PED_WEARING_HELMET(ped.id); })
		.def_property_readonly("jack_target", [](Py_Ped ped) -> Py_Ped { return PED::GET_JACK_TARGET(ped.id); })
		.def_property_readonly("killer", [](Py_Ped ped) -> Py_Entity { return PED::_GET_PED_KILLER(ped.id); })
		.def_property("max_health", [](Py_Ped ped) -> int { return PED::GET_PED_MAX_HEALTH(ped.id); }, [](Py_Ped ped,int value) -> void { return PED::SET_PED_MAX_HEALTH(ped.id,value); })
		.def_property_readonly("melee_tarfor_ped", [](Py_Ped ped) -> Py_Ped { return PED::GET_MELEE_TARGET_FOR_PED(ped.id); })
		.def_property("money", [](Py_Ped ped) -> int { return PED::GET_PED_MONEY(ped.id); }, [](Py_Ped ped,int amount) -> void { return PED::SET_PED_MONEY(ped.id,amount); })
		.def_property_readonly("parachute_landing_type", [](Py_Ped ped) -> int { return PED::GET_PED_PARACHUTE_LANDING_TYPE(ped.id); })
		.def_property_readonly("parachute_state", [](Py_Ped ped) -> int { return PED::GET_PED_PARACHUTE_STATE(ped.id); })
		.def_property_readonly("peds_jacker", [](Py_Ped ped) -> Py_Ped { return PED::GET_PEDS_JACKER(ped.id); })
		.def_property_readonly("player_is_following", [](Py_Ped ped) -> Py_Player { return PED::GET_PLAYER_PED_IS_FOLLOWING(ped.id); })
		.def_property("relationship_group_default_hash", [](Py_Ped ped) -> Py_Hash { return PED::GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped.id); }, [](Py_Ped ped,Py_Hash hash) -> void { return PED::SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(ped.id,hash.id); })
		.def_property("relationship_group_hash", [](Py_Ped ped) -> Py_Hash { return PED::GET_PED_RELATIONSHIP_GROUP_HASH(ped.id); }, [](Py_Ped ped,Py_Hash hash) -> void { return PED::SET_PED_RELATIONSHIP_GROUP_HASH(ped.id,hash.id); })
		.def_property_readonly("seat_is_trying_to_enter", [](Py_Ped ped) -> int { return PED::GET_SEAT_PED_IS_TRYING_TO_ENTER(ped.id); })
		.def_property_readonly("stealth_movement", [](Py_Ped ped) -> BOOL { return PED::GET_PED_STEALTH_MOVEMENT(ped.id); })
		.def_property_readonly("time_of_death", [](Py_Ped ped) -> int { return PED::_GET_PED_TIME_OF_DEATH(ped.id); })
		.def_property_readonly("type", [](Py_Ped ped) -> int { return PED::GET_PED_TYPE(ped.id); })
		.def_property_readonly("vehicle_is_trying_to_enter", [](Py_Ped ped) -> Py_Vehicle { return PED::GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped.id); })
		.def_property_readonly("vehicle_is_using", [](Py_Ped ped) -> Py_Vehicle { return PED::GET_VEHICLE_PED_IS_USING(ped.id); })
		.def("set_allow_vehicles_override", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_ALLOW_VEHICLES_OVERRIDE(ped.id,toggle); })
		.def("set_allowed_to_duck", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_ALLOWED_TO_DUCK(ped.id,toggle); })
		.def("set_as_cop", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_AS_COP(ped.id,toggle); })
		.def("set_as_enemy", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_AS_ENEMY(ped.id,toggle); })
		.def("set_as_group_leader", [](Py_Ped ped,int groupId) -> void { return PED::SET_PED_AS_GROUP_LEADER(ped.id,groupId); })
		.def("set_as_group_member", [](Py_Ped ped,int groupId) -> void { return PED::SET_PED_AS_GROUP_MEMBER(ped.id,groupId); })
		.def("set_blocking_of_non_temporary_events", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped.id,toggle); })
		.def("set_can_arm_ik", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_ARM_IK(ped.id,toggle); })
		.def("set_can_be_dragged_out", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_BE_DRAGGED_OUT(ped.id,toggle); })
		.def("set_can_be_knocked_off_vehicle", [](Py_Ped ped,int state) -> void { return PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(ped.id,state); })
		.def("set_can_be_shot_in_vehicle", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(ped.id,toggle); })
		.def("set_can_be_targeted_when_injured", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_BE_TARGETED_WHEN_INJURED(ped.id,toggle); })
		.def("set_can_be_targeted_without_los", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(ped.id,toggle); })
		.def("set_can_be_targetted", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_BE_TARGETTED(ped.id,toggle); })
		.def("set_can_cower_in_cover", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_COWER_IN_COVER(ped.id,toggle); })
		.def("set_can_evasive_dive", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_EVASIVE_DIVE(ped.id,toggle); })
		.def("set_can_head_ik", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_HEAD_IK(ped.id,toggle); })
		.def("set_can_leg_ik", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_LEG_IK(ped.id,toggle); })
		.def("set_can_peek_in_cover", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_PEEK_IN_COVER(ped.id,toggle); })
		.def("set_can_play_ambient_anims", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(ped.id,toggle); })
		.def("set_can_play_ambient_base_anims", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(ped.id,toggle); })
		.def("set_can_play_gesture_anims", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(ped.id,toggle); })
		.def("set_can_ragdoll_from_player_impact", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(ped.id,toggle); })
		.def("set_can_switch_weapon", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_SWITCH_WEAPON(ped.id,toggle); })
		.def("set_can_torso_ik", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_TORSO_IK(ped.id,toggle); })
		.def("set_can_use_auto_conversation_lookat", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(ped.id,toggle); })
		.def("set_capsule", [](Py_Ped ped,float value) -> void { return PED::SET_PED_CAPSULE(ped.id,value); })
		.def("set_combat_ability", [](Py_Ped ped,int p1) -> void { return PED::SET_PED_COMBAT_ABILITY(ped.id,p1); })
		.def("set_desired_heading", [](Py_Ped ped,float heading) -> void { return PED::SET_PED_DESIRED_HEADING(ped.id,heading); })
		.def("set_dies_in_sinking_vehicle", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_DIES_IN_SINKING_VEHICLE(ped.id,toggle); })
		.def("set_dies_in_vehicle", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_DIES_IN_VEHICLE(ped.id,toggle); })
		.def("set_dies_in_water", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_DIES_IN_WATER(ped.id,toggle); })
		.def("set_dies_instantly_in_water", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_DIES_INSTANTLY_IN_WATER(ped.id,toggle); })
		.def("set_dies_when_injured", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_DIES_WHEN_INJURED(ped.id,toggle); })
		.def("set_drive_by_clipoverride", [](Py_Ped ped,char* clipset) -> void { return PED::SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped.id,clipset); })
		.def("set_driver_ability", [](Py_Ped driver,float ability) -> void { return PED::SET_DRIVER_ABILITY(driver.id,ability); })
		.def("set_driver_aggressiveness", [](Py_Ped driver,float aggressiveness) -> void { return PED::SET_DRIVER_AGGRESSIVENESS(driver.id,aggressiveness); })
		.def("set_ducking", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_DUCKING(ped.id,toggle); })
		.def("set_enable_bound_ankles", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_ENABLE_BOUND_ANKLES(ped.id,toggle); })
		.def("set_enable_enveff_scale", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_ENABLE_PED_ENVEFF_SCALE(ped.id,toggle); })
		.def("set_enable_handcuffs", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_ENABLE_HANDCUFFS(ped.id,toggle); })
		.def("set_enable_scuba", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_ENABLE_SCUBA(ped.id,toggle); })
		.def("set_enable_weapon_blocking", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_ENABLE_WEAPON_BLOCKING(ped.id,toggle); })
		.def("set_eye_color", [](Py_Ped ped,int index) -> void { return PED::_SET_PED_EYE_COLOR(ped.id,index); })
		.def("set_firing_pattern", [](Py_Ped ped,Py_Hash patternHash) -> void { return PED::SET_PED_FIRING_PATTERN(ped.id,patternHash.id); })
		.def("set_generates_dead_body_events", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_GENERATES_DEAD_BODY_EVENTS(ped.id,toggle); })
		.def("set_get_out_upside_down_vehicle", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(ped.id,toggle); })
		.def("set_gravity", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_GRAVITY(ped.id,toggle); })
		.def("set_group_member_passenger_index", [](Py_Ped ped,int index) -> void { return PED::SET_PED_GROUP_MEMBER_PASSENGER_INDEX(ped.id,index); })
		.def("set_hearing_range", [](Py_Ped ped,float value) -> void { return PED::SET_PED_HEARING_RANGE(ped.id,value); })
		.def("set_helmet", [](Py_Ped ped,BOOL p1) -> void { return PED::SET_PED_HELMET(ped.id,p1); })
		.def("set_helmet_flag", [](Py_Ped ped,int helmetFlag) -> void { return PED::SET_PED_HELMET_FLAG(ped.id,helmetFlag); })
		.def("set_helmet_prop_index", [](Py_Ped ped,int propIndex) -> void { return PED::SET_PED_HELMET_PROP_INDEX(ped.id,propIndex); })
		.def("set_helmet_texture_index", [](Py_Ped ped,int textureIndex) -> void { return PED::SET_PED_HELMET_TEXTURE_INDEX(ped.id,textureIndex); })
		.def("set_id_range", [](Py_Ped ped,float value) -> void { return PED::SET_PED_ID_RANGE(ped.id,value); })
		.def("set_in_vehicle_context", [](Py_Ped ped,Py_Hash context) -> void { return PED::SET_PED_IN_VEHICLE_CONTEXT(ped.id,context.id); })
		.def("set_keep_task", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_KEEP_TASK(ped.id,toggle); })
		.def("set_leg_ik_mode", [](Py_Ped ped,int mode) -> void { return PED::SET_PED_LEG_IK_MODE(ped.id,mode); })
		.def("set_lod_multiplier", [](Py_Ped ped,float multiplier) -> void { return PED::SET_PED_LOD_MULTIPLIER(ped.id,multiplier); })
		.def("set_max_move_blend_ratio", [](Py_Ped ped,float value) -> void { return PED::SET_PED_MAX_MOVE_BLEND_RATIO(ped.id,value); })
		.def("set_max_time_in_water", [](Py_Ped ped,float value) -> void { return PED::SET_PED_MAX_TIME_IN_WATER(ped.id,value); })
		.def("set_max_time_underwater", [](Py_Ped ped,float value) -> void { return PED::SET_PED_MAX_TIME_UNDERWATER(ped.id,value); })
		.def("set_min_ground_time_for_stungun", [](Py_Ped ped,int ms) -> void { return PED::SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(ped.id,ms); })
		.def("set_min_move_blend_ratio", [](Py_Ped ped,float value) -> void { return PED::SET_PED_MIN_MOVE_BLEND_RATIO(ped.id,value); })
		.def("set_model_is_suppressed", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_MODEL_IS_SUPPRESSED(ped.id,toggle); })
		.def("set_motion_blur", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_MOTION_BLUR(ped.id,toggle); })
		.def("set_move_rate_override", [](Py_Ped ped,float value) -> void { return PED::SET_PED_MOVE_RATE_OVERRIDE(ped.id,value); })
		.def("set_name_debug", [](Py_Ped ped,char* name) -> void { return PED::SET_PED_NAME_DEBUG(ped.id,name); })
		.def("set_never_leaves_group", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_NEVER_LEAVES_GROUP(ped.id,toggle); })
		.def("set_plays_head_on_horn_anim_when_dies_in_vehicle", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(ped.id,toggle); })
		.def("set_primary_lookat", [](Py_Ped ped,Py_Ped lookAt) -> void { return PED::SET_PED_PRIMARY_LOOKAT(ped.id,lookAt.id); })
		.def("set_ragdoll_blocking_flags", [](Py_Ped ped,Py_Any p1) -> void { return PED::_SET_PED_RAGDOLL_BLOCKING_FLAGS(ped.id,p1.id); })
		.def("set_ragdoll_on_collision", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_RAGDOLL_ON_COLLISION(ped.id,toggle); })
		.def("set_random_component_variation", [](Py_Ped ped,BOOL p1) -> void { return PED::SET_PED_RANDOM_COMPONENT_VARIATION(ped.id,p1); })
		.def("set_seeing_range", [](Py_Ped ped,float value) -> void { return PED::SET_PED_SEEING_RANGE(ped.id,value); })
		.def("set_shoot_rate", [](Py_Ped ped,int shootRate) -> void { return PED::SET_PED_SHOOT_RATE(ped.id,shootRate); })
		.def("set_stay_in_vehicle_when_jacked", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(ped.id,toggle); })
		.def("set_steers_around_objects", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_STEERS_AROUND_OBJECTS(ped.id,toggle); })
		.def("set_steers_around_peds", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_STEERS_AROUND_PEDS(ped.id,toggle); })
		.def("set_steers_around_vehicles", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_STEERS_AROUND_VEHICLES(ped.id,toggle); })
		.def("set_strafe_clipset", [](Py_Ped ped,char* clipSet) -> void { return PED::SET_PED_STRAFE_CLIPSET(ped.id,clipSet); })
		.def("set_suffers_critical_hits", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_SUFFERS_CRITICAL_HITS(ped.id,toggle); })
		.def("set_sweat", [](Py_Ped ped,float sweat) -> void { return PED::SET_PED_SWEAT(ped.id,sweat); })
		.def("set_target_loss_response", [](Py_Ped ped,int responseType) -> void { return PED::SET_PED_TARGET_LOSS_RESPONSE(ped.id,responseType); })
		.def("set_to_load_cover", [](Py_Ped ped,BOOL toggle) -> void { return PED::SET_PED_TO_LOAD_COVER(ped.id,toggle); })
		.def("set_visual_field_center_angle", [](Py_Ped ped,float angle) -> void { return PED::SET_PED_VISUAL_FIELD_CENTER_ANGLE(ped.id,angle); })
		.def("set_visual_field_max_angle", [](Py_Ped ped,float value) -> void { return PED::SET_PED_VISUAL_FIELD_MAX_ANGLE(ped.id,value); })
		.def("set_visual_field_max_elevation_angle", [](Py_Ped ped,float angle) -> void { return PED::SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(ped.id,angle); })
		.def("set_visual_field_min_angle", [](Py_Ped ped,float value) -> void { return PED::SET_PED_VISUAL_FIELD_MIN_ANGLE(ped.id,value); })
		.def("set_visual_field_min_elevation_angle", [](Py_Ped ped,float angle) -> void { return PED::SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(ped.id,angle); })
		.def("set_visual_field_peripheral_range", [](Py_Ped ped,float range) -> void { return PED::SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(ped.id,range); })
		.def("set_weapon_movement_clipset", [](Py_Ped ped,char* clipSet) -> void { return PED::SET_PED_WEAPON_MOVEMENT_CLIPSET(ped.id,clipSet); })
		.def("set_wetness_height", [](Py_Ped ped,float height) -> void { return PED::SET_PED_WETNESS_HEIGHT(ped.id,height); })
		.def("add_armour_to_ped", [](Py_Ped ped,int amount) -> void { return PED::ADD_ARMOUR_TO_PED(ped.id,amount); })
		.def("apply_blood", [](Py_Ped ped,int boneIndex,float xRot,float yRot,float zRot,char* woundType) -> void { return PED::APPLY_PED_BLOOD(ped.id,boneIndex,xRot,yRot,zRot,woundType); })
		.def("apply_damage_decal", [](Py_Ped p0,int p1,float p2,float p3,float p4,float p5,float p6,int p7,BOOL p8,char* p9) -> void { return PED::APPLY_PED_DAMAGE_DECAL(p0.id,p1,p2,p3,p4,p5,p6,p7,p8,p9); })
		.def("apply_damage_pack", [](Py_Ped ped,char* damagePack,float damage,float mult) -> void { return PED::APPLY_PED_DAMAGE_PACK(ped.id,damagePack,damage,mult); })
		.def("apply_damage_to_ped", [](Py_Ped ped,Py_Any damageAmount,BOOL p2) -> void { return PED::APPLY_DAMAGE_TO_PED(ped.id,damageAmount.id,p2); })
		.def("apply_overlay", [](Py_Ped ped,Py_Hash collection,Py_Hash overlay) -> void { return PED::_APPLY_PED_OVERLAY(ped.id,collection.id,overlay.id); })
		.def("can_in_combat_see_target", [](Py_Ped ped,Py_Ped target) -> BOOL { return PED::CAN_PED_IN_COMBAT_SEE_TARGET(ped.id,target.id); })
		.def("clear_all_props", [](Py_Ped ped) -> void { return PED::CLEAR_ALL_PED_PROPS(ped.id); })
		.def("clear_alternate_movement_anim", [](Py_Ped ped,int stance,float p2) -> void { return PED::CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(ped.id,stance,p2); })
		.def("clear_blood_damage", [](Py_Ped ped) -> void { return PED::CLEAR_PED_BLOOD_DAMAGE(ped.id); })
		.def("clear_blood_damage_by_zone", [](Py_Ped p0,int p1) -> void { return PED::CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(p0.id,p1); })
		.def("clear_damage_decal_by_zone", [](Py_Ped p0,int p1,char* p2) -> void { return PED::CLEAR_PED_DAMAGE_DECAL_BY_ZONE(p0.id,p1,p2); })
		.def("clear_decorations", [](Py_Ped ped) -> void { return PED::CLEAR_PED_DECORATIONS(ped.id); })
		.def("clear_drive_by_clipset_override", [](Py_Ped ped) -> void { return PED::CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(ped.id); })
		.def("clear_facial_idle_anim_override", [](Py_Ped ped) -> void { return PED::CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(ped.id); })
		.def("clear_last_damage_bone", [](Py_Ped ped) -> void { return PED::CLEAR_PED_LAST_DAMAGE_BONE(ped.id); })
		.def("clear_prop", [](Py_Ped ped,int propId) -> void { return PED::CLEAR_PED_PROP(ped.id,propId); })
		.def("clear_wetness", [](Py_Ped ped) -> void { return PED::CLEAR_PED_WETNESS(ped.id); })
		.def("clone_ped", [](Py_Ped ped,float heading,BOOL networkHandle,BOOL pedHandle) -> Py_Ped { return PED::CLONE_PED(ped.id,heading,networkHandle,pedHandle); })
		.def("explode_head", [](Py_Ped ped,Py_Hash weaponHash) -> void { return PED::EXPLODE_PED_HEAD(ped.id,weaponHash.id); })
		.def("force_motion_state", [](Py_Ped ped,Py_Hash motionStateHash,BOOL p2,BOOL p3,BOOL p4) -> BOOL { return PED::FORCE_PED_MOTION_STATE(ped.id,motionStateHash.id,p2,p3,p4); })
		.def("force_to_open_parachute", [](Py_Ped ped) -> void { return PED::FORCE_PED_TO_OPEN_PARACHUTE(ped.id); })
		.def("get_bone_coords", [](Py_Ped ped,int boneId,float offsetX,float offsetY,float offsetZ) -> Vector3 { return PED::GET_PED_BONE_COORDS(ped.id,boneId,offsetX,offsetY,offsetZ); })
		.def("get_bone_index", [](Py_Ped ped,int boneId) -> int { return PED::GET_PED_BONE_INDEX(ped.id,boneId); })
		.def("get_combat_float", [](Py_Ped p0,int p1) -> float { return PED::GET_COMBAT_FLOAT(p0.id,p1); })
		.def("get_config_flag", [](Py_Ped ped,int flagId,BOOL p2) -> BOOL { return PED::GET_PED_CONFIG_FLAG(ped.id,flagId,p2); })
		.def("get_drawable_variation", [](Py_Ped ped,int componentId) -> int { return PED::GET_PED_DRAWABLE_VARIATION(ped.id,componentId); })
		.def("get_extracted_displacement", [](Py_Ped ped,BOOL p1) -> Vector3 { return PED::GET_PED_EXTRACTED_DISPLACEMENT(ped.id,p1); })
		.def("get_flood_invincibility", [](Py_Ped ped,BOOL p1) -> void { return PED::GET_PED_FLOOD_INVINCIBILITY(ped.id,p1); })
		.def("get_head_overlay_value", [](Py_Ped ped,int overlayID) -> int { return PED::_GET_PED_HEAD_OVERLAY_VALUE(ped.id,overlayID); })
		.def("get_number_of_drawable_variations", [](Py_Ped ped,int componentId) -> int { return PED::GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(ped.id,componentId); })
		.def("get_number_of_prop_drawable_variations", [](Py_Ped ped,int propId) -> int { return PED::GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(ped.id,propId); })
		.def("get_number_of_prop_texture_variations", [](Py_Ped ped,int propId,int drawableId) -> int { return PED::GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(ped.id,propId,drawableId); })
		.def("get_number_of_texture_variations", [](Py_Ped ped,int componentId,int drawableId) -> int { return PED::GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(ped.id,componentId,drawableId); })
		.def("get_palette_variation", [](Py_Ped ped,int componentId) -> int { return PED::GET_PED_PALETTE_VARIATION(ped.id,componentId); })
		.def("get_prop_index", [](Py_Ped ped,int componentId) -> int { return PED::GET_PED_PROP_INDEX(ped.id,componentId); })
		.def("get_prop_texture_index", [](Py_Ped ped,int componentId) -> int { return PED::GET_PED_PROP_TEXTURE_INDEX(ped.id,componentId); })
		.def("get_ragdoll_bone_index", [](Py_Ped ped,int bone) -> int { return PED::GET_PED_RAGDOLL_BONE_INDEX(ped.id,bone); })
		.def("get_relationship_between_peds", [](Py_Ped ped1,Py_Ped ped2) -> int { return PED::GET_RELATIONSHIP_BETWEEN_PEDS(ped1.id,ped2.id); })
		.def("get_reset_flag", [](Py_Ped ped,int flagId) -> BOOL { return PED::GET_PED_RESET_FLAG(ped.id,flagId); })
		.def("get_texture_variation", [](Py_Ped ped,int componentId) -> int { return PED::GET_PED_TEXTURE_VARIATION(ped.id,componentId); })
		.def("get_vehicle_is_in", [](Py_Ped ped,BOOL getLastVehicle) -> Py_Vehicle { return PED::GET_VEHICLE_PED_IS_IN(ped.id,getLastVehicle); })
		.def("give_helmet", [](Py_Ped ped,BOOL cannotPedRemove,int helmetFlag,int textureIndex) -> void { return PED::GIVE_PED_HELMET(ped.id,cannotPedRemove,helmetFlag,textureIndex); })
		.def("give_nm_message", [](Py_Ped ped) -> void { return PED::GIVE_PED_NM_MESSAGE(ped.id); })
		.def("has_head_blend_finished", [](Py_Ped ped) -> BOOL { return PED::HAS_PED_HEAD_BLEND_FINISHED(ped.id); })
		.def("is_being_stunned", [](Py_Ped ped,int p1) -> BOOL { return PED::IS_PED_BEING_STUNNED(ped.id,p1); })
		.def("is_component_variation_valid", [](Py_Ped ped,int componentId,int drawableId,int textureId) -> BOOL { return PED::IS_PED_COMPONENT_VARIATION_VALID(ped.id,componentId,drawableId,textureId); })
		.def("is_dead_or_dying", [](Py_Ped ped,BOOL p1) -> BOOL { return PED::IS_PED_DEAD_OR_DYING(ped.id,p1); })
		.def("is_facing_ped", [](Py_Ped ped1,Py_Player ped2,float angle) -> BOOL { return PED::IS_PED_FACING_PED(ped1.id,ped2.id,angle); })
		.def("is_group_member", [](Py_Ped ped,int groupId) -> BOOL { return PED::IS_PED_GROUP_MEMBER(ped.id,groupId); })
		.def("is_headtracking_entity", [](Py_Ped ped,Py_Entity entity) -> BOOL { return PED::IS_PED_HEADTRACKING_ENTITY(ped.id,entity.id); })
		.def("is_headtracking_ped", [](Py_Ped ped1,Py_Ped ped2) -> BOOL { return PED::IS_PED_HEADTRACKING_PED(ped1.id,ped2.id); })
		.def("is_in_any_vehicle", [](Py_Ped ped,BOOL atGetIn) -> BOOL { return PED::IS_PED_IN_ANY_VEHICLE(ped.id,atGetIn); })
		.def("is_in_combat", [](Py_Ped ped,Py_Ped target) -> BOOL { return PED::IS_PED_IN_COMBAT(ped.id,target.id); })
		.def("is_in_cover", [](Py_Ped ped,BOOL p1) -> BOOL { return PED::IS_PED_IN_COVER(ped.id,p1); })
		.def("is_in_model", [](Py_Ped ped,Py_Hash modelHash) -> BOOL { return PED::IS_PED_IN_MODEL(ped.id,modelHash.id); })
		.def("is_in_vehicle", [](Py_Ped ped,Py_Vehicle vehicle,BOOL atGetIn) -> BOOL { return PED::IS_PED_IN_VEHICLE(ped.id,vehicle.id,atGetIn); })
		.def("is_model", [](Py_Ped ped,Py_Hash modelHash) -> BOOL { return PED::IS_PED_MODEL(ped.id,modelHash.id); })
		.def("is_on_specific_vehicle", [](Py_Ped ped,Py_Vehicle vehicle) -> BOOL { return PED::IS_PED_ON_SPECIFIC_VEHICLE(ped.id,vehicle.id); })
		.def("is_scripted_scenario_using_conditional_anim", [](Py_Ped ped,char* animDict,char* anim) -> BOOL { return PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(ped.id,animDict,anim); })
		.def("is_shooting_in_area", [](Py_Ped ped,float x1,float y1,float z1,float x2,float y2,float z2,BOOL p7,BOOL p8) -> BOOL { return PED::IS_PED_SHOOTING_IN_AREA(ped.id,x1,y1,z1,x2,y2,z2,p7,p8); })
		.def("is_sitting_in_vehicle", [](Py_Ped ped,Py_Vehicle vehicle) -> BOOL { return PED::IS_PED_SITTING_IN_VEHICLE(ped.id,vehicle.id); })
		.def("is_using_scenario", [](Py_Ped ped,char* scenario) -> BOOL { return PED::IS_PED_USING_SCENARIO(ped.id,scenario); })
		.def("knock_off_vehicle", [](Py_Ped ped) -> void { return PED::KNOCK_PED_OFF_VEHICLE(ped.id); })
		.def("play_facial_anim", [](Py_Ped player,char* aaa,char* bbb) -> void { return PED::PLAY_FACIAL_ANIM(player.id,aaa,bbb); })
		.def("register_hated_targets_around_ped", [](Py_Ped ped,float areaToAttack) -> void { return PED::REGISTER_HATED_TARGETS_AROUND_PED(ped.id,areaToAttack); })
		.def("register_pedheadshot", [](Py_Ped ped) -> Py_Any { return PED::REGISTER_PEDHEADSHOT(ped.id); })
		.def("register_target", [](Py_Ped ped,Py_Ped target) -> void { return PED::REGISTER_TARGET(ped.id,target.id); })
		.def("remove_from_group", [](Py_Ped ped) -> void { return PED::REMOVE_PED_FROM_GROUP(ped.id); })
		.def("remove_helmet", [](Py_Ped ped,BOOL instantly) -> void { return PED::REMOVE_PED_HELMET(ped.id,instantly); })
		.def("reset_in_vehicle_context", [](Py_Ped ped) -> void { return PED::RESET_PED_IN_VEHICLE_CONTEXT(ped.id); })
		.def("reset_last_vehicle", [](Py_Ped ped) -> void { return PED::RESET_PED_LAST_VEHICLE(ped.id); })
		.def("reset_movement_clipset", [](Py_Ped ped,float p1) -> void { return PED::RESET_PED_MOVEMENT_CLIPSET(ped.id,p1); })
		.def("reset_ragdoll_timer", [](Py_Ped ped) -> void { return PED::RESET_PED_RAGDOLL_TIMER(ped.id); })
		.def("reset_strafe_clipset", [](Py_Ped ped) -> void { return PED::RESET_PED_STRAFE_CLIPSET(ped.id); })
		.def("reset_visible_damage", [](Py_Ped ped) -> void { return PED::RESET_PED_VISIBLE_DAMAGE(ped.id); })
		.def("reset_weapon_movement_clipset", [](Py_Ped ped) -> void { return PED::RESET_PED_WEAPON_MOVEMENT_CLIPSET(ped.id); })
		.def("resurrect_ped", [](Py_Ped ped) -> void { return PED::RESURRECT_PED(ped.id); })
		.def("revive_injured_ped", [](Py_Ped ped) -> void { return PED::REVIVE_INJURED_PED(ped.id); })
		.def("set_alternate_movement_anim", [](Py_Ped ped,int stance,char* animDictionary,char* animationName,float p4,BOOL p5) -> void { return PED::SET_PED_ALTERNATE_MOVEMENT_ANIM(ped.id,stance,animDictionary,animationName,p4,p5); })
		.def("set_can_attack_friendly", [](Py_Ped ped,BOOL toggle,BOOL p2) -> void { return PED::SET_CAN_ATTACK_FRIENDLY(ped.id,toggle,p2); })
		.def("set_can_be_targetted_by_player", [](Py_Ped ped,Py_Player player,BOOL toggle) -> void { return PED::SET_PED_CAN_BE_TARGETTED_BY_PLAYER(ped.id,player.id,toggle); })
		.def("set_can_be_targetted_by_team", [](Py_Ped ped,Py_Any team,BOOL toggle) -> void { return PED::SET_PED_CAN_BE_TARGETTED_BY_TEAM(ped.id,team.id,toggle); })
		.def("set_can_play_viseme_anims", [](Py_Ped ped,BOOL p1,BOOL p2) -> void { return PED::SET_PED_CAN_PLAY_VISEME_ANIMS(ped.id,p1,p2); })
		.def("set_can_smash_glass", [](Py_Ped ped,BOOL p1,BOOL p2) -> void { return PED::SET_PED_CAN_SMASH_GLASS(ped.id,p1,p2); })
		.def("set_can_teleport_to_group_leader", [](Py_Ped pedHandle,int groupHandle,BOOL p2) -> void { return PED::SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(pedHandle.id,groupHandle,p2); })
		.def("set_combat_attributes", [](Py_Ped ped,int attributeIndex,BOOL enabled) -> void { return PED::SET_PED_COMBAT_ATTRIBUTES(ped.id,attributeIndex,enabled); })
		.def("set_combat_float", [](Py_Ped ped,int combatType,float p2) -> void { return PED::SET_COMBAT_FLOAT(ped.id,combatType,p2); })
		.def("set_component_variation", [](Py_Ped ped,int componentId,int drawableId,int textureId,int paletteId) -> void { return PED::SET_PED_COMPONENT_VARIATION(ped.id,componentId,drawableId,textureId,paletteId); })
		.def("set_config_flag", [](Py_Ped ped,int flagId,BOOL value) -> void { return PED::SET_PED_CONFIG_FLAG(ped.id,flagId,value); })
		.def("set_coords_keep_vehicle", [](Py_Ped ped,float posX,float posY,float posZ) -> void { return PED::SET_PED_COORDS_KEEP_VEHICLE(ped.id,posX,posY,posZ); })
		.def("set_coords_no_gang", [](Py_Ped ped,float posX,float posY,float posZ) -> void { return PED::SET_PED_COORDS_NO_GANG(ped.id,posX,posY,posZ); })
		.def("set_default_component_variation", [](Py_Ped ped) -> void { return PED::SET_PED_DEFAULT_COMPONENT_VARIATION(ped.id); })
		.def("set_defensive_area_attached_to_ped", [](Py_Ped ped,Py_Ped attachPed,float p2,float p3,float p4,float p5,float p6,float p7,float p8,BOOL p9,BOOL p10) -> void { return PED::SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(ped.id,attachPed.id,p2,p3,p4,p5,p6,p7,p8,p9,p10); })
		.def("set_face_feature", [](Py_Ped ped,int index,float scale) -> void { return PED::_SET_PED_FACE_FEATURE(ped.id,index,scale); })
		.def("set_flee_attributes", [](Py_Ped ped,Py_Any p1,BOOL p2) -> void { return PED::SET_PED_FLEE_ATTRIBUTES(ped.id,p1.id,p2); })
		.def("set_hair_color", [](Py_Ped ped,int colorID,int highlightColorID) -> void { return PED::_SET_PED_HAIR_COLOR(ped.id,colorID,highlightColorID); })
		.def("set_head_blend_data", [](Py_Ped ped,int shapeFirstID,int shapeSecondID,int shapeThirdID,int skinFirstID,int skinSecondID,int skinThirdID,float shapeMix,float skinMix,float thirdMix,BOOL isParent) -> void { return PED::SET_PED_HEAD_BLEND_DATA(ped.id,shapeFirstID,shapeSecondID,shapeThirdID,skinFirstID,skinSecondID,skinThirdID,shapeMix,skinMix,thirdMix,isParent); })
		.def("set_head_overlay", [](Py_Ped ped,int overlayID,int index,float opacity) -> void { return PED::SET_PED_HEAD_OVERLAY(ped.id,overlayID,index,opacity); })
		.def("set_head_overlay_color", [](Py_Ped ped,int overlayID,int colorType,int colorID,int secondColorID) -> void { return PED::_SET_PED_HEAD_OVERLAY_COLOR(ped.id,overlayID,colorType,colorID,secondColorID); })
		.def("set_ik_target", [](Py_Ped ped,int p1,Py_Ped targetPed,int boneLookAt,float x,float y,float z,Py_Any p7,int duration,int duration1) -> void { return PED::SET_IK_TARGET(ped.id,p1,targetPed.id,boneLookAt,x,y,z,p7.id,duration,duration1); })
		.def("set_into_vehicle", [](Py_Ped ped,Py_Vehicle vehicle,int seatIndex) -> void { return PED::SET_PED_INTO_VEHICLE(ped.id,vehicle.id,seatIndex); })
		.def("set_move_anims_blend_out", [](Py_Ped ped) -> void { return PED::SET_PED_MOVE_ANIMS_BLEND_OUT(ped.id); })
		.def("set_movement_clipset", [](Py_Ped ped,char* clipSet,float p2) -> void { return PED::SET_PED_MOVEMENT_CLIPSET(ped.id,clipSet,p2); })
		.def("set_pinned_down", [](Py_Ped ped,BOOL pinned,int i) -> Py_Any { return PED::SET_PED_PINNED_DOWN(ped.id,pinned,i); })
		.def("set_prop_index", [](Py_Ped ped,int componentId,int drawableId,int TextureId,BOOL attach) -> void { return PED::SET_PED_PROP_INDEX(ped.id,componentId,drawableId,TextureId,attach); })
		.def("set_ragdoll_force_fall", [](Py_Ped ped) -> void { return PED::SET_PED_RAGDOLL_FORCE_FALL(ped.id); })
		.def("set_random_props", [](Py_Ped ped) -> void { return PED::SET_PED_RANDOM_PROPS(ped.id); })
		.def("set_reset_flag", [](Py_Ped ped,int flagId,BOOL doReset) -> void { return PED::SET_PED_RESET_FLAG(ped.id,flagId,doReset); })
		.def("set_shoots_at_coord", [](Py_Ped ped,float x,float y,float z,BOOL toggle) -> void { return PED::SET_PED_SHOOTS_AT_COORD(ped.id,x,y,z,toggle); })
		.def("set_sphere_defensive_area", [](Py_Ped ped,float x,float y,float z,float radius,BOOL p5,BOOL p6) -> void { return PED::SET_PED_SPHERE_DEFENSIVE_AREA(ped.id,x,y,z,radius,p5,p6); })
		.def("set_stealth_movement", [](Py_Ped ped,BOOL p1,char* action) -> void { return PED::SET_PED_STEALTH_MOVEMENT(ped.id,p1,action); })
		.def("set_to_inform_respected_friends", [](Py_Ped ped,float radius,Py_Any maxFriends) -> void { return PED::SET_PED_TO_INFORM_RESPECTED_FRIENDS(ped.id,radius,maxFriends.id); })
		.def("set_to_ragdoll", [](Py_Ped ped,int time1,int time2,int ragdollType,BOOL p4,BOOL p5,BOOL p6) -> BOOL { return PED::SET_PED_TO_RAGDOLL(ped.id,time1,time2,ragdollType,p4,p5,p6); })
		.def("set_using_action_mode", [](Py_Ped ped,BOOL p1,Py_Any p2,char* action) -> void { return PED::SET_PED_USING_ACTION_MODE(ped.id,p1,p2.id,action); })
		.def("set_wetness_enabled_this_frame", [](Py_Ped ped) -> void { return PED::SET_PED_WETNESS_ENABLED_THIS_FRAME(ped.id); })
		.def("unregister_pedheadshot", [](Py_Ped ped) -> void { return PED::UNREGISTER_PEDHEADSHOT(ped.id); })
		.def("update_head_blend_data", [](Py_Ped ped,float shapeMix,float skinMix,float thirdMix) -> void { return PED::UPDATE_PED_HEAD_BLEND_DATA(ped.id,shapeMix,skinMix,thirdMix); })
		.def("was_killed_by_stealth", [](Py_Ped ped) -> BOOL { return PED::WAS_PED_KILLED_BY_STEALTH(ped.id); })
		.def("was_killed_by_takedown", [](Py_Ped ped) -> BOOL { return PED::WAS_PED_KILLED_BY_TAKEDOWN(ped.id); })
		.def("was_skeleton_updated", [](Py_Ped ped) -> BOOL { return PED::WAS_PED_SKELETON_UPDATED(ped.id); })
		.def_static("add_scenario_blocking_area", [](float p0,float p1,float p2,float p3,float p4,float p5,BOOL p6,BOOL p7,BOOL p8,BOOL p9) -> Py_Any { return PED::ADD_SCENARIO_BLOCKING_AREA(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9); })
		.def_static("apply_blood_damage_by_zone", [](Py_Any p0,Py_Any p1,float p2,float p3,Py_Any p4) -> void { return PED::APPLY_PED_BLOOD_DAMAGE_BY_ZONE(p0.id,p1.id,p2,p3,p4.id); })
		.def_static("assign_player_to_ped", [](Py_Player player,Py_Ped ped) -> void { return PED::_ASSIGN_PLAYER_TO_PED(player.id,ped.id); })
		.def_static("attach_synchronized_scene_to_entity", [](Py_Any scene,Py_Any entity,Py_Any boneIndex) -> void { return PED::ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(scene.id,entity.id,boneIndex.id); })
		.def_static("can_create_random_bike_rider", []() -> BOOL { return PED::CAN_CREATE_RANDOM_BIKE_RIDER(); })
		.def_static("can_create_random_cops", []() -> BOOL { return PED::CAN_CREATE_RANDOM_COPS(); })
		.def_static("can_create_random_driver", []() -> BOOL { return PED::CAN_CREATE_RANDOM_DRIVER(); })
		.def_static("can_create_random_ped", [](Py_Any p0) -> BOOL { return PED::CAN_CREATE_RANDOM_PED(p0.id); })
		.def_static("clear_alternate_walk_anim", [](Py_Any p0,float p1) -> void { return PED::CLEAR_PED_ALTERNATE_WALK_ANIM(p0.id,p1); })
		.def_static("clear_non_creation_area", []() -> void { return PED::CLEAR_PED_NON_CREATION_AREA(); })
		.def_static("clear_relationship_between_groups", [](int relationship,Py_Hash group1,Py_Hash group2) -> void { return PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(relationship,group1.id,group2.id); })
		.def_static("create_group", [](int unused) -> int { return PED::CREATE_GROUP(unused); })
		.def_static("create_inside_vehicle", [](Py_Vehicle vehicle,int pedType,Py_Hash modelHash,int seat,BOOL networkHandle,BOOL pedHandle) -> Py_Ped { return PED::CREATE_PED_INSIDE_VEHICLE(vehicle.id,pedType,modelHash.id,seat,networkHandle,pedHandle); })
		.def_static("create_nm_message", [](BOOL startImmediately,int messageId) -> void { return PED::CREATE_NM_MESSAGE(startImmediately,messageId); })
		.def_static("create_ped", [](int pedType,Py_Hash modelHash,float x,float y,float z,float heading,BOOL networkHandle,BOOL pedHandle) -> Py_Ped { return PED::CREATE_PED(pedType,modelHash.id,x,y,z,heading,networkHandle,pedHandle); })
		.def_static("create_random_as_driver", [](Py_Vehicle vehicle,BOOL returnHandle) -> Py_Ped { return PED::CREATE_RANDOM_PED_AS_DRIVER(vehicle.id,returnHandle); })
		.def_static("create_random_ped", [](float posX,float posY,float posZ) -> Py_Ped { return PED::CREATE_RANDOM_PED(posX,posY,posZ); })
		.def_static("create_synchronized_scene", [](float x,float y,float z,float p3,float p4,float p5,Py_Any p6) -> Py_Any { return PED::CREATE_SYNCHRONIZED_SCENE(x,y,z,p3,p4,p5,p6.id); })
		.def_static("detach_synchronized_scene", [](Py_Any p0) -> void { return PED::DETACH_SYNCHRONIZED_SCENE(p0.id); })
		.def_static("does_group_exist", [](int groupId) -> BOOL { return PED::DOES_GROUP_EXIST(groupId); })
		.def_static("get_as_group_leader", [](int groupID) -> Py_Ped { return PED::_GET_PED_AS_GROUP_LEADER(groupID); })
		.def_static("get_as_group_member", [](int groupID,int memberNumber) -> Py_Ped { return PED::GET_PED_AS_GROUP_MEMBER(groupID,memberNumber); })
		.def_static("get_dead_pickup_coords", [](Py_Any p0,float p1,float p2) -> Vector3 { return PED::GET_DEAD_PED_PICKUP_COORDS(p0.id,p1,p2); })
		.def_static("get_decorations_state", [](Py_Any p0) -> Py_Any { return PED::GET_PED_DECORATIONS_STATE(p0.id); })
		.def_static("get_defensive_area_position", [](Py_Any p0,BOOL p1) -> Vector3 { return PED::GET_PED_DEFENSIVE_AREA_POSITION(p0.id,p1); })
		.def_static("get_first_parent_id_for_type", [](int type) -> int { return PED::_GET_FIRST_PARENT_ID_FOR_PED_TYPE(type); })
		.def_static("get_mount", [](Py_Any p0) -> Py_Any { return PED::GET_MOUNT(p0.id); })
		.def_static("get_num_hair_colors", []() -> int { return PED::_GET_NUM_HAIR_COLORS(); })
		.def_static("get_num_head_overlay_values", [](int overlayID) -> int { return PED::_GET_NUM_HEAD_OVERLAY_VALUES(overlayID); })
		.def_static("get_num_parent_peds_of_type", [](int type) -> int { return PED::_GET_NUM_PARENT_PEDS_OF_TYPE(type); })
		.def_static("get_pedheadshot_txd_string", [](int handle) -> char* { return PED::GET_PEDHEADSHOT_TXD_STRING(handle); })
		.def_static("get_random_at_coord", [](float x,float y,float z,float xRadius,float yRadius,float zRadius,int pedType) -> Py_Ped { return PED::GET_RANDOM_PED_AT_COORD(x,y,z,xRadius,yRadius,zRadius,pedType); })
		.def_static("get_relationship_between_groups", [](Py_Hash group1,Py_Hash group2) -> int { return PED::GET_RELATIONSHIP_BETWEEN_GROUPS(group1.id,group2.id); })
		.def_static("get_synchronized_scene_phase", [](Py_Any scene) -> float { return PED::GET_SYNCHRONIZED_SCENE_PHASE(scene.id); })
		.def_static("get_synchronized_scene_rate", [](Py_Any p0) -> float { return PED::GET_SYNCHRONIZED_SCENE_RATE(p0.id); })
		.def_static("get_tattoo_zone", [](Py_Hash collection,Py_Hash overlay) -> int { return PED::_GET_TATTOO_ZONE(collection.id,overlay.id); })
		.def_static("has_action_mode_asset_loaded", [](char* asset) -> BOOL { return PED::HAS_ACTION_MODE_ASSET_LOADED(asset); })
		.def_static("has_received_event", [](Py_Any p0,Py_Any p1) -> BOOL { return PED::HAS_PED_RECEIVED_EVENT(p0.id,p1.id); })
		.def_static("has_stealth_mode_asset_loaded", [](char* asset) -> BOOL { return PED::HAS_STEALTH_MODE_ASSET_LOADED(asset); })
		.def_static("hide_blood_damage_by_zone", [](Py_Any p0,Py_Any p1,BOOL p2) -> void { return PED::HIDE_PED_BLOOD_DAMAGE_BY_ZONE(p0.id,p1.id,p2); })
		.def_static("is_any_near_point", [](float x,float y,float z,float radius) -> BOOL { return PED::IS_ANY_PED_NEAR_POINT(x,y,z,radius); })
		.def_static("is_any_shooting_in_area", [](float p0,float p1,float p2,float p3,float p4,float p5,BOOL p6,BOOL p7) -> BOOL { return PED::IS_ANY_PED_SHOOTING_IN_AREA(p0,p1,p2,p3,p4,p5,p6,p7); })
		.def_static("is_cop_in_area_3d", [](float x1,float y1,float z1,float x2,float y2,float z2) -> BOOL { return PED::IS_COP_PED_IN_AREA_3D(x1,y1,z1,x2,y2,z2); })
		.def_static("is_pedheadshot_ready", [](int handle) -> BOOL { return PED::IS_PEDHEADSHOT_READY(handle); })
		.def_static("is_pedheadshot_valid", [](int handle) -> int { return PED::IS_PEDHEADSHOT_VALID(handle); })
		.def_static("is_responding_to_event", [](Py_Any p0,Py_Any p1) -> BOOL { return PED::IS_PED_RESPONDING_TO_EVENT(p0.id,p1.id); })
		.def_static("is_synchronized_scene_looped", [](Py_Any p0) -> BOOL { return PED::IS_SYNCHRONIZED_SCENE_LOOPED(p0.id); })
		.def_static("is_synchronized_scene_running", [](Py_Any p0) -> BOOL { return PED::IS_SYNCHRONIZED_SCENE_RUNNING(p0.id); })
		.def_static("knock_off_prop", [](int propIndex,BOOL p1,BOOL p2,BOOL p3,BOOL p4) -> void { return PED::KNOCK_OFF_PED_PROP(propIndex,p1,p2,p3,p4); })
		.def_static("remove_action_mode_asset", [](char* asset) -> void { return PED::REMOVE_ACTION_MODE_ASSET(asset); })
		.def_static("remove_defensive_area", [](Py_Any p0,BOOL p1) -> void { return PED::REMOVE_PED_DEFENSIVE_AREA(p0.id,p1); })
		.def_static("remove_group", [](int groupId) -> void { return PED::REMOVE_GROUP(groupId); })
		.def_static("remove_preferred_cover_set", [](Py_Any p0) -> void { return PED::REMOVE_PED_PREFERRED_COVER_SET(p0.id); })
		.def_static("remove_relationship_group", [](Py_Hash groupHash) -> void { return PED::REMOVE_RELATIONSHIP_GROUP(groupHash.id); })
		.def_static("remove_scenario_blocking_area", [](Py_Any p0,BOOL p1) -> void { return PED::REMOVE_SCENARIO_BLOCKING_AREA(p0.id,p1); })
		.def_static("remove_scenario_blocking_areas", []() -> void { return PED::REMOVE_SCENARIO_BLOCKING_AREAS(); })
		.def_static("remove_stealth_mode_asset", [](char* asset) -> void { return PED::REMOVE_STEALTH_MODE_ASSET(asset); })
		.def_static("request_action_mode_asset", [](char* asset) -> void { return PED::REQUEST_ACTION_MODE_ASSET(asset); })
		.def_static("request_stealth_mode_asset", [](char* asset) -> void { return PED::REQUEST_STEALTH_MODE_ASSET(asset); })
		.def_static("reset_ai_melee_weapon_damage_modifier", []() -> void { return PED::RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(); })
		.def_static("reset_ai_weapon_damage_modifier", []() -> void { return PED::RESET_AI_WEAPON_DAMAGE_MODIFIER(); })
		.def_static("reset_group_formation_default_spacing", [](int groupHandle) -> void { return PED::RESET_GROUP_FORMATION_DEFAULT_SPACING(groupHandle); })
		.def_static("set_ai_melee_weapon_damage_modifier", [](float modifier) -> void { return PED::SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(modifier); })
		.def_static("set_ai_weapon_damage_modifier", [](float value) -> void { return PED::SET_AI_WEAPON_DAMAGE_MODIFIER(value); })
		.def_static("set_angled_defensive_area", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,BOOL p8,BOOL p9) -> void { return PED::SET_PED_ANGLED_DEFENSIVE_AREA(p0.id,p1,p2,p3,p4,p5,p6,p7,p8,p9); })
		.def_static("set_blend_from_parents", [](Py_Any p0,Py_Any p1,Py_Any p2,float p3,float p4) -> void { return PED::SET_PED_BLEND_FROM_PARENTS(p0.id,p1.id,p2.id,p3,p4); })
		.def_static("set_bounds_orientation", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5) -> void { return PED::SET_PED_BOUNDS_ORIENTATION(p0.id,p1,p2,p3,p4,p5); })
		.def_static("set_cower_hash", [](Py_Any p0,char* p1) -> void { return PED::SET_PED_COWER_HASH(p0.id,p1); })
		.def_static("set_create_random_cops", [](BOOL toggle) -> void { return PED::SET_CREATE_RANDOM_COPS(toggle); })
		.def_static("set_create_random_cops_not_on_scenarios", [](BOOL toggle) -> void { return PED::SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(toggle); })
		.def_static("set_create_random_cops_on_scenarios", [](BOOL toggle) -> void { return PED::SET_CREATE_RANDOM_COPS_ON_SCENARIOS(toggle); })
		.def_static("set_defensive_area_direction", [](Py_Any p0,float p1,float p2,float p3,BOOL p4) -> void { return PED::SET_PED_DEFENSIVE_AREA_DIRECTION(p0.id,p1,p2,p3,p4); })
		.def_static("set_density_multiplier_this_frame", [](float multiplier) -> void { return PED::SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(multiplier); })
		.def_static("set_exclusive_phone_relationships", [](Py_Any p0) -> Py_Any { return PED::SET_EXCLUSIVE_PHONE_RELATIONSHIPS(p0.id); })
		.def_static("set_group_formation", [](int groupId,int formationType) -> void { return PED::SET_GROUP_FORMATION(groupId,formationType); })
		.def_static("set_group_formation_spacing", [](int groupId,float p1,float p2,float p3) -> void { return PED::SET_GROUP_FORMATION_SPACING(groupId,p1,p2,p3); })
		.def_static("set_group_separation_range", [](int groupHandle,float separationRange) -> void { return PED::SET_GROUP_SEPARATION_RANGE(groupHandle,separationRange); })
		.def_static("set_non_creation_area", [](float x1,float y1,float z1,float x2,float y2,float z2) -> void { return PED::SET_PED_NON_CREATION_AREA(x1,y1,z1,x2,y2,z2); })
		.def_static("set_preferred_cover_set", [](Py_Any p0,Py_Any p1) -> void { return PED::SET_PED_PREFERRED_COVER_SET(p0.id,p1.id); })
		.def_static("set_relationship_between_groups", [](int relationship,Py_Hash group1,Py_Hash group2) -> void { return PED::SET_RELATIONSHIP_BETWEEN_GROUPS(relationship,group1.id,group2.id); })
		.def_static("set_scenario_density_multiplier_this_frame", [](float p0,float p1) -> void { return PED::SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(p0,p1); })
		.def_static("set_scenario_peds_spawn_in_sphere_area", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return PED::SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(p0.id,p1.id,p2.id,p3.id,p4.id); })
		.def_static("set_scenario_peds_to_be_returned_by_next_command", [](BOOL value) -> void { return PED::SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(value); })
		.def_static("set_scripted_anim_seat_offset", [](Py_Any p0,float p1) -> void { return PED::SET_SCRIPTED_ANIM_SEAT_OFFSET(p0.id,p1); })
		.def_static("set_scripted_conversion_coord_this_frame", [](float x,float y,float z) -> void { return PED::SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(x,y,z); })
		.def_static("set_synchronized_scene_looped", [](Py_Any p0,BOOL p1) -> void { return PED::SET_SYNCHRONIZED_SCENE_LOOPED(p0.id,p1); })
		.def_static("set_synchronized_scene_origin", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5,float p6,Py_Any p7) -> void { return PED::SET_SYNCHRONIZED_SCENE_ORIGIN(p0.id,p1,p2,p3,p4,p5,p6,p7.id); })
		.def_static("set_synchronized_scene_phase", [](Py_Any p0,float p1) -> void { return PED::SET_SYNCHRONIZED_SCENE_PHASE(p0.id,p1); })
		.def_static("set_synchronized_scene_rate", [](Py_Any p0,float p1) -> void { return PED::SET_SYNCHRONIZED_SCENE_RATE(p0.id,p1); })
		.def_static("set_time_exclusive_display_texture", [](Py_Any p0,BOOL p1) -> void { return PED::SET_TIME_EXCLUSIVE_DISPLAY_TEXTURE(p0.id,p1); })
		.def_static("set_to_ragdoll_with_fall", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6,Py_Any p7,Py_Any p8,Py_Any p9,Py_Any p10,Py_Any p11,Py_Any p12,Py_Any p13) -> Py_Any { return PED::SET_PED_TO_RAGDOLL_WITH_FALL(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id,p6.id,p7.id,p8.id,p9.id,p10.id,p11.id,p12.id,p13.id); })
		.def_static("stop_any_model_being_suppressed", []() -> void { return PED::STOP_ANY_PED_MODEL_BEING_SUPPRESSED(); })
		.def_static("stop_weapon_firing_when_dropped", [](Py_Any p0) -> void { return PED::STOP_PED_WEAPON_FIRING_WHEN_DROPPED(p0.id); })
;
	custom(py_Ped);
	py::class_<Py_Vehicle> py_Vehicle(m, "Vehicle",py_Entity);
	py_Vehicle.def("__bool__", [](Py_Vehicle t){return (BOOL)t.id;});
	py_Vehicle
		.def_property_readonly("acceleration", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_ACCELERATION(vehicle.id); })
		.def_property_readonly("are_all_windows_intact", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_ARE_ALL_VEHICLE_WINDOWS_INTACT(vehicle.id); })
		.def_property_readonly("attached_to_cargobob", [](Py_Vehicle cargobob) -> Py_Vehicle { return VEHICLE::GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob.id); })
		.def_property("boat_anchor", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_GET_BOAT_ANCHOR(vehicle.id); }, [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_BOAT_ANCHOR(vehicle.id,toggle); })
		.def_property("body_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_BODY_HEALTH(vehicle.id); }, [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::SET_VEHICLE_BODY_HEALTH(vehicle.id,value); })
		.def_property_readonly("cause_of_destruction", [](Py_Vehicle vehicle) -> Py_Hash { return VEHICLE::GET_VEHICLE_CAUSE_OF_DESTRUCTION(vehicle.id); })
		.def_property_readonly("class", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_CLASS(vehicle.id); })
		.def_property("colour_combination", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_COLOUR_COMBINATION(vehicle.id); }, [](Py_Vehicle vehicle,int numCombos) -> void { return VEHICLE::SET_VEHICLE_COLOUR_COMBINATION(vehicle.id,numCombos); })
		.def_property_readonly("convertible_roof_state", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_CONVERTIBLE_ROOF_STATE(vehicle.id); })
		.def_property("dirt_level", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_DIRT_LEVEL(vehicle.id); }, [](Py_Vehicle vehicle,float dirtLevel) -> void { return VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehicle.id,dirtLevel); })
		.def_property_readonly("door_lock_status", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_DOOR_LOCK_STATUS(vehicle.id); })
		.def_property("engine_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_ENGINE_HEALTH(vehicle.id); }, [](Py_Vehicle vehicle,float health) -> void { return VEHICLE::SET_VEHICLE_ENGINE_HEALTH(vehicle.id,health); })
		.def_property_readonly("entity_attached_to_tow_truck", [](Py_Vehicle towTruck) -> Py_Entity { return VEHICLE::GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck.id); })
		.def_property_readonly("heli_engine_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_HELI_ENGINE_HEALTH(vehicle.id); })
		.def_property_readonly("heli_main_rotor_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_HELI_MAIN_ROTOR_HEALTH(vehicle.id); })
		.def_property_readonly("heli_tail_rotor_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_HELI_TAIL_ROTOR_HEALTH(vehicle.id); })
		.def_property_readonly("is_alarm_activated", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ALARM_ACTIVATED(vehicle.id); })
		.def_property_readonly("is_any_seat_empty", [](Py_Vehicle veh) -> BOOL { return VEHICLE::_IS_ANY_VEHICLE_SEAT_EMPTY(veh.id); })
		.def_property_readonly("is_attached_to_trailer", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ATTACHED_TO_TRAILER(vehicle.id); })
		.def_property_readonly("is_big_vehicle", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_BIG_VEHICLE(vehicle.id); })
		.def_property_readonly("is_cargobob_hook_active", [](Py_Vehicle cargobob) -> BOOL { return VEHICLE::_IS_CARGOBOB_HOOK_ACTIVE(cargobob.id); })
		.def_property_readonly("is_cargobob_magnet_active", [](Py_Vehicle cargobob) -> BOOL { return VEHICLE::_IS_CARGOBOB_MAGNET_ACTIVE(cargobob.id); })
		.def_property_readonly("is_damaged", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_VEHICLE_DAMAGED(vehicle.id); })
		.def_property_readonly("is_engine_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_VEHICLE_ENGINE_ON(vehicle.id); })
		.def_property_readonly("is_headlight_l_broken", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_HEADLIGHT_L_BROKEN(vehicle.id); })
		.def_property_readonly("is_headlight_r_broken", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_HEADLIGHT_R_BROKEN(vehicle.id); })
		.def_property_readonly("is_in_burnout", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_IN_BURNOUT(vehicle.id); })
		.def_property_readonly("is_on_all_wheels", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(vehicle.id); })
		.def_property_readonly("is_primary_colour_custom", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(vehicle.id); })
		.def_property_readonly("is_searchlight_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_SEARCHLIGHT_ON(vehicle.id); })
		.def_property_readonly("is_secondary_colour_custom", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(vehicle.id); })
		.def_property_readonly("is_siren_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_SIREN_ON(vehicle.id); })
		.def_property("is_stolen", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STOLEN(vehicle.id); }, [](Py_Vehicle vehicle,BOOL isStolen) -> void { return VEHICLE::SET_VEHICLE_IS_STOLEN(vehicle.id,isStolen); })
		.def_property_readonly("is_stopped", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STOPPED(vehicle.id); })
		.def_property_readonly("is_stopped_at_traffic_lights", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(vehicle.id); })
		.def_property_readonly("is_stuck_on_roof", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STUCK_ON_ROOF(vehicle.id); })
		.def_property_readonly("is_taxi_light_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_TAXI_LIGHT_ON(vehicle.id); })
		.def_property_readonly("is_visible", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_VISIBLE(vehicle.id); })
		.def_property("landing_gear", [](Py_Vehicle vehicle) -> int { return VEHICLE::_GET_VEHICLE_LANDING_GEAR(vehicle.id); }, [](Py_Vehicle vehicle,int state) -> void { return VEHICLE::_SET_VEHICLE_LANDING_GEAR(vehicle.id,state); })
		.def_property_readonly("layout_hash", [](Py_Vehicle vehicle) -> Py_Hash { return VEHICLE::GET_VEHICLE_LAYOUT_HASH(vehicle.id); })
		.def_property("livery", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_LIVERY(vehicle.id); }, [](Py_Vehicle vehicle,int livery) -> void { return VEHICLE::SET_VEHICLE_LIVERY(vehicle.id,livery); })
		.def_property_readonly("livery_count", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_LIVERY_COUNT(vehicle.id); })
		.def_property_readonly("max_braking", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_MAX_BRAKING(vehicle.id); })
		.def_property_readonly("max_number_of_passengers", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle.id); })
		.def_property_readonly("max_traction", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_MAX_TRACTION(vehicle.id); })
		.def_property("mod_kit", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_MOD_KIT(vehicle.id); }, [](Py_Vehicle vehicle,int modKit) -> void { return VEHICLE::SET_VEHICLE_MOD_KIT(vehicle.id,modKit); })
		.def_property_readonly("mod_kit_type", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_MOD_KIT_TYPE(vehicle.id); })
		.def_property_readonly("num_mod_kits", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_NUM_MOD_KITS(vehicle.id); })
		.def_property_readonly("number_of_colours", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_NUMBER_OF_VEHICLE_COLOURS(vehicle.id); })
		.def_property_readonly("number_of_passengers", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_NUMBER_OF_PASSENGERS(vehicle.id); })
		.def_property("number_plate_text", [](Py_Vehicle vehicle) -> char* { return VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT(vehicle.id); }, [](Py_Vehicle vehicle,char* plateText) -> void { return VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle.id,plateText); })
		.def_property("number_plate_text_index", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle.id); }, [](Py_Vehicle vehicle,int plateIndex) -> void { return VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle.id,plateIndex); })
		.def_property("paint_fade", [](Py_Vehicle veh) -> float { return VEHICLE::_GET_VEHICLE_PAINT_FADE(veh.id); }, [](Py_Vehicle veh,float fade) -> void { return VEHICLE::_SET_VEHICLE_PAINT_FADE(veh.id,fade); })
		.def_property("petrol_tank_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_PETROL_TANK_HEALTH(vehicle.id); }, [](Py_Vehicle vehicle,float health) -> void { return VEHICLE::SET_VEHICLE_PETROL_TANK_HEALTH(vehicle.id,health); })
		.def_property_readonly("plate_type", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_PLATE_TYPE(vehicle.id); })
		.def_property_readonly("speed", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_VEHICLE_SPEED(vehicle.id); })
		.def_property_readonly("suspension_height", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_VEHICLE_SUSPENSION_HEIGHT(vehicle.id); })
		.def_property("tyres_can_burst", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::GET_VEHICLE_TYRES_CAN_BURST(vehicle.id); }, [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(vehicle.id,toggle); })
		.def_property("wheel_type", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_WHEEL_TYPE(vehicle.id); }, [](Py_Vehicle vehicle,int WheelType) -> void { return VEHICLE::SET_VEHICLE_WHEEL_TYPE(vehicle.id,WheelType); })
		.def_property("window_tint", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_WINDOW_TINT(vehicle.id); }, [](Py_Vehicle vehicle,int tint) -> void { return VEHICLE::SET_VEHICLE_WINDOW_TINT(vehicle.id,tint); })
		.def("set_alarm", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_ALARM(vehicle.id,state); })
		.def("set_allow_no_passengers_lockon", [](Py_Vehicle veh,BOOL p1) -> void { return VEHICLE::SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh.id,p1); })
		.def("set_brake_lights", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_BRAKE_LIGHTS(vehicle.id,Toggle); })
		.def("set_burnout", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_BURNOUT(vehicle.id,toggle); })
		.def("set_can_be_targetted", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_CAN_BE_TARGETTED(vehicle.id,state); })
		.def("set_can_be_visibly_damaged", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(vehicle.id,state); })
		.def("set_can_break", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_CAN_BREAK(vehicle.id,Toggle); })
		.def("set_can_respray_vehicle", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_CAN_RESPRAY_VEHICLE(vehicle.id,state); })
		.def("set_ceiling_height", [](Py_Vehicle vehicle,float p1) -> void { return VEHICLE::SET_VEHICLE_CEILING_HEIGHT(vehicle.id,p1); })
		.def("set_convertible_roof", [](Py_Vehicle vehicle,BOOL p1) -> void { return VEHICLE::SET_CONVERTIBLE_ROOF(vehicle.id,p1); })
		.def("set_disable_petrol_tank_damage", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(vehicle.id,toggle); })
		.def("set_disable_petrol_tank_fires", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(vehicle.id,toggle); })
		.def("set_doors_locked", [](Py_Vehicle vehicle,int doorLockStatus) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehicle.id,doorLockStatus); })
		.def("set_doors_locked_for_all_players", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(vehicle.id,toggle); })
		.def("set_doors_shut", [](Py_Vehicle vehicle,BOOL closeInstantly) -> void { return VEHICLE::SET_VEHICLE_DOORS_SHUT(vehicle.id,closeInstantly); })
		.def("set_engine_can_degrade", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle.id,toggle); })
		.def("set_engine_power_multiplier", [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::_SET_VEHICLE_ENGINE_POWER_MULTIPLIER(vehicle.id,value); })
		.def("set_engine_torque_multiplier", [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER(vehicle.id,value); })
		.def("set_explodes_on_high_explosion_damage", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(vehicle.id,toggle); })
		.def("set_forward_speed", [](Py_Vehicle vehicle,float speed) -> void { return VEHICLE::SET_VEHICLE_FORWARD_SPEED(vehicle.id,speed); })
		.def("set_friction_override", [](Py_Vehicle vehicle,float friction) -> void { return VEHICLE::SET_VEHICLE_FRICTION_OVERRIDE(vehicle.id,friction); })
		.def("set_fullbeam", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_FULLBEAM(vehicle.id,toggle); })
		.def("set_gravity", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_GRAVITY(vehicle.id,Toggle); })
		.def("set_handbrake", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_HANDBRAKE(vehicle.id,Toggle); })
		.def("set_has_been_owned_by_player", [](Py_Vehicle vehicle,BOOL owned) -> void { return VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle.id,owned); })
		.def("set_has_strong_axles", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_HAS_STRONG_AXLES(vehicle.id,toggle); })
		.def("set_heli_blades_speed", [](Py_Vehicle vehicle,float speed) -> void { return VEHICLE::SET_HELI_BLADES_SPEED(vehicle.id,speed); })
		.def("set_helicopter_roll_pitch_yaw_mult", [](Py_Vehicle helicopter,float multiplier) -> void { return VEHICLE::_SET_HELICOPTER_ROLL_PITCH_YAW_MULT(helicopter.id,multiplier); })
		.def("set_interiorlight", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_INTERIORLIGHT(vehicle.id,toggle); })
		.def("set_is_considered_by_player", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(vehicle.id,toggle); })
		.def("set_is_wanted", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_IS_WANTED(vehicle.id,state); })
		.def("set_light_multiplier", [](Py_Vehicle vehicle,float multiplier) -> void { return VEHICLE::SET_VEHICLE_LIGHT_MULTIPLIER(vehicle.id,multiplier); })
		.def("set_lights", [](Py_Vehicle vehicle,int p1) -> void { return VEHICLE::SET_VEHICLE_LIGHTS(vehicle.id,p1); })
		.def("set_lod_multiplier", [](Py_Vehicle vehicle,float multiplier) -> void { return VEHICLE::SET_VEHICLE_LOD_MULTIPLIER(vehicle.id,multiplier); })
		.def("set_name_debug", [](Py_Vehicle vehicle,char* name) -> void { return VEHICLE::SET_VEHICLE_NAME_DEBUG(vehicle.id,name); })
		.def("set_needs_to_be_hotwired", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle.id,toggle); })
		.def("set_ped_enabled_bike_ringtone", [](Py_Vehicle vehicle,int ringtone) -> BOOL { return VEHICLE::SET_PED_ENABLED_BIKE_RINGTONE(vehicle.id,ringtone); })
		.def("set_provides_cover", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_PROVIDES_COVER(vehicle.id,toggle); })
		.def("set_reduce_grip", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_REDUCE_GRIP(vehicle.id,toggle); })
		.def("set_render_train_as_derailed", [](Py_Vehicle train,BOOL toggle) -> void { return VEHICLE::SET_RENDER_TRAIN_AS_DERAILED(train.id,toggle); })
		.def("set_rudder_broken", [](Py_Vehicle p0,BOOL p1) -> void { return VEHICLE::SET_VEHICLE_RUDDER_BROKEN(p0.id,p1); })
		.def("set_siren", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_SIREN(vehicle.id,toggle); })
		.def("set_steer_bias", [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::SET_VEHICLE_STEER_BIAS(vehicle.id,value); })
		.def("set_strong", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_STRONG(vehicle.id,toggle); })
		.def("set_taxi_lights", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_TAXI_LIGHTS(vehicle.id,state); })
		.def("set_tow_truck_crane_raised", [](Py_Vehicle towTruck,float state) -> void { return VEHICLE::_SET_TOW_TRUCK_CRANE_RAISED(towTruck.id,state); })
		.def("set_train_cruise_speed", [](Py_Vehicle train,float speed) -> void { return VEHICLE::SET_TRAIN_CRUISE_SPEED(train.id,speed); })
		.def("set_train_speed", [](Py_Vehicle train,float speed) -> void { return VEHICLE::SET_TRAIN_SPEED(train.id,speed); })
		.def("set_tyre_fixed", [](Py_Vehicle vehicle,int tyreIndex) -> void { return VEHICLE::SET_VEHICLE_TYRE_FIXED(vehicle.id,tyreIndex); })
		.def("set_undriveable", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_UNDRIVEABLE(vehicle.id,toggle); })
		.def("set_wheels_can_break", [](Py_Vehicle vehicle,BOOL enabled) -> void { return VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(vehicle.id,enabled); })
		.def("add_upsidedown_check", [](Py_Vehicle vehicle) -> void { return VEHICLE::ADD_VEHICLE_UPSIDEDOWN_CHECK(vehicle.id); })
		.def("attach_to_cargobob", [](Py_Vehicle vehicle,Py_Vehicle cargobob,int p2,float x,float y,float z) -> void { return VEHICLE::ATTACH_VEHICLE_TO_CARGOBOB(vehicle.id,cargobob.id,p2,x,y,z); })
		.def("attach_to_tow_truck", [](Py_Vehicle towTruck,Py_Vehicle vehicle,BOOL rear,float hookOffsetX,float hookOffsetY,float hookOffsetZ) -> void { return VEHICLE::ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck.id,vehicle.id,rear,hookOffsetX,hookOffsetY,hookOffsetZ); })
		.def("attach_to_trailer", [](Py_Vehicle vehicle,Py_Vehicle trailer,float radius) -> void { return VEHICLE::ATTACH_VEHICLE_TO_TRAILER(vehicle.id,trailer.id,radius); })
		.def("can_shuffle_seat", [](Py_Vehicle vehicle,Py_Any p1) -> BOOL { return VEHICLE::CAN_SHUFFLE_SEAT(vehicle.id,p1.id); })
		.def("cargobob_magnet_grab_vehicle", [](Py_Vehicle cargobob,BOOL Grab) -> void { return VEHICLE::_CARGOBOB_MAGNET_GRAB_VEHICLE(cargobob.id,Grab); })
		.def("clear_custom_primary_colour", [](Py_Vehicle vehicle) -> void { return VEHICLE::CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle.id); })
		.def("clear_custom_secondary_colour", [](Py_Vehicle vehicle) -> void { return VEHICLE::CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle.id); })
		.def("detach_from_any_cargobob", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DETACH_VEHICLE_FROM_ANY_CARGOBOB(vehicle.id); })
		.def("detach_from_any_tow_truck", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(vehicle.id); })
		.def("detach_from_cargobob", [](Py_Vehicle vehicle,Py_Vehicle cargobob) -> void { return VEHICLE::DETACH_VEHICLE_FROM_CARGOBOB(vehicle.id,cargobob.id); })
		.def("detach_from_tow_truck", [](Py_Vehicle towTruck,Py_Vehicle vehicle) -> void { return VEHICLE::DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck.id,vehicle.id); })
		.def("detach_from_trailer", [](Py_Vehicle vehicle) -> void { return VEHICLE::DETACH_VEHICLE_FROM_TRAILER(vehicle.id); })
		.def("detach_windscreen", [](Py_Vehicle vehicleHandle) -> void { return VEHICLE::_DETACH_VEHICLE_WINDSCREEN(vehicleHandle.id); })
		.def("disable_impact_explosion_activation", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION(vehicle.id,toggle); })
		.def("does_extra_exist", [](Py_Vehicle vehicle,int extraId) -> BOOL { return VEHICLE::DOES_EXTRA_EXIST(vehicle.id,extraId); })
		.def("does_have_roof", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DOES_VEHICLE_HAVE_ROOF(vehicle.id); })
		.def("does_have_weapons", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DOES_VEHICLE_HAVE_WEAPONS(vehicle.id); })
		.def("eject_jb700_roof", [](Py_Vehicle vehicle,float x,float y,float z) -> void { return VEHICLE::_EJECT_JB700_ROOF(vehicle.id,x,y,z); })
		.def("enable_cargobob_hook", [](Py_Vehicle cargobob,int state) -> void { return VEHICLE::_ENABLE_CARGOBOB_HOOK(cargobob.id,state); })
		.def("explode_in_cutscene", [](Py_Vehicle p0,BOOL p1) -> void { return VEHICLE::EXPLODE_VEHICLE_IN_CUTSCENE(p0.id,p1); })
		.def("explode_vehicle", [](Py_Vehicle vehicle,BOOL isAudible,BOOL isInvisible) -> void { return VEHICLE::EXPLODE_VEHICLE(vehicle.id,isAudible,isInvisible); })
		.def("fix_window", [](Py_Vehicle vehicle,int index) -> void { return VEHICLE::FIX_VEHICLE_WINDOW(vehicle.id,index); })
		.def("get_deformation_at_pos", [](Py_Vehicle vehicle,float position1,float position2,float position3) -> Vector3 { return VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(vehicle.id,position1,position2,position3); })
		.def("get_door_angle_ratio", [](Py_Vehicle vehicle,int door) -> float { return VEHICLE::GET_VEHICLE_DOOR_ANGLE_RATIO(vehicle.id,door); })
		.def("get_doors_locked_for_player", [](Py_Vehicle vehicle,Py_Player player) -> BOOL { return VEHICLE::GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle.id,player.id); })
		.def("get_last_ped_in_seat", [](Py_Vehicle vehicle,int seatIndex) -> Py_Ped { return VEHICLE::GET_LAST_PED_IN_VEHICLE_SEAT(vehicle.id,seatIndex); })
		.def("get_livery_name", [](Py_Vehicle vehicle,int liveryIndex) -> char* { return VEHICLE::GET_LIVERY_NAME(vehicle.id,liveryIndex); })
		.def("get_mod", [](Py_Vehicle vehicle,int modType) -> int { return VEHICLE::GET_VEHICLE_MOD(vehicle.id,modType); })
		.def("get_mod_modifier_value", [](Py_Vehicle vehicle,int modType,int modIndex) -> Py_Any { return VEHICLE::GET_VEHICLE_MOD_MODIFIER_VALUE(vehicle.id,modType,modIndex); })
		.def("get_mod_slot_name", [](Py_Vehicle vehicle,int modType) -> char* { return VEHICLE::GET_MOD_SLOT_NAME(vehicle.id,modType); })
		.def("get_mod_text_label", [](Py_Vehicle vehicle,int modType,int modValue) -> char* { return VEHICLE::GET_MOD_TEXT_LABEL(vehicle.id,modType,modValue); })
		.def("get_mod_variation", [](Py_Vehicle vehicle,int modType) -> BOOL { return VEHICLE::GET_VEHICLE_MOD_VARIATION(vehicle.id,modType); })
		.def("get_num_mods", [](Py_Vehicle vehicle,int modType) -> int { return VEHICLE::GET_NUM_VEHICLE_MODS(vehicle.id,modType); })
		.def("get_ped_in_seat", [](Py_Vehicle vehicle,int index) -> Py_Ped { return VEHICLE::GET_PED_IN_VEHICLE_SEAT(vehicle.id,index); })
		.def("get_ped_using_door", [](Py_Vehicle vehicle,int doorIndex) -> Py_Ped { return VEHICLE::_GET_PED_USING_VEHICLE_DOOR(vehicle.id,doorIndex); })
		.def("get_train_carriage", [](Py_Vehicle train,int carriage) -> Py_Entity { return VEHICLE::GET_TRAIN_CARRIAGE(train.id,carriage); })
		.def("is_a_convertible", [](Py_Vehicle vehicle,BOOL p1) -> BOOL { return VEHICLE::IS_VEHICLE_A_CONVERTIBLE(vehicle.id,p1); })
		.def("is_attached_to_cargobob", [](Py_Vehicle vehicle,Py_Vehicle cargobob) -> BOOL { return VEHICLE::IS_VEHICLE_ATTACHED_TO_CARGOBOB(vehicle.id,cargobob.id); })
		.def("is_attached_to_tow_truck", [](Py_Vehicle towTruck,Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck.id,vehicle.id); })
		.def("is_bumper_broken_off", [](Py_Vehicle vehicle,BOOL p1) -> BOOL { return VEHICLE::IS_VEHICLE_BUMPER_BROKEN_OFF(vehicle.id,p1); })
		.def("is_door_damaged", [](Py_Vehicle veh,int doorID) -> BOOL { return VEHICLE::IS_VEHICLE_DOOR_DAMAGED(veh.id,doorID); })
		.def("is_door_fully_open", [](Py_Vehicle vehicle,int doorIndex) -> BOOL { return VEHICLE::IS_VEHICLE_DOOR_FULLY_OPEN(vehicle.id,doorIndex); })
		.def("is_driveable", [](Py_Vehicle vehicle,BOOL p1) -> BOOL { return VEHICLE::IS_VEHICLE_DRIVEABLE(vehicle.id,p1); })
		.def("is_extra_turned_on", [](Py_Vehicle vehicle,int extraId) -> BOOL { return VEHICLE::IS_VEHICLE_EXTRA_TURNED_ON(vehicle.id,extraId); })
		.def("is_model", [](Py_Vehicle vehicle,Py_Hash hash) -> BOOL { return VEHICLE::IS_VEHICLE_MODEL(vehicle.id,hash.id); })
		.def("is_neon_light_enabled", [](Py_Vehicle vehicle,int index) -> BOOL { return VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(vehicle.id,index); })
		.def("is_seat_free", [](Py_Vehicle vehicle,int seatIndex) -> BOOL { return VEHICLE::IS_VEHICLE_SEAT_FREE(vehicle.id,seatIndex); })
		.def("is_stuck_timer_up", [](Py_Vehicle vehicle,int p1,int p2) -> BOOL { return VEHICLE::IS_VEHICLE_STUCK_TIMER_UP(vehicle.id,p1,p2); })
		.def("is_toggle_mod_on", [](Py_Vehicle vehicle,int modType) -> BOOL { return VEHICLE::IS_TOGGLE_MOD_ON(vehicle.id,modType); })
		.def("is_tyre_burst", [](Py_Vehicle vehicle,int wheelID,BOOL completely) -> BOOL { return VEHICLE::IS_VEHICLE_TYRE_BURST(vehicle.id,wheelID,completely); })
		.def("is_window_intact", [](Py_Vehicle vehicle,int windowIndex) -> BOOL { return VEHICLE::IS_VEHICLE_WINDOW_INTACT(vehicle.id,windowIndex); })
		.def("jitter_vehicle", [](Py_Vehicle vehicle,BOOL p1,float yaw,float pitch,float roll) -> void { return VEHICLE::_JITTER_VEHICLE(vehicle.id,p1,yaw,pitch,roll); })
		.def("lower_convertible_roof", [](Py_Vehicle vehicle,BOOL instantlyLower) -> void { return VEHICLE::LOWER_CONVERTIBLE_ROOF(vehicle.id,instantlyLower); })
		.def("raise_convertible_roof", [](Py_Vehicle vehicle,BOOL instantlyRaise) -> void { return VEHICLE::RAISE_CONVERTIBLE_ROOF(vehicle.id,instantlyRaise); })
		.def("remove_mod", [](Py_Vehicle vehicle,int modType) -> void { return VEHICLE::REMOVE_VEHICLE_MOD(vehicle.id,modType); })
		.def("remove_upsidedown_check", [](Py_Vehicle vehicle) -> void { return VEHICLE::REMOVE_VEHICLE_UPSIDEDOWN_CHECK(vehicle.id); })
		.def("remove_window", [](Py_Vehicle vehicle,int windowIndex) -> void { return VEHICLE::REMOVE_VEHICLE_WINDOW(vehicle.id,windowIndex); })
		.def("reset_stuck_timer", [](Py_Vehicle vehicle,BOOL nullAttributes) -> void { return VEHICLE::RESET_VEHICLE_STUCK_TIMER(vehicle.id,nullAttributes); })
		.def("retract_cargobob_hook", [](Py_Vehicle cargobob) -> void { return VEHICLE::_RETRACT_CARGOBOB_HOOK(cargobob.id); })
		.def("roll_down_window", [](Py_Vehicle vehicle,int windowIndex) -> void { return VEHICLE::ROLL_DOWN_WINDOW(vehicle.id,windowIndex); })
		.def("roll_down_windows", [](Py_Vehicle vehicle) -> void { return VEHICLE::ROLL_DOWN_WINDOWS(vehicle.id); })
		.def("roll_up_window", [](Py_Vehicle vehicle,int windowIndex) -> void { return VEHICLE::ROLL_UP_WINDOW(vehicle.id,windowIndex); })
		.def("set_all_vehicles_spawn", [](Py_Vehicle p0,BOOL p1,BOOL p2,BOOL p3) -> Py_Any { return VEHICLE::SET_ALL_VEHICLES_SPAWN(p0.id,p1,p2,p3); })
		.def("set_automatically_attaches", [](Py_Vehicle vehicle,Py_Any p1,Py_Any p2) -> Py_Any { return VEHICLE::SET_VEHICLE_AUTOMATICALLY_ATTACHES(vehicle.id,p1.id,p2.id); })
		.def("set_bike_lean_angle", [](Py_Vehicle vehicle,float x,float y) -> void { return VEHICLE::_SET_BIKE_LEAN_ANGLE(vehicle.id,x,y); })
		.def("set_colours", [](Py_Vehicle vehicle,int colorPrimary,int colorSecondary) -> void { return VEHICLE::SET_VEHICLE_COLOURS(vehicle.id,colorPrimary,colorSecondary); })
		.def("set_custom_primary_colour", [](Py_Vehicle vehicle,int r,int g,int b) -> void { return VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle.id,r,g,b); })
		.def("set_custom_secondary_colour", [](Py_Vehicle vehicle,int r,int g,int b) -> void { return VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle.id,r,g,b); })
		.def("set_damage", [](Py_Vehicle vehicle,float xOffset,float yOffset,float zOffset,float damage,float radius,BOOL p6) -> void { return VEHICLE::SET_VEHICLE_DAMAGE(vehicle.id,xOffset,yOffset,zOffset,damage,radius,p6); })
		.def("set_deformation_fixed", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(vehicle.id); })
		.def("set_door_breakable", [](Py_Vehicle vehicle,int doorIndex,BOOL isBreakable) -> void { return VEHICLE::_SET_VEHICLE_DOOR_BREAKABLE(vehicle.id,doorIndex,isBreakable); })
		.def("set_door_broken", [](Py_Vehicle vehicle,int doorIndex,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOOR_BROKEN(vehicle.id,doorIndex,toggle); })
		.def("set_door_control", [](Py_Vehicle vehicle,int doorIndex,Py_Any p2,float p3) -> void { return VEHICLE::SET_VEHICLE_DOOR_CONTROL(vehicle.id,doorIndex,p2.id,p3); })
		.def("set_door_latched", [](Py_Vehicle vehicle,int doorIndex,BOOL p2,BOOL p3,BOOL p4) -> void { return VEHICLE::SET_VEHICLE_DOOR_LATCHED(vehicle.id,doorIndex,p2,p3,p4); })
		.def("set_door_open", [](Py_Vehicle vehicle,int doorIndex,BOOL loose,BOOL openInstantly) -> void { return VEHICLE::SET_VEHICLE_DOOR_OPEN(vehicle.id,doorIndex,loose,openInstantly); })
		.def("set_door_shut", [](Py_Vehicle vehicle,int doorIndex,BOOL closeInstantly) -> void { return VEHICLE::SET_VEHICLE_DOOR_SHUT(vehicle.id,doorIndex,closeInstantly); })
		.def("set_doors_locked_for_player", [](Py_Vehicle vehicle,Py_Player player,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle.id,player.id,toggle); })
		.def("set_doors_locked_for_team", [](Py_Vehicle vehicle,int team,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(vehicle.id,team,toggle); })
		.def("set_engine_on", [](Py_Vehicle vehicle,BOOL value,BOOL instantly,BOOL unk) -> void { return VEHICLE::SET_VEHICLE_ENGINE_ON(vehicle.id,value,instantly,unk); })
		.def("set_exclusive_driver", [](Py_Vehicle vehicle,Py_Any p1,Py_Any p2) -> void { return VEHICLE::_SET_EXCLUSIVE_DRIVER(vehicle.id,p1.id,p2.id); })
		.def("set_extra", [](Py_Vehicle vehicle,int extraId,int toggle) -> void { return VEHICLE::SET_VEHICLE_EXTRA(vehicle.id,extraId,toggle); })
		.def("set_extra_colours", [](Py_Vehicle vehicle,int pearlescentColor,int wheelColor) -> void { return VEHICLE::SET_VEHICLE_EXTRA_COLOURS(vehicle.id,pearlescentColor,wheelColor); })
		.def("set_fixed", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_VEHICLE_FIXED(vehicle.id); })
		.def("set_heli_blades_full_speed", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehicle.id); })
		.def("set_indicator_lights", [](Py_Vehicle vehicle,int turnSignal,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_INDICATOR_LIGHTS(vehicle.id,turnSignal,toggle); })
		.def("set_mission_train_coords", [](Py_Vehicle train,float x,float y,float z) -> void { return VEHICLE::SET_MISSION_TRAIN_COORDS(train.id,x,y,z); })
		.def("set_mod", [](Py_Vehicle vehicle,int modType,int modIndex,BOOL customTires) -> void { return VEHICLE::SET_VEHICLE_MOD(vehicle.id,modType,modIndex,customTires); })
		.def("set_mod_color_1", [](Py_Vehicle vehicle,int paintType,int color,int p3) -> void { return VEHICLE::SET_VEHICLE_MOD_COLOR_1(vehicle.id,paintType,color,p3); })
		.def("set_mod_color_2", [](Py_Vehicle vehicle,int paintType,int color) -> void { return VEHICLE::SET_VEHICLE_MOD_COLOR_2(vehicle.id,paintType,color); })
		.def("set_neon_light_enabled", [](Py_Vehicle vehicle,int index,BOOL toggle) -> void { return VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(vehicle.id,index,toggle); })
		.def("set_neon_lights_colour", [](Py_Vehicle vehicle,int r,int g,int b) -> void { return VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(vehicle.id,r,g,b); })
		.def("set_on_ground_properly", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(vehicle.id); })
		.def("set_out_of_control", [](Py_Vehicle vehicle,BOOL killDriver,BOOL explodeOnImpact) -> void { return VEHICLE::SET_VEHICLE_OUT_OF_CONTROL(vehicle.id,killDriver,explodeOnImpact); })
		.def("set_ped_targettable_destroy", [](Py_Vehicle vehicle,int vehicleComponent,int destroyType) -> void { return VEHICLE::SET_PED_TARGETTABLE_VEHICLE_DESTROY(vehicle.id,vehicleComponent,destroyType); })
		.def("set_players_last_vehicle", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_PLAYERS_LAST_VEHICLE(vehicle.id); })
		.def("set_searchlight", [](Py_Vehicle vehicle,BOOL duskLight,BOOL p2) -> void { return VEHICLE::SET_VEHICLE_SEARCHLIGHT(vehicle.id,duskLight,p2); })
		.def("set_timed_explosion", [](Py_Vehicle vehicle,Py_Ped ped,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_TIMED_EXPLOSION(vehicle.id,ped.id,toggle); })
		.def("set_tyre_burst", [](Py_Vehicle vehicle,int index,BOOL on_rim,float p3) -> void { return VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle.id,index,on_rim,p3); })
		.def("smash_window", [](Py_Vehicle vehicle,int index) -> void { return VEHICLE::SMASH_VEHICLE_WINDOW(vehicle.id,index); })
		.def("start_alarm", [](Py_Vehicle vehicle) -> void { return VEHICLE::START_VEHICLE_ALARM(vehicle.id); })
		.def("start_horn", [](Py_Vehicle vehicle,int duration,Py_Hash mode,BOOL p3) -> void { return VEHICLE::START_VEHICLE_HORN(vehicle.id,duration,mode.id,p3); })
		.def("steer_unlock_bias", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::STEER_UNLOCK_BIAS(vehicle.id,toggle); })
		.def("task_bring_to_halt", [](Py_Vehicle vehicle,float p1,Py_Any p2,BOOL p3) -> void { return VEHICLE::_TASK_BRING_VEHICLE_TO_HALT(vehicle.id,p1,p2.id,p3); })
		.def("toggle_mod", [](Py_Vehicle vehicle,int modType,BOOL toggle) -> void { return VEHICLE::TOGGLE_VEHICLE_MOD(vehicle.id,modType,toggle); })
		.def("track_visibility", [](Py_Vehicle vehicle) -> void { return VEHICLE::TRACK_VEHICLE_VISIBILITY(vehicle.id); })
		.def_static("add_stuck_check_with_warp", [](Py_Any p0,float p1,Py_Any p2,BOOL p3,BOOL p4,BOOL p5,Py_Any p6) -> void { return VEHICLE::ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0.id,p1,p2.id,p3,p4,p5,p6.id); })
		.def_static("create_mission_train", [](int variation,float x,float y,float z,BOOL direction) -> Py_Vehicle { return VEHICLE::CREATE_MISSION_TRAIN(variation,x,y,z,direction); })
		.def_static("create_script_generator", [](float x,float y,float z,float heading,float p4,float p5,Py_Hash modelHash,int p7,int p8,int p9,int p10,BOOL p11,BOOL p12,BOOL p13,BOOL p14,BOOL p15,int p16) -> Py_Any { return VEHICLE::CREATE_SCRIPT_VEHICLE_GENERATOR(x,y,z,heading,p4,p5,modelHash.id,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16); })
		.def_static("create_vehicle", [](Py_Hash modelHash,float x,float y,float z,float heading,BOOL networkHandle,BOOL vehiclehandle) -> Py_Vehicle { return VEHICLE::CREATE_VEHICLE(modelHash.id,x,y,z,heading,networkHandle,vehiclehandle); })
		.def_static("delete_all_trains", []() -> void { return VEHICLE::DELETE_ALL_TRAINS(); })
		.def_static("delete_script_generator", [](Py_Any vehicleGenerator) -> void { return VEHICLE::DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator.id); })
		.def_static("disable_plane_aileron", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return VEHICLE::DISABLE_PLANE_AILERON(p0.id,p1,p2); })
		.def_static("disable_weapon", [](BOOL disabled,Py_Hash weaponHash,Py_Vehicle vehicle,Py_Ped owner) -> void { return VEHICLE::DISABLE_VEHICLE_WEAPON(disabled,weaponHash.id,vehicle.id,owner.id); })
		.def_static("does_exist_with_decorator", [](char* decorator) -> BOOL { return VEHICLE::DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator); })
		.def_static("does_have_stuck_check", [](Py_Any p0) -> BOOL { return VEHICLE::DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(p0.id); })
		.def_static("does_script_generator_exist", [](Py_Any vehicleGenerator) -> BOOL { return VEHICLE::DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator.id); })
		.def_static("get_body_health_2", [](Py_Any p0) -> float { return VEHICLE::_GET_VEHICLE_BODY_HEALTH_2(p0.id); })
		.def_static("get_class_from_name", [](Py_Hash modelHash) -> int { return VEHICLE::GET_VEHICLE_CLASS_FROM_NAME(modelHash.id); })
		.def_static("get_class_max_acceleration", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_ACCELERATION(p0.id); })
		.def_static("get_class_max_agility", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_AGILITY(p0.id); })
		.def_static("get_class_max_braking", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_BRAKING(p0.id); })
		.def_static("get_class_max_traction", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_TRACTION(p0.id); })
		.def_static("get_closest_vehicle", [](float x,float y,float z,float radius,Py_Hash modelHash,int flags) -> Py_Vehicle { return VEHICLE::GET_CLOSEST_VEHICLE(x,y,z,radius,modelHash.id,flags); })
		.def_static("get_current_playback_for_vehicle", [](Py_Any p0) -> Py_Any { return VEHICLE::GET_CURRENT_PLAYBACK_FOR_VEHICLE(p0.id); })
		.def_static("get_display_name_from_model", [](Py_Hash modelHash) -> char* { return VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash.id); })
		.def_static("get_max_speed", [](Py_Hash modelHash) -> float { return VEHICLE::_GET_VEHICLE_MAX_SPEED(modelHash.id); })
		.def_static("get_model_acceleration", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_MODEL_ACCELERATION(p0.id); })
		.def_static("get_model_max_braking", [](Py_Hash modelHash) -> float { return VEHICLE::GET_VEHICLE_MODEL_MAX_BRAKING(modelHash.id); })
		.def_static("get_model_max_number_of_passengers", [](Py_Hash VehicleModel) -> int { return VEHICLE::_GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS(VehicleModel.id); })
		.def_static("get_model_max_traction", [](Py_Hash modelHash) -> float { return VEHICLE::GET_VEHICLE_MODEL_MAX_TRACTION(modelHash.id); })
		.def_static("get_num_mod_colors", [](Py_Any p0,BOOL p1) -> Py_Any { return VEHICLE::GET_NUM_MOD_COLORS(p0.id,p1); })
		.def_static("get_num_window_tints", []() -> int { return VEHICLE::GET_NUM_VEHICLE_WINDOW_TINTS(); })
		.def_static("get_number_of_number_plates", []() -> Py_Any { return VEHICLE::GET_NUMBER_OF_VEHICLE_NUMBER_PLATES(); })
		.def_static("get_position_in_recording", [](Py_Any p0) -> float { return VEHICLE::GET_POSITION_IN_RECORDING(p0.id); })
		.def_static("get_random_back_bumper_in_sphere", [](float p0,float p1,float p2,float p3,int p4,int p5,int p6) -> Py_Vehicle { return VEHICLE::GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0,p1,p2,p3,p4,p5,p6); })
		.def_static("get_random_front_bumper_in_sphere", [](float p0,float p1,float p2,float p3,int p4,int p5,int p6) -> Py_Vehicle { return VEHICLE::GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0,p1,p2,p3,p4,p5,p6); })
		.def_static("get_random_in_sphere", [](float x,float y,float z,float radius,Py_Hash modelHash,int flags) -> Py_Vehicle { return VEHICLE::GET_RANDOM_VEHICLE_IN_SPHERE(x,y,z,radius,modelHash.id,flags); })
		.def_static("get_time_position_in_recording", [](Py_Any p0) -> float { return VEHICLE::GET_TIME_POSITION_IN_RECORDING(p0.id); })
		.def_static("get_total_duration_of_recording", [](Py_Any p0,Py_Any p1) -> Py_Any { return VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(p0.id,p1.id); })
		.def_static("get_total_duration_of_recording_id", [](Py_Any p0) -> float { return VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(p0.id); })
		.def_static("has_asset_loaded", [](int vehicleAsset) -> BOOL { return VEHICLE::HAS_VEHICLE_ASSET_LOADED(vehicleAsset); })
		.def_static("has_preload_mods_finished", [](Py_Any p0) -> BOOL { return VEHICLE::HAS_PRELOAD_MODS_FINISHED(p0.id); })
		.def_static("is_any_near_point", [](float x,float y,float z,float radius) -> BOOL { return VEHICLE::IS_ANY_VEHICLE_NEAR_POINT(x,y,z,radius); })
		.def_static("is_cop_in_area_3d", [](float x1,float x2,float y1,float y2,float z1,float z2) -> BOOL { return VEHICLE::IS_COP_VEHICLE_IN_AREA_3D(x1,x2,y1,y2,z1,z2); })
		.def_static("is_heli_part_broken", [](Py_Any p0,BOOL p1,BOOL p2,BOOL p3) -> BOOL { return VEHICLE::IS_HELI_PART_BROKEN(p0.id,p1,p2,p3); })
		.def_static("is_high_detail", [](Py_Any p0) -> BOOL { return VEHICLE::IS_VEHICLE_HIGH_DETAIL(p0.id); })
		.def_static("is_in_garage_area", [](char* garageName,Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_IN_GARAGE_AREA(garageName,vehicle.id); })
		.def_static("is_playback_going_on_for_vehicle", [](Py_Any p0) -> BOOL { return VEHICLE::IS_PLAYBACK_GOING_ON_FOR_VEHICLE(p0.id); })
		.def_static("is_playback_using_ai_going_on_for_vehicle", [](Py_Any p0) -> BOOL { return VEHICLE::IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(p0.id); })
		.def_static("is_this_model_a_bicycle", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_BICYCLE(model.id); })
		.def_static("is_this_model_a_bike", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_BIKE(model.id); })
		.def_static("is_this_model_a_boat", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_BOAT(model.id); })
		.def_static("is_this_model_a_car", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_CAR(model.id); })
		.def_static("is_this_model_a_heli", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_HELI(model.id); })
		.def_static("is_this_model_a_plane", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_PLANE(model.id); })
		.def_static("is_this_model_a_quadbike", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_QUADBIKE(model.id); })
		.def_static("is_this_model_a_submersible", [](Py_Hash model) -> BOOL { return VEHICLE::_IS_THIS_MODEL_A_SUBMERSIBLE(model.id); })
		.def_static("is_this_model_a_train", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_TRAIN(model.id); })
		.def_static("open_bomb_bay", [](Py_Any p0) -> void { return VEHICLE::_OPEN_VEHICLE_BOMB_BAY(p0.id); })
		.def_static("pause_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::PAUSE_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("preload_mod", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return VEHICLE::PRELOAD_VEHICLE_MOD(p0.id,p1.id,p2.id); })
		.def_static("release_preload_mods", [](Py_Any p0) -> void { return VEHICLE::RELEASE_PRELOAD_MODS(p0.id); })
		.def_static("remove_asset", [](Py_Any p0) -> void { return VEHICLE::REMOVE_VEHICLE_ASSET(p0.id); })
		.def_static("remove_high_detail_model", [](Py_Any p0) -> void { return VEHICLE::REMOVE_VEHICLE_HIGH_DETAIL_MODEL(p0.id); })
		.def_static("remove_stuck_check", [](Py_Any p0) -> void { return VEHICLE::REMOVE_VEHICLE_STUCK_CHECK(p0.id); })
		.def_static("remove_vehicles_from_generators_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,Py_Any unk) -> void { return VEHICLE::REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1,y1,z1,x2,y2,z2,unk.id); })
		.def_static("request_asset", [](Py_Hash VehicleHash,int vehicleAsset) -> void { return VEHICLE::REQUEST_VEHICLE_ASSET(VehicleHash.id,vehicleAsset); })
		.def_static("request_high_detail_model", [](Py_Any p0) -> void { return VEHICLE::REQUEST_VEHICLE_HIGH_DETAIL_MODEL(p0.id); })
		.def_static("reset_wheels", [](Py_Any p0,BOOL p1) -> void { return VEHICLE::RESET_VEHICLE_WHEELS(p0.id,p1); })
		.def_static("set_all_generators_active", []() -> void { return VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE(); })
		.def_static("set_all_generators_active_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,BOOL p6,BOOL p7) -> void { return VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1,y1,z1,x2,y2,z2,p6,p7); })
		.def_static("set_all_low_priority_generators_active", [](BOOL active) -> void { return VEHICLE::SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active); })
		.def_static("set_density_multiplier_this_frame", [](float multiplier) -> void { return VEHICLE::SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier); })
		.def_static("set_far_draw_vehicles", [](BOOL toggle) -> void { return VEHICLE::SET_FAR_DRAW_VEHICLES(toggle); })
		.def_static("set_garbage_trucks", [](BOOL toggle) -> void { return VEHICLE::SET_GARBAGE_TRUCKS(toggle); })
		.def_static("set_model_is_suppressed", [](Py_Hash model,BOOL suppressed) -> void { return VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(model.id,suppressed); })
		.def_static("set_number_of_parked_vehicles", [](int value) -> void { return VEHICLE::SET_NUMBER_OF_PARKED_VEHICLES(value); })
		.def_static("set_parked_density_multiplier_this_frame", [](float multiplier) -> void { return VEHICLE::SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier); })
		.def_static("set_plane_min_height_above_terrain", [](Py_Any p0,Py_Any p1) -> void { return VEHICLE::_SET_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(p0.id,p1.id); })
		.def_static("set_playback_speed", [](Py_Any p0,float speed) -> void { return VEHICLE::SET_PLAYBACK_SPEED(p0.id,speed); })
		.def_static("set_playback_to_use_ai", [](Py_Any p0,Py_Any p1) -> void { return VEHICLE::SET_PLAYBACK_TO_USE_AI(p0.id,p1.id); })
		.def_static("set_playback_to_use_ai_try_to_revert_back_later", [](Py_Any p0,Py_Any p1,Py_Any p2,BOOL p3) -> void { return VEHICLE::SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(p0.id,p1.id,p2.id,p3); })
		.def_static("set_random_boats", [](BOOL toggle) -> void { return VEHICLE::SET_RANDOM_BOATS(toggle); })
		.def_static("set_random_density_multiplier_this_frame", [](float multiplier) -> void { return VEHICLE::SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier); })
		.def_static("set_random_trains", [](BOOL unk) -> void { return VEHICLE::SET_RANDOM_TRAINS(unk); })
		.def_static("set_script_generator", [](Py_Any vehicleGenerator,BOOL enabled) -> void { return VEHICLE::SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator.id,enabled); })
		.def_static("set_shoot_at_target", [](Py_Ped pilot,Py_Entity ent,float targetx,float targety,float targetz) -> void { return VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot.id,ent.id,targetx,targety,targetz); })
		.def_static("set_wheels_can_break_off_when_blow_up", [](Py_Any p0,BOOL p1) -> void { return VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(p0.id,p1); })
		.def_static("skip_time_in_playback_recorded_vehicle", [](Py_Any p0,float p1) -> void { return VEHICLE::SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(p0.id,p1); })
		.def_static("skip_to_end_and_stop_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("stop_all_garage_activity", []() -> void { return VEHICLE::STOP_ALL_GARAGE_ACTIVITY(); })
		.def_static("stop_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::STOP_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("switch_train_track", [](int intersectionId,BOOL state) -> void { return VEHICLE::SWITCH_TRAIN_TRACK(intersectionId,state); })
		.def_static("unpause_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::UNPAUSE_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("was_counter_activated", [](Py_Any p0,Py_Any p1) -> BOOL { return VEHICLE::WAS_COUNTER_ACTIVATED(p0.id,p1.id); })
;
	custom(py_Vehicle);
	py::class_<Py_Cam> py_Cam(m, "Cam",py_Any);
	py_Cam.def("__bool__", [](Py_Cam t){return (BOOL)t.id;});
	py_Cam
		.def_property("anim_current_phase", [](Py_Cam cam) -> float { return CAM::GET_CAM_ANIM_CURRENT_PHASE(cam.id); }, [](Py_Cam cam,float phase) -> void { return CAM::SET_CAM_ANIM_CURRENT_PHASE(cam.id,phase); })
		.def_property_readonly("coord", [](Py_Cam cam) -> Vector3 { return CAM::GET_CAM_COORD(cam.id); })
		.def_property("far_clip", [](Py_Cam cam) -> float { return CAM::GET_CAM_FAR_CLIP(cam.id); }, [](Py_Cam cam,float farClip) -> void { return CAM::SET_CAM_FAR_CLIP(cam.id,farClip); })
		.def_property("far_dof", [](Py_Cam cam) -> float { return CAM::GET_CAM_FAR_DOF(cam.id); }, [](Py_Cam cam,float farDOF) -> void { return CAM::SET_CAM_FAR_DOF(cam.id,farDOF); })
		.def_property("fov", [](Py_Cam cam) -> float { return CAM::GET_CAM_FOV(cam.id); }, [](Py_Cam cam,float fieldOfView) -> void { return CAM::SET_CAM_FOV(cam.id,fieldOfView); })
		.def_property_readonly("is_active", [](Py_Cam cam) -> BOOL { return CAM::IS_CAM_ACTIVE(cam.id); })
		.def_property_readonly("is_interpolating", [](Py_Cam cam) -> BOOL { return CAM::IS_CAM_INTERPOLATING(cam.id); })
		.def_property_readonly("is_shaking", [](Py_Cam cam) -> BOOL { return CAM::IS_CAM_SHAKING(cam.id); })
		.def_property("near_clip", [](Py_Cam cam) -> float { return CAM::GET_CAM_NEAR_CLIP(cam.id); }, [](Py_Cam cam,float nearClip) -> void { return CAM::SET_CAM_NEAR_CLIP(cam.id,nearClip); })
		.def_property_readonly("spline_node_index", [](Py_Cam cam) -> BOOL { return CAM::GET_CAM_SPLINE_NODE_INDEX(cam.id); })
		.def_property("spline_phase", [](Py_Cam cam) -> float { return CAM::GET_CAM_SPLINE_PHASE(cam.id); }, [](Py_Cam cam,float p1) -> void { return CAM::SET_CAM_SPLINE_PHASE(cam.id,p1); })
		.def("set_active", [](Py_Cam cam,BOOL active) -> void { return CAM::SET_CAM_ACTIVE(cam.id,active); })
		.def("set_affects_aiming", [](Py_Cam cam,BOOL toggle) -> void { return CAM::SET_CAM_AFFECTS_AIMING(cam.id,toggle); })
		.def("set_debug_name", [](Py_Cam camera,char* name) -> void { return CAM::SET_CAM_DEBUG_NAME(camera.id,name); })
		.def("set_dof_strength", [](Py_Cam cam,float dofStrength) -> void { return CAM::SET_CAM_DOF_STRENGTH(cam.id,dofStrength); })
		.def("set_inherit_roll_vehicle", [](Py_Cam cam,Py_Any p1) -> void { return CAM::SET_CAM_INHERIT_ROLL_VEHICLE(cam.id,p1.id); })
		.def("set_motion_blur_strength", [](Py_Cam cam,float blur) -> void { return CAM::SET_CAM_MOTION_BLUR_STRENGTH(cam.id,blur); })
		.def("set_near_dof", [](Py_Cam cam,float nearDOF) -> void { return CAM::SET_CAM_NEAR_DOF(cam.id,nearDOF); })
		.def("set_shake_amplitude", [](Py_Cam cam,float amplitude) -> void { return CAM::SET_CAM_SHAKE_AMPLITUDE(cam.id,amplitude); })
		.def("set_spline_duration", [](Py_Cam cam,int timeDuration) -> void { return CAM::SET_CAM_SPLINE_DURATION(cam.id,timeDuration); })
		.def("set_use_shallow_dof_mode", [](Py_Cam cam,BOOL toggle) -> void { return CAM::SET_CAM_USE_SHALLOW_DOF_MODE(cam.id,toggle); })
		.def("animated_shake_cam", [](Py_Cam cam,char* p1,char* p2,char* p3,float amplitude) -> void { return CAM::ANIMATED_SHAKE_CAM(cam.id,p1,p2,p3,amplitude); })
		.def("attach_to_entity", [](Py_Cam cam,Py_Entity entity,float xOffset,float yOffset,float zOffset,BOOL p5) -> void { return CAM::ATTACH_CAM_TO_ENTITY(cam.id,entity.id,xOffset,yOffset,zOffset,p5); })
		.def("attach_to_ped_bone", [](Py_Cam cam,Py_Ped ped,int boneIndex,float x,float y,float z,BOOL heading) -> void { return CAM::ATTACH_CAM_TO_PED_BONE(cam.id,ped.id,boneIndex,x,y,z,heading); })
		.def("destroy_cam", [](Py_Cam cam,BOOL destroy) -> void { return CAM::DESTROY_CAM(cam.id,destroy); })
		.def("does_exist", [](Py_Cam cam) -> BOOL { return CAM::DOES_CAM_EXIST(cam.id); })
		.def("get_rot", [](Py_Cam cam,Py_Any p1) -> Vector3 { return CAM::GET_CAM_ROT(cam.id,p1.id); })
		.def("override_spline_velocity", [](Py_Cam cam,int p1,float p2,float p3) -> void { return CAM::OVERRIDE_CAM_SPLINE_VELOCITY(cam.id,p1,p2,p3); })
		.def("play_anim", [](Py_Cam cam,char* animName,char* animDictionary,float x,float y,float z,float xRot,float yRot,float zRot,BOOL p9,int p10) -> BOOL { return CAM::PLAY_CAM_ANIM(cam.id,animName,animDictionary,x,y,z,xRot,yRot,zRot,p9,p10); })
		.def("point_at_coord", [](Py_Cam cam,float x,float y,float z) -> void { return CAM::POINT_CAM_AT_COORD(cam.id,x,y,z); })
		.def("point_at_entity", [](Py_Cam cam,Py_Entity entity,float p2,float p3,float p4,BOOL p5) -> void { return CAM::POINT_CAM_AT_ENTITY(cam.id,entity.id,p2,p3,p4,p5); })
		.def("point_at_ped_bone", [](Py_Cam cam,int ped,int boneIndex,float x,float y,float z,BOOL p6) -> void { return CAM::POINT_CAM_AT_PED_BONE(cam.id,ped,boneIndex,x,y,z,p6); })
		.def("set_active_with_interp", [](Py_Cam camTo,Py_Cam camFrom,int duration,BOOL easeLocation,BOOL easeRotation) -> void { return CAM::SET_CAM_ACTIVE_WITH_INTERP(camTo.id,camFrom.id,duration,easeLocation,easeRotation); })
		.def("set_coord", [](Py_Cam cam,float posX,float posY,float posZ) -> void { return CAM::SET_CAM_COORD(cam.id,posX,posY,posZ); })
		.def("set_dof_planes", [](Py_Cam cam,float p1,float p2,float p3,float p4) -> void { return CAM::SET_CAM_DOF_PLANES(cam.id,p1,p2,p3,p4); })
		.def("set_params", [](Py_Cam cam,float p1,float p2,float p3,float p4,float p5,float p6,float p7,Py_Any p8,Py_Any p9,Py_Any p10,Py_Any p11) -> void { return CAM::SET_CAM_PARAMS(cam.id,p1,p2,p3,p4,p5,p6,p7,p8.id,p9.id,p10.id,p11.id); })
		.def("set_rot", [](Py_Cam cam,float rotX,float rotY,float rotZ,int p4) -> void { return CAM::SET_CAM_ROT(cam.id,rotX,rotY,rotZ,p4); })
		.def("shake_cam", [](Py_Cam cam,char* type,float amplitude) -> void { return CAM::SHAKE_CAM(cam.id,type,amplitude); })
		.def("stop_pointing", [](Py_Cam cam) -> void { return CAM::STOP_CAM_POINTING(cam.id); })
		.def("stop_shaking", [](Py_Cam cam,BOOL p1) -> void { return CAM::STOP_CAM_SHAKING(cam.id,p1); })
		.def_static("add_spline_node", [](int camera,float x,float y,float z,float xRot,float yRot,float zRot,int p7,int p8,int p9) -> void { return CAM::ADD_CAM_SPLINE_NODE(camera,x,y,z,xRot,yRot,zRot,p7,p8,p9); })
		.def_static("animate_gameplay_zoom", [](float p0,float _distance) -> void { return CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(p0,_distance); })
		.def_static("clamp_gameplay_pitch", [](float minimum,float maximum) -> void { return CAM::_CLAMP_GAMEPLAY_CAM_PITCH(minimum,maximum); })
		.def_static("clamp_gameplay_yaw", [](float minimum,float maximum) -> void { return CAM::_CLAMP_GAMEPLAY_CAM_YAW(minimum,maximum); })
		.def_static("create_cam", [](char* camName,BOOL p1) -> Py_Cam { return CAM::CREATE_CAM(camName,p1); })
		.def_static("create_camera", [](Py_Hash camHash,BOOL p1) -> Py_Cam { return CAM::CREATE_CAMERA(camHash.id,p1); })
		.def_static("create_camera_with_params", [](Py_Hash camHash,float p1,float p2,float p3,float p4,float p5,float p6,float p7,BOOL p8,Py_Any p9) -> Py_Cam { return CAM::CREATE_CAMERA_WITH_PARAMS(camHash.id,p1,p2,p3,p4,p5,p6,p7,p8,p9.id); })
		.def_static("create_cinematic_shot", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return CAM::CREATE_CINEMATIC_SHOT(p0.id,p1.id,p2.id,p3.id); })
		.def_static("create_with_params", [](char* camName,float posX,float posY,float posZ,float rotX,float rotY,float rotZ,float fov,BOOL p8,int p9) -> Py_Cam { return CAM::CREATE_CAM_WITH_PARAMS(camName,posX,posY,posZ,rotX,rotY,rotZ,fov,p8,p9); })
		.def_static("destroy_all_cams", [](BOOL destroy) -> void { return CAM::DESTROY_ALL_CAMS(destroy); })
		.def_static("detach_cam", [](int camHandle) -> void { return CAM::DETACH_CAM(camHandle); })
		.def_static("disable_first_person_this_frame", []() -> void { return CAM::_DISABLE_FIRST_PERSON_CAM_THIS_FRAME(); })
		.def_static("disable_vehicle_first_person_this_frame", []() -> void { return CAM::_DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME(); })
		.def_static("do_screen_fade_in", [](int duration) -> void { return CAM::DO_SCREEN_FADE_IN(duration); })
		.def_static("do_screen_fade_out", [](int duration) -> void { return CAM::DO_SCREEN_FADE_OUT(duration); })
		.def_static("enable_crosshair_this_frame", []() -> void { return CAM::_ENABLE_CROSSHAIR_THIS_FRAME(); })
		.def_static("get_follow_ped_view_mode", []() -> int { return CAM::GET_FOLLOW_PED_CAM_VIEW_MODE(); })
		.def_static("get_follow_ped_zoom_level", []() -> Py_Any { return CAM::GET_FOLLOW_PED_CAM_ZOOM_LEVEL(); })
		.def_static("get_follow_vehicle_view_mode", []() -> int { return CAM::GET_FOLLOW_VEHICLE_CAM_VIEW_MODE(); })
		.def_static("get_follow_vehicle_zoom_level", []() -> Py_Any { return CAM::GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(); })
		.def_static("get_gameplay_coord", []() -> Vector3 { return CAM::GET_GAMEPLAY_CAM_COORD(); })
		.def_static("get_gameplay_coords", []() -> Vector3 { return CAM::_GET_GAMEPLAY_CAM_COORDS(); })
		.def_static("get_gameplay_fov", []() -> float { return CAM::GET_GAMEPLAY_CAM_FOV(); })
		.def_static("get_gameplay_relative_heading", []() -> float { return CAM::GET_GAMEPLAY_CAM_RELATIVE_HEADING(); })
		.def_static("get_gameplay_relative_pitch", []() -> float { return CAM::GET_GAMEPLAY_CAM_RELATIVE_PITCH(); })
		.def_static("get_gameplay_rot", [](Py_Any p0) -> Vector3 { return CAM::_GET_GAMEPLAY_CAM_ROT(p0.id); })
		.def_static("get_gameplay_zoom", []() -> float { return CAM::_GET_GAMEPLAY_CAM_ZOOM(); })
		.def_static("get_is_multiplayer_brief", [](BOOL p0) -> void { return CAM::GET_IS_MULTIPLAYER_BRIEF(p0); })
		.def_static("get_rendering_cam", []() -> Py_Cam { return CAM::GET_RENDERING_CAM(); })
		.def_static("get_spline_node_phase", [](Py_Any p0) -> float { return CAM::GET_CAM_SPLINE_NODE_PHASE(p0.id); })
		.def_static("is_aim_active", []() -> BOOL { return CAM::IS_AIM_CAM_ACTIVE(); })
		.def_static("is_cinematic_rendering", []() -> BOOL { return CAM::IS_CINEMATIC_CAM_RENDERING(); })
		.def_static("is_cinematic_shaking", []() -> BOOL { return CAM::IS_CINEMATIC_CAM_SHAKING(); })
		.def_static("is_cinematic_shot_active", [](Py_Any p0) -> BOOL { return CAM::IS_CINEMATIC_SHOT_ACTIVE(p0.id); })
		.def_static("is_first_person_aim_active", []() -> BOOL { return CAM::IS_FIRST_PERSON_AIM_CAM_ACTIVE(); })
		.def_static("is_follow_ped_active", []() -> BOOL { return CAM::IS_FOLLOW_PED_CAM_ACTIVE(); })
		.def_static("is_follow_vehicle_active", []() -> BOOL { return CAM::IS_FOLLOW_VEHICLE_CAM_ACTIVE(); })
		.def_static("is_gameplay_hint_active", []() -> BOOL { return CAM::IS_GAMEPLAY_HINT_ACTIVE(); })
		.def_static("is_gameplay_looking_behind", []() -> BOOL { return CAM::IS_GAMEPLAY_CAM_LOOKING_BEHIND(); })
		.def_static("is_gameplay_rendering", []() -> BOOL { return CAM::IS_GAMEPLAY_CAM_RENDERING(); })
		.def_static("is_gameplay_shaking", []() -> BOOL { return CAM::IS_GAMEPLAY_CAM_SHAKING(); })
		.def_static("is_rendering", [](Py_Any p0) -> BOOL { return CAM::IS_CAM_RENDERING(p0.id); })
		.def_static("is_screen_faded_in", []() -> BOOL { return CAM::IS_SCREEN_FADED_IN(); })
		.def_static("is_screen_faded_out", []() -> BOOL { return CAM::IS_SCREEN_FADED_OUT(); })
		.def_static("is_screen_fading_in", []() -> BOOL { return CAM::IS_SCREEN_FADING_IN(); })
		.def_static("is_screen_fading_out", []() -> BOOL { return CAM::IS_SCREEN_FADING_OUT(); })
		.def_static("is_sphere_visible", [](float x,float y,float z,float radius) -> BOOL { return CAM::IS_SPHERE_VISIBLE(x,y,z,radius); })
		.def_static("is_spline_paused", [](Py_Any p0) -> BOOL { return CAM::IS_CAM_SPLINE_PAUSED(p0.id); })
		.def_static("override_spline_motion_blur", [](Py_Any p0,Py_Any p1,float p2,float p3) -> void { return CAM::OVERRIDE_CAM_SPLINE_MOTION_BLUR(p0.id,p1.id,p2,p3); })
		.def_static("play_synchronized_anim", [](Py_Any p0,Py_Any p1,char* p2,char* p3) -> BOOL { return CAM::PLAY_SYNCHRONIZED_CAM_ANIM(p0.id,p1.id,p2,p3); })
		.def_static("render_script_cams", [](BOOL render,BOOL ease,Py_Any camera,BOOL p3,BOOL p4) -> void { return CAM::RENDER_SCRIPT_CAMS(render,ease,camera.id,p3,p4); })
		.def_static("set_cinematic_button_active", [](BOOL p0) -> void { return CAM::SET_CINEMATIC_BUTTON_ACTIVE(p0); })
		.def_static("set_cinematic_mode_active", [](BOOL p0) -> void { return CAM::SET_CINEMATIC_MODE_ACTIVE(p0); })
		.def_static("set_cinematic_shake_amplitude", [](float p0) -> void { return CAM::SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(p0); })
		.def_static("set_effect", [](int p0) -> void { return CAM::_SET_CAM_EFFECT(p0); })
		.def_static("set_first_person_pitch_range", [](float p0,float p1) -> void { return CAM::_SET_FIRST_PERSON_CAM_PITCH_RANGE(p0,p1); })
		.def_static("set_follow_ped_cutscene_chat", [](char* p0,int p1) -> BOOL { return CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(p0,p1); })
		.def_static("set_follow_ped_view_mode", [](Py_Any p0) -> void { return CAM::SET_FOLLOW_PED_CAM_VIEW_MODE(p0.id); })
		.def_static("set_follow_vehicle_view_mode", [](int mode) -> void { return CAM::SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(mode); })
		.def_static("set_follow_vehicle_zoom_level", [](Py_Any p0) -> void { return CAM::SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(p0.id); })
		.def_static("set_gameplay_coord_hint", [](float p0,float p1,float p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6) -> void { return CAM::SET_GAMEPLAY_COORD_HINT(p0,p1,p2,p3.id,p4.id,p5.id,p6.id); })
		.def_static("set_gameplay_entity_hint", [](Py_Any p0,float p1,float p2,float p3,BOOL p4,Py_Any p5,Py_Any p6,Py_Any p7,Py_Any p8) -> void { return CAM::SET_GAMEPLAY_ENTITY_HINT(p0.id,p1,p2,p3,p4,p5.id,p6.id,p7.id,p8.id); })
		.def_static("set_gameplay_hint_fov", [](float p0) -> void { return CAM::SET_GAMEPLAY_HINT_FOV(p0); })
		.def_static("set_gameplay_object_hint", [](Py_Any p0,float p1,float p2,float p3,BOOL p4,Py_Any p5,Py_Any p6,Py_Any p7) -> void { return CAM::SET_GAMEPLAY_OBJECT_HINT(p0.id,p1,p2,p3,p4,p5.id,p6.id,p7.id); })
		.def_static("set_gameplay_ped_hint", [](Py_Ped p0,float x1,float y1,float z1,BOOL p4,Py_Any p5,Py_Any p6,Py_Any p7) -> void { return CAM::SET_GAMEPLAY_PED_HINT(p0.id,x1,y1,z1,p4,p5.id,p6.id,p7.id); })
		.def_static("set_gameplay_raw_pitch", [](float pitch) -> void { return CAM::_SET_GAMEPLAY_CAM_RAW_PITCH(pitch); })
		.def_static("set_gameplay_raw_yaw", [](float yaw) -> void { return CAM::_SET_GAMEPLAY_CAM_RAW_YAW(yaw); })
		.def_static("set_gameplay_relative_heading", [](float heading) -> void { return CAM::SET_GAMEPLAY_CAM_RELATIVE_HEADING(heading); })
		.def_static("set_gameplay_relative_pitch", [](float x,float Value2) -> void { return CAM::SET_GAMEPLAY_CAM_RELATIVE_PITCH(x,Value2); })
		.def_static("set_gameplay_shake_amplitude", [](float amplitude) -> void { return CAM::SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(amplitude); })
		.def_static("set_gameplay_vehicle_hint", [](Py_Any p0,float p1,float p2,float p3,BOOL p4,Py_Any p5,Py_Any p6,Py_Any p7) -> void { return CAM::SET_GAMEPLAY_VEHICLE_HINT(p0.id,p1,p2,p3,p4,p5.id,p6.id,p7.id); })
		.def_static("set_use_hi_dof", []() -> void { return CAM::SET_USE_HI_DOF(); })
		.def_static("set_widescreen_borders", [](BOOL p0,int p1) -> void { return CAM::SET_WIDESCREEN_BORDERS(p0,p1); })
		.def_static("shake_cinematic_cam", [](char* p0,float p1) -> void { return CAM::SHAKE_CINEMATIC_CAM(p0,p1); })
		.def_static("shake_gameplay_cam", [](char* shakeName,float intensity) -> void { return CAM::SHAKE_GAMEPLAY_CAM(shakeName,intensity); })
		.def_static("stop_cinematic_shaking", [](BOOL p0) -> void { return CAM::STOP_CINEMATIC_CAM_SHAKING(p0); })
		.def_static("stop_cinematic_shot", [](Py_Any p0) -> void { return CAM::STOP_CINEMATIC_SHOT(p0.id); })
		.def_static("stop_cutscene_shaking", []() -> void { return CAM::STOP_CUTSCENE_CAM_SHAKING(); })
		.def_static("stop_gameplay_hint", [](BOOL p0) -> void { return CAM::STOP_GAMEPLAY_HINT(p0); })
		.def_static("stop_gameplay_shaking", [](BOOL p0) -> void { return CAM::STOP_GAMEPLAY_CAM_SHAKING(p0); })
;
	custom(py_Cam);
	py::class_<Py_Object> py_Object(m, "Object",py_Entity);
	py_Object.def("__bool__", [](Py_Object t){return (BOOL)t.id;});
	py_Object
		.def_property_readonly("is_visible", [](Py_Object object) -> BOOL { return OBJECT::IS_OBJECT_VISIBLE(object.id); })
		.def("set_targettable", [](Py_Object object,BOOL targettable) -> void { return OBJECT::SET_OBJECT_TARGETTABLE(object.id,targettable); })
		.def("has_been_broken", [](Py_Object object) -> BOOL { return OBJECT::HAS_OBJECT_BEEN_BROKEN(object.id); })
		.def("mark_for_deletion", [](Py_Object object) -> void { return OBJECT::_MARK_OBJECT_FOR_DELETION(object.id); })
		.def("place_on_ground_properly", [](Py_Object object) -> BOOL { return OBJECT::PLACE_OBJECT_ON_GROUND_PROPERLY(object.id); })
		.def("slide_object", [](Py_Object object,float toX,float toY,float toZ,float speedX,float speedY,float speedZ,BOOL collisionCheck) -> BOOL { return OBJECT::SLIDE_OBJECT(object.id,toX,toY,toZ,speedX,speedY,speedZ,collisionCheck); })
		.def_static("add_door_to_system", [](Py_Hash doorHash,Py_Hash modelHash,float x,float y,float z,BOOL p5,BOOL p6,BOOL p7) -> void { return OBJECT::ADD_DOOR_TO_SYSTEM(doorHash.id,modelHash.id,x,y,z,p5,p6,p7); })
		.def_static("attach_portable_pickup_to_ped", [](Py_Ped ped,Py_Any p1) -> void { return OBJECT::ATTACH_PORTABLE_PICKUP_TO_PED(ped.id,p1.id); })
		.def_static("create_ambient_pickup", [](Py_Hash pickupHash,float posX,float posY,float posZ,int p4,int value,Py_Hash modelHash,BOOL p7,BOOL p8) -> Py_Pickup { return OBJECT::CREATE_AMBIENT_PICKUP(pickupHash.id,posX,posY,posZ,p4,value,modelHash.id,p7,p8); })
		.def_static("create_money_pickups", [](float xCoord,float yCoord,float zCoord,int value,int p4,Py_Any p5) -> void { return OBJECT::CREATE_MONEY_PICKUPS(xCoord,yCoord,zCoord,value,p4,p5.id); })
		.def_static("create_no_offset", [](Py_Hash objectHash,float posX,float posY,float posZ,BOOL networkHandle,BOOL createHandle,BOOL dynamic) -> Py_Object { return OBJECT::CREATE_OBJECT_NO_OFFSET(objectHash.id,posX,posY,posZ,networkHandle,createHandle,dynamic); })
		.def_static("create_object", [](Py_Hash modelHash,float x,float y,float z,BOOL networkHandle,BOOL createHandle,BOOL dynamic) -> Py_Object { return OBJECT::CREATE_OBJECT(modelHash.id,x,y,z,networkHandle,createHandle,dynamic); })
		.def_static("create_pickup", [](Py_Hash pickupHash,float posX,float posY,float posZ,int p4,int value,BOOL p6,Py_Hash modelHash) -> Py_Pickup { return OBJECT::CREATE_PICKUP(pickupHash.id,posX,posY,posZ,p4,value,p6,modelHash.id); })
		.def_static("create_pickup_2", [](Py_Hash pickupType,float x,float y,float z,BOOL placeOnGround,Py_Hash modelHash) -> Py_Pickup { return OBJECT::_CREATE_PICKUP_2(pickupType.id,x,y,z,placeOnGround,modelHash.id); })
		.def_static("create_pickup_rotate", [](Py_Hash pickupHash,float posX,float posY,float posZ,float rotX,float rotY,float rotZ,int p7,int amount,Py_Any p9,BOOL p10,Py_Hash modelHash) -> Py_Pickup { return OBJECT::CREATE_PICKUP_ROTATE(pickupHash.id,posX,posY,posZ,rotX,rotY,rotZ,p7,amount,p9.id,p10,modelHash.id); })
		.def_static("create_portable_pickup", [](Py_Hash pickupHash,float x,float y,float z,BOOL placeOnGround,Py_Any p5) -> Py_Pickup { return OBJECT::CREATE_PORTABLE_PICKUP(pickupHash.id,x,y,z,placeOnGround,p5.id); })
		.def_static("detach_portable_pickup_from_ped", [](Py_Ped ped) -> void { return OBJECT::DETACH_PORTABLE_PICKUP_FROM_PED(ped.id); })
		.def_static("does_door_exist", [](Py_Hash doorHash) -> BOOL { return OBJECT::_DOES_DOOR_EXIST(doorHash.id); })
		.def_static("does_of_type_exist_at_coords", [](float x,float y,float z,float radius,Py_Hash hash,BOOL p5) -> BOOL { return OBJECT::DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(x,y,z,radius,hash.id,p5); })
		.def_static("does_pickup_exist", [](Py_Any p0) -> BOOL { return OBJECT::DOES_PICKUP_OBJECT_EXIST(p0.id); })
		.def_static("door_control", [](Py_Hash doorHash,float x,float y,float z,BOOL locked,float p5,float p6,float p7) -> void { return OBJECT::_DOOR_CONTROL(doorHash.id,x,y,z,locked,p5,p6,p7); })
		.def_static("get_closest_of_type", [](float x,float y,float z,float radius,Py_Hash modelHash,BOOL isMission,BOOL p6,BOOL p7) -> Py_Object { return OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(x,y,z,radius,modelHash.id,isMission,p6,p7); })
		.def_static("get_fragment_damage_health", [](Py_Any p0,BOOL p1) -> float { return OBJECT::GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(p0.id,p1); })
		.def_static("get_offset_from_coords", [](float x,float y,float z,float heading,float xOffset,float yOffset,float zOffset) -> Vector3 { return OBJECT::_GET_OBJECT_OFFSET_FROM_COORDS(x,y,z,heading,xOffset,yOffset,zOffset); })
		.def_static("get_pickup_coords", [](Py_Any p0) -> Vector3 { return OBJECT::GET_PICKUP_COORDS(p0.id); })
		.def_static("get_pickup_object", [](Py_Any p0) -> Py_Any { return OBJECT::GET_PICKUP_OBJECT(p0.id); })
		.def_static("get_safe_pickup_coords", [](float x,float y,float z,Py_Any p3,Py_Any p4) -> Vector3 { return OBJECT::GET_SAFE_PICKUP_COORDS(x,y,z,p3.id,p4.id); })
		.def_static("has_closest_of_type_been_broken", [](float p0,float p1,float p2,float p3,Py_Any p4,Py_Any p5) -> BOOL { return OBJECT::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(p0,p1,p2,p3,p4.id,p5.id); })
		.def_static("has_pickup_been_collected", [](Py_Any p0) -> BOOL { return OBJECT::HAS_PICKUP_BEEN_COLLECTED(p0.id); })
		.def_static("is_any_near_point", [](float p0,float p1,float p2,float p3,BOOL p4) -> BOOL { return OBJECT::IS_ANY_OBJECT_NEAR_POINT(p0,p1,p2,p3,p4); })
		.def_static("is_door_closed", [](Py_Hash door) -> BOOL { return OBJECT::IS_DOOR_CLOSED(door.id); })
		.def_static("is_garage_empty", [](Py_Any garage,BOOL p1,int p2) -> BOOL { return OBJECT::IS_GARAGE_EMPTY(garage.id,p1,p2); })
		.def_static("is_near_point", [](Py_Hash p0,float p1,float p2,float p3,float p4) -> BOOL { return OBJECT::IS_OBJECT_NEAR_POINT(p0.id,p1,p2,p3,p4); })
		.def_static("is_pickup_within_radius", [](Py_Hash pickupHash,float x,float y,float z,float radius) -> BOOL { return OBJECT::_IS_PICKUP_WITHIN_RADIUS(pickupHash.id,x,y,z,radius); })
		.def_static("is_point_in_angled_area", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,float p8,float p9,BOOL p10,BOOL p11) -> BOOL { return OBJECT::IS_POINT_IN_ANGLED_AREA(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11); })
		.def_static("remove_all_pickups_of_type", [](Py_Any p0) -> void { return OBJECT::REMOVE_ALL_PICKUPS_OF_TYPE(p0.id); })
		.def_static("remove_door_from_system", [](Py_Hash doorHash) -> void { return OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash.id); })
		.def_static("remove_pickup", [](Py_Any p0) -> void { return OBJECT::REMOVE_PICKUP(p0.id); })
		.def_static("set_activate_physics_as_soon_as_it_is_unfrozen", [](Py_Any p0,BOOL p1) -> void { return OBJECT::SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(p0.id,p1); })
		.def_static("set_force_this_frame", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return OBJECT::SET_FORCE_OBJECT_THIS_FRAME(p0.id,p1.id,p2.id,p3.id); })
		.def_static("set_physics_params", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,float p8,float p9,float p10,float p11) -> void { return OBJECT::SET_OBJECT_PHYSICS_PARAMS(p0.id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11); })
		.def_static("set_pickup_regeneration_time", [](Py_Any p0,Py_Any p1) -> void { return OBJECT::SET_PICKUP_REGENERATION_TIME(p0.id,p1.id); })
		.def_static("set_state_of_closest_door_of_type", [](Py_Hash type,float x,float y,float z,BOOL locked,float heading,BOOL p6) -> void { return OBJECT::SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(type.id,x,y,z,locked,heading,p6); })
		.def_static("set_team_pickup_object", [](Py_Any p0,Py_Any p1,BOOL p2) -> void { return OBJECT::SET_TEAM_PICKUP_OBJECT(p0.id,p1.id,p2); })
		.def_static("track_visibility", [](Py_Any p0) -> void { return OBJECT::TRACK_OBJECT_VISIBILITY(p0.id); })
;
	custom(py_Object);
	py::class_<Py_Pickup> py_Pickup(m, "Pickup",py_Object);
	py_Pickup.def("__bool__", [](Py_Pickup t){return (BOOL)t.id;});
	py_Pickup
;
	custom(py_Pickup);
	py::class_<Py_Blip> py_Blip(m, "Blip",py_Any);
	py_Blip.def("__bool__", [](Py_Blip t){return (BOOL)t.id;});
	py_Blip
;
	custom(py_Blip);
	py::class_<Py_ScrHandle> py_ScrHandle(m, "ScrHandle");
	py_ScrHandle.def("__bool__", [](Py_ScrHandle t){return (BOOL)t.id;});
	py_ScrHandle
;
	custom(py_ScrHandle);
	py::class_<Py_Ai> py_Ai(m, "Ai");
	py_Ai
		.def_static("add_cover_blocking_area", [](float playerX,float playerY,float playerZ,float radiusX,float radiusY,float radiusZ,BOOL p6,BOOL p7,BOOL p8,BOOL p9) -> void { return AI::ADD_COVER_BLOCKING_AREA(playerX,playerY,playerZ,radiusX,radiusY,radiusZ,p6,p7,p8,p9); })
		.def_static("add_cover_point", [](float p0,float p1,float p2,float p3,Py_Any p4,Py_Any p5,Py_Any p6,BOOL p7) -> Py_ScrHandle { return AI::ADD_COVER_POINT(p0,p1,p2,p3,p4.id,p5.id,p6.id,p7); })
		.def_static("add_patrol_route_link", [](Py_Any p0,Py_Any p1) -> void { return AI::ADD_PATROL_ROUTE_LINK(p0.id,p1.id); })
		.def_static("add_patrol_route_node", [](int p0,char* p1,float x1,float y1,float z1,float x2,float y2,float z2,int p8) -> void { return AI::ADD_PATROL_ROUTE_NODE(p0,p1,x1,y1,z1,x2,y2,z2,p8); })
		.def_static("add_vehicle_subtask_attack_coord", [](Py_Ped ped,float x,float y,float z) -> void { return AI::ADD_VEHICLE_SUBTASK_ATTACK_COORD(ped.id,x,y,z); })
		.def_static("add_vehicle_subtask_attack_ped", [](Py_Ped ped,Py_Ped ped2) -> void { return AI::ADD_VEHICLE_SUBTASK_ATTACK_PED(ped.id,ped2.id); })
		.def_static("assisted_movement_is_route_loaded", [](char* route) -> BOOL { return AI::ASSISTED_MOVEMENT_IS_ROUTE_LOADED(route); })
		.def_static("assisted_movement_override_load_distance_this_frame", [](float dist) -> void { return AI::ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(dist); })
		.def_static("assisted_movement_remove_route", [](char* route) -> void { return AI::ASSISTED_MOVEMENT_REMOVE_ROUTE(route); })
		.def_static("assisted_movement_request_route", [](char* route) -> void { return AI::ASSISTED_MOVEMENT_REQUEST_ROUTE(route); })
		.def_static("assisted_movement_set_route_properties", [](char* route,int props) -> void { return AI::ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(route,props); })
		.def_static("clear_driveby_task_underneath_driving_task", [](Py_Ped ped) -> void { return AI::CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped.id); })
		.def_static("clear_ped_secondary_task", [](Py_Ped ped) -> void { return AI::CLEAR_PED_SECONDARY_TASK(ped.id); })
		.def_static("clear_ped_tasks", [](Py_Ped ped) -> void { return AI::CLEAR_PED_TASKS(ped.id); })
		.def_static("clear_ped_tasks_immediately", [](Py_Ped ped) -> void { return AI::CLEAR_PED_TASKS_IMMEDIATELY(ped.id); })
		.def_static("close_patrol_route", []() -> void { return AI::CLOSE_PATROL_ROUTE(); })
		.def_static("close_sequence_task", [](Py_Object taskSequence) -> void { return AI::CLOSE_SEQUENCE_TASK(taskSequence.id); })
		.def_static("control_mounted_weapon", [](Py_Ped ped) -> BOOL { return AI::CONTROL_MOUNTED_WEAPON(ped.id); })
		.def_static("create_patrol_route", []() -> void { return AI::CREATE_PATROL_ROUTE(); })
		.def_static("delete_patrol_route", [](char* patrolRoute) -> void { return AI::DELETE_PATROL_ROUTE(patrolRoute); })
		.def_static("does_scenario_exist_in_area", [](float x,float y,float z,float radius,BOOL b) -> BOOL { return AI::DOES_SCENARIO_EXIST_IN_AREA(x,y,z,radius,b); })
		.def_static("does_scenario_group_exist", [](char* scenarioGroup) -> BOOL { return AI::DOES_SCENARIO_GROUP_EXIST(scenarioGroup); })
		.def_static("does_scripted_cover_point_exist_at_coords", [](float x,float y,float z) -> BOOL { return AI::DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(x,y,z); })
		.def_static("get_active_vehicle_mission_type", [](Py_Vehicle veh) -> int { return AI::GET_ACTIVE_VEHICLE_MISSION_TYPE(veh.id); })
		.def_static("get_clip_set_for_scripted_gun_task", [](Py_Any p0) -> Py_Any { return AI::GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(p0.id); })
		.def_static("get_is_task_active", [](Py_Ped ped,int taskNumber) -> BOOL { return AI::GET_IS_TASK_ACTIVE(ped.id,taskNumber); })
		.def_static("get_is_waypoint_recording_loaded", [](char* name) -> BOOL { return AI::GET_IS_WAYPOINT_RECORDING_LOADED(name); })
		.def_static("get_navmesh_route_result", [](Py_Any p0) -> Py_Any { return AI::GET_NAVMESH_ROUTE_RESULT(p0.id); })
		.def_static("get_ped_desired_move_blend_ratio", [](Py_Ped ped) -> float { return AI::GET_PED_DESIRED_MOVE_BLEND_RATIO(ped.id); })
		.def_static("get_ped_waypoint_distance", [](Py_Any p0) -> float { return AI::GET_PED_WAYPOINT_DISTANCE(p0.id); })
		.def_static("get_ped_waypoint_progress", [](Py_Any p0) -> Py_Any { return AI::GET_PED_WAYPOINT_PROGRESS(p0.id); })
		.def_static("get_phone_gesture_anim_current_time", [](Py_Any p0) -> float { return AI::GET_PHONE_GESTURE_ANIM_CURRENT_TIME(p0.id); })
		.def_static("get_phone_gesture_anim_total_time", [](Py_Any p0) -> float { return AI::GET_PHONE_GESTURE_ANIM_TOTAL_TIME(p0.id); })
		.def_static("get_script_task_status", [](Py_Ped targetPed,Py_Hash taskHash) -> int { return AI::GET_SCRIPT_TASK_STATUS(targetPed.id,taskHash.id); })
		.def_static("get_scripted_cover_point_coords", [](Py_ScrHandle coverpoint) -> Vector3 { return AI::GET_SCRIPTED_COVER_POINT_COORDS(coverpoint.id); })
		.def_static("get_sequence_progress", [](Py_Ped ped) -> int { return AI::GET_SEQUENCE_PROGRESS(ped.id); })
		.def_static("get_vehicle_waypoint_progress", [](Py_Any p0) -> Py_Any { return AI::GET_VEHICLE_WAYPOINT_PROGRESS(p0.id); })
		.def_static("get_vehicle_waypoint_target_point", [](Py_Any p0) -> Py_Any { return AI::GET_VEHICLE_WAYPOINT_TARGET_POINT(p0.id); })
		.def_static("is_driveby_task_underneath_driving_task", [](Py_Ped ped) -> BOOL { return AI::IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(ped.id); })
		.def_static("is_mounted_weapon_task_underneath_driving_task", [](Py_Any p0) -> BOOL { return AI::IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(p0.id); })
		.def_static("is_move_blend_ratio_running", [](Py_Ped ped) -> BOOL { return AI::IS_MOVE_BLEND_RATIO_RUNNING(ped.id); })
		.def_static("is_move_blend_ratio_sprinting", [](Py_Ped ped) -> BOOL { return AI::IS_MOVE_BLEND_RATIO_SPRINTING(ped.id); })
		.def_static("is_move_blend_ratio_still", [](Py_Ped ped) -> BOOL { return AI::IS_MOVE_BLEND_RATIO_STILL(ped.id); })
		.def_static("is_move_blend_ratio_walking", [](Py_Ped ped) -> BOOL { return AI::IS_MOVE_BLEND_RATIO_WALKING(ped.id); })
		.def_static("is_ped_active_in_scenario", [](Py_Ped ped) -> BOOL { return AI::IS_PED_ACTIVE_IN_SCENARIO(ped.id); })
		.def_static("is_ped_being_arrested", [](Py_Ped ped) -> BOOL { return AI::IS_PED_BEING_ARRESTED(ped.id); })
		.def_static("is_ped_cuffed", [](Py_Ped ped) -> BOOL { return AI::IS_PED_CUFFED(ped.id); })
		.def_static("is_ped_getting_up", [](Py_Ped ped) -> BOOL { return AI::IS_PED_GETTING_UP(ped.id); })
		.def_static("is_ped_in_writhe", [](Py_Ped ped) -> BOOL { return AI::IS_PED_IN_WRITHE(ped.id); })
		.def_static("is_ped_running", [](Py_Ped ped) -> BOOL { return AI::IS_PED_RUNNING(ped.id); })
		.def_static("is_ped_running_arrest_task", [](Py_Ped ped) -> BOOL { return AI::IS_PED_RUNNING_ARREST_TASK(ped.id); })
		.def_static("is_ped_sprinting", [](Py_Ped ped) -> BOOL { return AI::IS_PED_SPRINTING(ped.id); })
		.def_static("is_ped_still", [](Py_Ped ped) -> BOOL { return AI::IS_PED_STILL(ped.id); })
		.def_static("is_ped_strafing", [](Py_Ped ped) -> BOOL { return AI::IS_PED_STRAFING(ped.id); })
		.def_static("is_ped_walking", [](Py_Ped ped) -> BOOL { return AI::IS_PED_WALKING(ped.id); })
		.def_static("is_playing_phone_gesture_anim", [](Py_Ped ped) -> BOOL { return AI::IS_PLAYING_PHONE_GESTURE_ANIM(ped.id); })
		.def_static("is_scenario_group_enabled", [](char* scenarioGroup) -> BOOL { return AI::IS_SCENARIO_GROUP_ENABLED(scenarioGroup); })
		.def_static("is_scenario_occupied", [](float p0,float p1,float p2,float p3,BOOL p4) -> BOOL { return AI::IS_SCENARIO_OCCUPIED(p0,p1,p2,p3,p4); })
		.def_static("is_scenario_type_enabled", [](char* scenarioType) -> BOOL { return AI::IS_SCENARIO_TYPE_ENABLED(scenarioType); })
		.def_static("is_waypoint_playback_going_on_for_ped", [](Py_Any p0) -> BOOL { return AI::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(p0.id); })
		.def_static("is_waypoint_playback_going_on_for_vehicle", [](Py_Any p0) -> BOOL { return AI::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(p0.id); })
		.def_static("open_patrol_route", [](char* patrolRoute) -> void { return AI::OPEN_PATROL_ROUTE(patrolRoute); })
		.def_static("ped_has_use_scenario_task", [](Py_Ped ped) -> BOOL { return AI::PED_HAS_USE_SCENARIO_TASK(ped.id); })
		.def_static("play_anim_on_running_scenario", [](Py_Ped ped,char* animDict,char* animName) -> void { return AI::PLAY_ANIM_ON_RUNNING_SCENARIO(ped.id,animDict,animName); })
		.def_static("remove_all_cover_blocking_areas", []() -> void { return AI::REMOVE_ALL_COVER_BLOCKING_AREAS(); })
		.def_static("remove_cover_point", [](Py_ScrHandle coverpoint) -> void { return AI::REMOVE_COVER_POINT(coverpoint.id); })
		.def_static("remove_waypoint_recording", [](char* name) -> void { return AI::REMOVE_WAYPOINT_RECORDING(name); })
		.def_static("request_waypoint_recording", [](char* name) -> void { return AI::REQUEST_WAYPOINT_RECORDING(name); })
		.def_static("reset_exclusive_scenario_group", []() -> void { return AI::RESET_EXCLUSIVE_SCENARIO_GROUP(); })
		.def_static("reset_scenario_groups_enabled", []() -> void { return AI::RESET_SCENARIO_GROUPS_ENABLED(); })
		.def_static("reset_scenario_types_enabled", []() -> void { return AI::RESET_SCENARIO_TYPES_ENABLED(); })
		.def_static("set_anim_looped", [](Py_Any p0,BOOL p1,Py_Any p2,BOOL p3) -> void { return AI::SET_ANIM_LOOPED(p0.id,p1,p2.id,p3); })
		.def_static("set_anim_rate", [](Py_Any p0,float p1,Py_Any p2,BOOL p3) -> void { return AI::SET_ANIM_RATE(p0.id,p1,p2.id,p3); })
		.def_static("set_anim_weight", [](Py_Any p0,float p1,Py_Any p2,Py_Any p3,BOOL p4) -> void { return AI::SET_ANIM_WEIGHT(p0.id,p1,p2.id,p3.id,p4); })
		.def_static("set_drive_task_cruise_speed", [](Py_Ped driver,float cruiseSpeed) -> void { return AI::SET_DRIVE_TASK_CRUISE_SPEED(driver.id,cruiseSpeed); })
		.def_static("set_drive_task_driving_style", [](Py_Ped ped,int drivingStyle) -> void { return AI::SET_DRIVE_TASK_DRIVING_STYLE(ped.id,drivingStyle); })
		.def_static("set_drive_task_max_cruise_speed", [](Py_Any p0,float p1) -> void { return AI::SET_DRIVE_TASK_MAX_CRUISE_SPEED(p0.id,p1); })
		.def_static("set_driveby_task_target", [](Py_Any p0,Py_Any p1,Py_Any p2,float p3,float p4,float p5) -> void { return AI::SET_DRIVEBY_TASK_TARGET(p0.id,p1.id,p2.id,p3,p4,p5); })
		.def_static("set_exclusive_scenario_group", [](char* scenarioGroup) -> void { return AI::SET_EXCLUSIVE_SCENARIO_GROUP(scenarioGroup); })
		.def_static("set_global_min_bird_flight_height", [](float height) -> void { return AI::SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(height); })
		.def_static("set_high_fall_task", [](Py_Ped p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return AI::SET_HIGH_FALL_TASK(p0.id,p1.id,p2.id,p3.id); })
		.def_static("set_mounted_weapon_target", [](Py_Ped shootingPed,Py_Entity targetEntity,Py_Any p2,float x,float y,float z) -> void { return AI::SET_MOUNTED_WEAPON_TARGET(shootingPed.id,targetEntity.id,p2.id,x,y,z); })
		.def_static("set_next_desired_move_state", [](Py_Any p0) -> void { return AI::SET_NEXT_DESIRED_MOVE_STATE(p0.id); })
		.def_static("set_parachute_task_target", [](Py_Ped ped,float x,float y,float z) -> void { return AI::SET_PARACHUTE_TASK_TARGET(ped.id,x,y,z); })
		.def_static("set_parachute_task_thrust", [](Py_Any p0,float p1) -> void { return AI::SET_PARACHUTE_TASK_THRUST(p0.id,p1); })
		.def_static("set_ped_desired_move_blend_ratio", [](Py_Ped ped,float p1) -> void { return AI::SET_PED_DESIRED_MOVE_BLEND_RATIO(ped.id,p1); })
		.def_static("set_ped_path_avoid_fire", [](Py_Any p0,BOOL p1) -> void { return AI::SET_PED_PATH_AVOID_FIRE(p0.id,p1); })
		.def_static("set_ped_path_can_drop_from_height", [](Py_Ped ped,BOOL Toggle) -> void { return AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(ped.id,Toggle); })
		.def_static("set_ped_path_can_use_climbovers", [](Py_Ped ped,BOOL Toggle) -> void { return AI::SET_PED_PATH_CAN_USE_CLIMBOVERS(ped.id,Toggle); })
		.def_static("set_ped_path_can_use_ladders", [](Py_Ped ped,BOOL Toggle) -> void { return AI::SET_PED_PATH_CAN_USE_LADDERS(ped.id,Toggle); })
		.def_static("set_ped_path_prefer_to_avoid_water", [](Py_Ped ped,BOOL toggle) -> void { return AI::SET_PED_PATH_PREFER_TO_AVOID_WATER(ped.id,toggle); })
		.def_static("set_ped_paths_width_plant", [](Py_Any p0,BOOL p1) -> void { return AI::SET_PED_PATHS_WIDTH_PLANT(p0.id,p1); })
		.def_static("set_ped_waypoint_route_offset", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> Py_Any { return AI::SET_PED_WAYPOINT_ROUTE_OFFSET(p0.id,p1.id,p2.id,p3.id); })
		.def_static("set_scenario_group_enabled", [](char* scenarioGroup,BOOL p1) -> void { return AI::SET_SCENARIO_GROUP_ENABLED(scenarioGroup,p1); })
		.def_static("set_scenario_type_enabled", [](char* scenarioType,BOOL toggle) -> void { return AI::SET_SCENARIO_TYPE_ENABLED(scenarioType,toggle); })
		.def_static("set_sequence_to_repeat", [](Py_Object taskSequence,BOOL repeat) -> void { return AI::SET_SEQUENCE_TO_REPEAT(taskSequence.id,repeat); })
		.def_static("set_task_vehicle_chase_behavior_flag", [](Py_Ped ped,int flag,BOOL set) -> void { return AI::SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(ped.id,flag,set); })
		.def_static("set_task_vehicle_chase_ideal_pursuit_distance", [](Py_Any p0,float p1) -> void { return AI::SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(p0.id,p1); })
		.def_static("stop_anim_playback", [](Py_Ped ped,Py_Any p1,BOOL p2) -> void { return AI::STOP_ANIM_PLAYBACK(ped.id,p1.id,p2); })
		.def_static("stop_anim_task", [](Py_Ped ped,char* animDictionary,char* animationName,float p3) -> void { return AI::STOP_ANIM_TASK(ped.id,animDictionary,animationName,p3); })
		.def_static("task_achieve_heading", [](Py_Ped ped,float heading,int timeout) -> void { return AI::TASK_ACHIEVE_HEADING(ped.id,heading,timeout); })
		.def_static("task_aim_gun_at_coord", [](Py_Ped ped,float x,float y,float z,int time,BOOL p5,BOOL p6) -> void { return AI::TASK_AIM_GUN_AT_COORD(ped.id,x,y,z,time,p5,p6); })
		.def_static("task_aim_gun_at_entity", [](Py_Ped ped,Py_Entity entity,int duration,BOOL p3) -> void { return AI::TASK_AIM_GUN_AT_ENTITY(ped.id,entity.id,duration,p3); })
		.def_static("task_aim_gun_scripted", [](Py_Any p0,Py_Any p1,BOOL p2,BOOL p3) -> void { return AI::TASK_AIM_GUN_SCRIPTED(p0.id,p1.id,p2,p3); })
		.def_static("task_aim_gun_scripted_with_target", [](Py_Any p0,Py_Any p1,float p2,float p3,float p4,Py_Any p5,BOOL p6,BOOL p7) -> void { return AI::TASK_AIM_GUN_SCRIPTED_WITH_TARGET(p0.id,p1.id,p2,p3,p4,p5.id,p6,p7); })
		.def_static("task_arrest_ped", [](Py_Ped ped,Py_Ped target) -> void { return AI::TASK_ARREST_PED(ped.id,target.id); })
		.def_static("task_boat_mission", [](Py_Ped pedDriver,Py_Vehicle boat,Py_Any p2,Py_Any p3,float x,float y,float z,Py_Any p7,float maxSpeed,Py_Any p9,float p10,Py_Any p11) -> void { return AI::TASK_BOAT_MISSION(pedDriver.id,boat.id,p2.id,p3.id,x,y,z,p7.id,maxSpeed,p9.id,p10,p11.id); })
		.def_static("task_chat_to_ped", [](Py_Ped ped,Py_Ped target,Py_Any p2,float p3,float p4,float p5,float p6,float p7) -> void { return AI::TASK_CHAT_TO_PED(ped.id,target.id,p2.id,p3,p4,p5,p6,p7); })
		.def_static("task_clear_defensive_area", [](Py_Any p0) -> void { return AI::TASK_CLEAR_DEFENSIVE_AREA(p0.id); })
		.def_static("task_clear_look_at", [](Py_Ped playerPed) -> void { return AI::TASK_CLEAR_LOOK_AT(playerPed.id); })
		.def_static("task_climb", [](Py_Ped ped,BOOL p1) -> void { return AI::TASK_CLIMB(ped.id,p1); })
		.def_static("task_climb_ladder", [](Py_Ped p0,BOOL p1) -> void { return AI::TASK_CLIMB_LADDER(p0.id,p1); })
		.def_static("task_combat_hated_targets_around_ped", [](Py_Ped ped,float radius,int p2) -> void { return AI::TASK_COMBAT_HATED_TARGETS_AROUND_PED(ped.id,radius,p2); })
		.def_static("task_combat_hated_targets_around_ped_timed", [](Py_Any p0,float p1,Py_Any p2,Py_Any p3) -> void { return AI::TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(p0.id,p1,p2.id,p3.id); })
		.def_static("task_combat_hated_targets_in_area", [](Py_Ped ped,float x,float y,float z,float radius,Py_Any p5) -> void { return AI::TASK_COMBAT_HATED_TARGETS_IN_AREA(ped.id,x,y,z,radius,p5.id); })
		.def_static("task_combat_ped", [](Py_Ped ped,Py_Ped targetPed,int p2,int p3) -> void { return AI::TASK_COMBAT_PED(ped.id,targetPed.id,p2,p3); })
		.def_static("task_combat_ped_timed", [](Py_Any p0,Py_Ped ped,int p2,Py_Any p3) -> void { return AI::TASK_COMBAT_PED_TIMED(p0.id,ped.id,p2,p3.id); })
		.def_static("task_cower", [](Py_Ped ped,int duration) -> void { return AI::TASK_COWER(ped.id,duration); })
		.def_static("task_drive_by", [](Py_Ped p0,Py_Ped targetPed,Py_Any p2,float p3,float p4,float p5,float p6,Py_Any p7,BOOL p8,Py_Hash firingPattern) -> void { return AI::TASK_DRIVE_BY(p0.id,targetPed.id,p2.id,p3,p4,p5,p6,p7.id,p8,firingPattern.id); })
		.def_static("task_enter_vehicle", [](Py_Ped ped,Py_Vehicle vehicle,int timeout,int seat,float speed,int p5,Py_Any p6) -> void { return AI::TASK_ENTER_VEHICLE(ped.id,vehicle.id,timeout,seat,speed,p5,p6.id); })
		.def_static("task_everyone_leave_vehicle", [](Py_Vehicle p0) -> void { return AI::TASK_EVERYONE_LEAVE_VEHICLE(p0.id); })
		.def_static("task_exit_cover", [](Py_Any p0,Py_Any p1,float p2,float p3,float p4) -> void { return AI::TASK_EXIT_COVER(p0.id,p1.id,p2,p3,p4); })
		.def_static("task_extend_route", [](float x,float y,float z) -> void { return AI::TASK_EXTEND_ROUTE(x,y,z); })
		.def_static("task_flush_route", []() -> void { return AI::TASK_FLUSH_ROUTE(); })
		.def_static("task_follow_nav_mesh_to_coord", [](Py_Ped ped,float x,float y,float z,float speed,int timeout,float zeroFloat,int zeroInt,float zeroFloat2) -> void { return AI::TASK_FOLLOW_NAV_MESH_TO_COORD(ped.id,x,y,z,speed,timeout,zeroFloat,zeroInt,zeroFloat2); })
		.def_static("task_follow_nav_mesh_to_coord_advanced", [](Py_Any p0,float p1,float p2,float p3,float p4,Py_Any p5,float p6,Py_Any p7,float p8,float p9,float p10,float p11) -> void { return AI::TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(p0.id,p1,p2,p3,p4,p5.id,p6,p7.id,p8,p9,p10,p11); })
		.def_static("task_follow_point_route", [](Py_Any p0,float p1,Py_Any p2) -> void { return AI::TASK_FOLLOW_POINT_ROUTE(p0.id,p1,p2.id); })
		.def_static("task_follow_to_offset_of_entity", [](Py_Ped ped,Py_Entity entity,float offsetX,float offsetY,float offsetZ,float movementSpeed,int p6,float stoppingRange,BOOL p8) -> void { return AI::TASK_FOLLOW_TO_OFFSET_OF_ENTITY(ped.id,entity.id,offsetX,offsetY,offsetZ,movementSpeed,p6,stoppingRange,p8); })
		.def_static("task_force_motion_state", [](Py_Ped ped,Py_Hash state,BOOL p2) -> void { return AI::TASK_FORCE_MOTION_STATE(ped.id,state.id,p2); })
		.def_static("task_get_off_boat", [](Py_Ped ped,Py_Any p1) -> void { return AI::_TASK_GET_OFF_BOAT(ped.id,p1.id); })
		.def_static("task_go_straight_to_coord", [](Py_Ped ped,float x,float y,float z,float speed,int timeout,float targetHeading,float distanceToSlide) -> void { return AI::TASK_GO_STRAIGHT_TO_COORD(ped.id,x,y,z,speed,timeout,targetHeading,distanceToSlide); })
		.def_static("task_go_straight_to_coord_relative_to_entity", [](Py_Entity entity1,Py_Entity entity2,float p2,float p3,float p4,float p5,Py_Any p6) -> void { return AI::TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(entity1.id,entity2.id,p2,p3,p4,p5,p6.id); })
		.def_static("task_go_to_coord_and_aim_at_hated_entities_near_coord", [](Py_Ped ped,float gotoX,float gotoY,float gotoZ,float aimNearX,float aimNearY,float aimNearZ,float speed,BOOL shoot,float unknown1,float unknown2,BOOL unkTrue,int unknown3,BOOL heading,Py_Hash firingPattern) -> void { return AI::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(ped.id,gotoX,gotoY,gotoZ,aimNearX,aimNearY,aimNearZ,speed,shoot,unknown1,unknown2,unkTrue,unknown3,heading,firingPattern.id); })
		.def_static("task_go_to_coord_any_means", [](Py_Any p0,float p1,float p2,float p3,float p4,Py_Any p5,BOOL p6,Py_Any p7,float p8) -> void { return AI::TASK_GO_TO_COORD_ANY_MEANS(p0.id,p1,p2,p3,p4,p5.id,p6,p7.id,p8); })
		.def_static("task_go_to_coord_any_means_extra_params", [](Py_Ped p0,float x,float y,float z,Py_Any p4,Py_Any p5,Py_Any p6,Py_Any p7,Py_Any p8,Py_Any p9,Py_Any p10,Py_Any p11) -> void { return AI::TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(p0.id,x,y,z,p4.id,p5.id,p6.id,p7.id,p8.id,p9.id,p10.id,p11.id); })
		.def_static("task_go_to_coord_while_aiming_at_coord", [](Py_Ped ped,float x,float y,float z,float aimAtX,float aimAtY,float aimAtZ,float moveSpeed,BOOL p8,float p9,float p10,BOOL p11,Py_Any flags,BOOL p13,Py_Hash firingPattern) -> void { return AI::TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(ped.id,x,y,z,aimAtX,aimAtY,aimAtZ,moveSpeed,p8,p9,p10,p11,flags.id,p13,firingPattern.id); })
		.def_static("task_go_to_coord_while_aiming_at_entity", [](Py_Any p0,float p1,float p2,float p3,Py_Any p4,float p5,BOOL p6,float p7,float p8,BOOL p9,Py_Any p10,BOOL p11,Py_Any p12,Py_Any p13) -> void { return AI::TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(p0.id,p1,p2,p3,p4.id,p5,p6,p7,p8,p9,p10.id,p11,p12.id,p13.id); })
		.def_static("task_go_to_entity", [](Py_Entity entity,Py_Entity target,int duration,float distance,float speed,float p5,int p6) -> void { return AI::TASK_GO_TO_ENTITY(entity.id,target.id,duration,distance,speed,p5,p6); })
		.def_static("task_go_to_entity_while_aiming_at_coord", [](Py_Any p0,Py_Any p1,float p2,float p3,float p4,float p5,BOOL p6,float p7,float p8,BOOL p9,BOOL p10,Py_Any p11) -> void { return AI::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(p0.id,p1.id,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11.id); })
		.def_static("task_go_to_entity_while_aiming_at_entity", [](Py_Ped ped,Py_Entity entityToWalkTo,Py_Entity entityToAimAt,float speed,BOOL shootatEntity,float p5,float p6,BOOL p7,BOOL p8,Py_Hash firingPattern) -> void { return AI::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(ped.id,entityToWalkTo.id,entityToAimAt.id,speed,shootatEntity,p5,p6,p7,p8,firingPattern.id); })
		.def_static("task_goto_entity_aiming", [](Py_Ped ped,Py_Entity target,float distanceToStopAt,float StartAimingDist) -> void { return AI::TASK_GOTO_ENTITY_AIMING(ped.id,target.id,distanceToStopAt,StartAimingDist); })
		.def_static("task_goto_entity_offset", [](Py_Any p0,Py_Any p1,Py_Any p2,float p3,float p4,float p5,Py_Any p6) -> void { return AI::TASK_GOTO_ENTITY_OFFSET(p0.id,p1.id,p2.id,p3,p4,p5,p6.id); })
		.def_static("task_goto_entity_offset_xy", [](Py_Any p0,Py_Any p1,Py_Any p2,float p3,float p4,float p5,float p6,Py_Any p7) -> void { return AI::TASK_GOTO_ENTITY_OFFSET_XY(p0.id,p1.id,p2.id,p3,p4,p5,p6,p7.id); })
		.def_static("task_guard_assigned_defensive_area", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5,Py_Any p6) -> void { return AI::TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(p0.id,p1,p2,p3,p4,p5,p6.id); })
		.def_static("task_guard_current_position", [](Py_Ped p0,float p1,float p2,BOOL p3) -> void { return AI::TASK_GUARD_CURRENT_POSITION(p0.id,p1,p2,p3); })
		.def_static("task_guard_sphere_defensive_area", [](Py_Ped p0,float p1,float p2,float p3,float p4,float p5,Py_Any p6,float p7,float p8,float p9,float p10) -> void { return AI::TASK_GUARD_SPHERE_DEFENSIVE_AREA(p0.id,p1,p2,p3,p4,p5,p6.id,p7,p8,p9,p10); })
		.def_static("task_hands_up", [](Py_Ped ped,int duration,Py_Ped facingPed,Py_Any p3,Py_Any p4) -> void { return AI::TASK_HANDS_UP(ped.id,duration,facingPed.id,p3.id,p4.id); })
		.def_static("task_heli_chase", [](Py_Ped pilot,Py_Entity entityToFollow,float x,float y,float z) -> void { return AI::TASK_HELI_CHASE(pilot.id,entityToFollow.id,x,y,z); })
		.def_static("task_heli_mission", [](Py_Ped pilot,Py_Vehicle vehicle,Py_Any p2,Py_Ped pedToFollow,float posX,float posY,float posZ,int flag,float speed,float p9,float p10,int p11,int p12,float p13,int p14) -> void { return AI::TASK_HELI_MISSION(pilot.id,vehicle.id,p2.id,pedToFollow.id,posX,posY,posZ,flag,speed,p9,p10,p11,p12,p13,p14); })
		.def_static("task_jump", [](Py_Ped ped,BOOL p1) -> void { return AI::TASK_JUMP(ped.id,p1); })
		.def_static("task_leave_any_vehicle", [](Py_Ped ped,int p1,int p2) -> void { return AI::TASK_LEAVE_ANY_VEHICLE(ped.id,p1,p2); })
		.def_static("task_leave_vehicle", [](Py_Ped ped,Py_Vehicle vehicle,int flags) -> void { return AI::TASK_LEAVE_VEHICLE(ped.id,vehicle.id,flags); })
		.def_static("task_look_at_coord", [](Py_Entity entity,float x,float y,float z,float duration,Py_Any p5,Py_Any p6) -> void { return AI::TASK_LOOK_AT_COORD(entity.id,x,y,z,duration,p5.id,p6.id); })
		.def_static("task_look_at_entity", [](Py_Ped pedHandle,Py_Entity lookAt,int duration,int unknown1,int unknown2) -> void { return AI::TASK_LOOK_AT_ENTITY(pedHandle.id,lookAt.id,duration,unknown1,unknown2); })
		.def_static("task_open_vehicle_door", [](Py_Ped ped,Py_Vehicle vehicle,int timeOut,int doorIndex,float speed) -> void { return AI::TASK_OPEN_VEHICLE_DOOR(ped.id,vehicle.id,timeOut,doorIndex,speed); })
		.def_static("task_parachute", [](Py_Ped ped,BOOL p1) -> void { return AI::TASK_PARACHUTE(ped.id,p1); })
		.def_static("task_parachute_to_target", [](Py_Ped ped,float x,float y,float z) -> void { return AI::TASK_PARACHUTE_TO_TARGET(ped.id,x,y,z); })
		.def_static("task_patrol", [](Py_Ped ped,char* p1,Py_Any p2,BOOL p3,BOOL p4) -> void { return AI::TASK_PATROL(ped.id,p1,p2.id,p3,p4); })
		.def_static("task_pause", [](Py_Ped ped,int ms) -> void { return AI::TASK_PAUSE(ped.id,ms); })
		.def_static("task_ped_slide_to_coord", [](Py_Ped ped,float x,float y,float z,float heading,float p5) -> void { return AI::TASK_PED_SLIDE_TO_COORD(ped.id,x,y,z,heading,p5); })
		.def_static("task_ped_slide_to_coord_hdg_rate", [](Py_Ped ped,float x,float y,float z,float heading,float p5,float p6) -> void { return AI::TASK_PED_SLIDE_TO_COORD_HDG_RATE(ped.id,x,y,z,heading,p5,p6); })
		.def_static("task_perform_sequence", [](Py_Ped ped,Py_Object taskSequence) -> void { return AI::TASK_PERFORM_SEQUENCE(ped.id,taskSequence.id); })
		.def_static("task_perform_sequence_from_progress", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return AI::TASK_PERFORM_SEQUENCE_FROM_PROGRESS(p0.id,p1.id,p2.id,p3.id); })
		.def_static("task_plane_chase", [](Py_Ped pilot,Py_Entity entityToFollow,float x,float y,float z) -> void { return AI::TASK_PLANE_CHASE(pilot.id,entityToFollow.id,x,y,z); })
		.def_static("task_plane_land", [](Py_Ped pilot,Py_Vehicle plane,float runwayStartX,float runwayStartY,float runwayStartZ,float runwayEndX,float runwayEndY,float runwayEndZ) -> void { return AI::TASK_PLANE_LAND(pilot.id,plane.id,runwayStartX,runwayStartY,runwayStartZ,runwayEndX,runwayEndY,runwayEndZ); })
		.def_static("task_plane_mission", [](Py_Ped pilot,Py_Vehicle plane,Py_Vehicle targetVehicle,Py_Ped targetPed,float destinationX,float destinationY,float destinationZ,int p7,float physicsSpeed,float p9,float p10,float maxAltitude,float minAltitude) -> void { return AI::TASK_PLANE_MISSION(pilot.id,plane.id,targetVehicle.id,targetPed.id,destinationX,destinationY,destinationZ,p7,physicsSpeed,p9,p10,maxAltitude,minAltitude); })
		.def_static("task_plant_bomb", [](Py_Ped pedToGiveTask,float x,float y,float z,float degreeAngle) -> void { return AI::TASK_PLANT_BOMB(pedToGiveTask.id,x,y,z,degreeAngle); })
		.def_static("task_play_anim", [](Py_Ped ped,char* animDictionary,char* animationName,float speed,float speedMultiplier,int duration,int flag,float playbackRate,BOOL lockX,BOOL lockY,BOOL lockZ) -> void { return AI::TASK_PLAY_ANIM(ped.id,animDictionary,animationName,speed,speedMultiplier,duration,flag,playbackRate,lockX,lockY,lockZ); })
		.def_static("task_play_anim_advanced", [](Py_Ped ped,char* animDict,char* animName,float posX,float posY,float posZ,float rotX,float rotY,float rotZ,float speed,float speedMultiplier,int duration,Py_Any flag,float animTime,Py_Any p14,Py_Any p15) -> void { return AI::TASK_PLAY_ANIM_ADVANCED(ped.id,animDict,animName,posX,posY,posZ,rotX,rotY,rotZ,speed,speedMultiplier,duration,flag.id,animTime,p14.id,p15.id); })
		.def_static("task_put_ped_directly_into_cover", [](Py_Any p0,float p1,float p2,float p3,Py_Any p4,BOOL p5,float p6,BOOL p7,BOOL p8,Py_Any p9,BOOL p10) -> void { return AI::TASK_PUT_PED_DIRECTLY_INTO_COVER(p0.id,p1,p2,p3,p4.id,p5,p6,p7,p8,p9.id,p10); })
		.def_static("task_put_ped_directly_into_melee", [](Py_Ped ped,Py_Ped meleeTarget,float p2,float p3,float p4,BOOL p5) -> void { return AI::TASK_PUT_PED_DIRECTLY_INTO_MELEE(ped.id,meleeTarget.id,p2,p3,p4,p5); })
		.def_static("task_rappel_from_heli", [](Py_Ped ped,int p1) -> void { return AI::TASK_RAPPEL_FROM_HELI(ped.id,p1); })
		.def_static("task_react_and_flee_ped", [](Py_Ped ped,Py_Ped fleeTarget) -> void { return AI::TASK_REACT_AND_FLEE_PED(ped.id,fleeTarget.id); })
		.def_static("task_reload_weapon", [](Py_Ped ped,BOOL doReload) -> void { return AI::TASK_RELOAD_WEAPON(ped.id,doReload); })
		.def_static("task_seek_cover_from_ped", [](Py_Ped ped,Py_Ped target,int duration,BOOL p3) -> void { return AI::TASK_SEEK_COVER_FROM_PED(ped.id,target.id,duration,p3); })
		.def_static("task_seek_cover_from_pos", [](Py_Any p0,float p1,float p2,float p3,Py_Any p4,BOOL p5) -> void { return AI::TASK_SEEK_COVER_FROM_POS(p0.id,p1,p2,p3,p4.id,p5); })
		.def_static("task_seek_cover_to_coords", [](Py_Ped ped,float x1,float y1,float z1,float x2,float y2,float z2,Py_Any p7,BOOL p8) -> void { return AI::TASK_SEEK_COVER_TO_COORDS(ped.id,x1,y1,z1,x2,y2,z2,p7.id,p8); })
		.def_static("task_seek_cover_to_cover_point", [](Py_Any p0,Py_Any p1,float p2,float p3,float p4,Py_Any p5,BOOL p6) -> void { return AI::TASK_SEEK_COVER_TO_COVER_POINT(p0.id,p1.id,p2,p3,p4,p5.id,p6); })
		.def_static("task_set_blocking_of_non_temporary_events", [](Py_Ped ped,BOOL toggle) -> void { return AI::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped.id,toggle); })
		.def_static("task_set_decision_maker", [](Py_Ped p0,Py_Hash p1) -> void { return AI::TASK_SET_DECISION_MAKER(p0.id,p1.id); })
		.def_static("task_set_sphere_defensive_area", [](Py_Any p0,float p1,float p2,float p3,float p4) -> void { return AI::TASK_SET_SPHERE_DEFENSIVE_AREA(p0.id,p1,p2,p3,p4); })
		.def_static("task_shocking_event_react", [](Py_Ped ped,Py_Any event) -> void { return AI::TASK_SHOCKING_EVENT_REACT(ped.id,event.id); })
		.def_static("task_shoot_at_coord", [](Py_Ped ped,float x,float y,float z,int duration,Py_Hash firingPattern) -> void { return AI::TASK_SHOOT_AT_COORD(ped.id,x,y,z,duration,firingPattern.id); })
		.def_static("task_shoot_at_entity", [](Py_Entity entity,Py_Entity target,int duration,Py_Hash firingPattern) -> void { return AI::TASK_SHOOT_AT_ENTITY(entity.id,target.id,duration,firingPattern.id); })
		.def_static("task_shuffle_to_next_vehicle_seat", [](Py_Ped ped,Py_Vehicle vehicle) -> void { return AI::TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(ped.id,vehicle.id); })
		.def_static("task_sky_dive", [](Py_Ped ped) -> void { return AI::TASK_SKY_DIVE(ped.id); })
		.def_static("task_smart_flee_coord", [](Py_Any p0,float p1,float p2,float p3,float p4,Py_Any p5,BOOL p6,BOOL p7) -> void { return AI::TASK_SMART_FLEE_COORD(p0.id,p1,p2,p3,p4,p5.id,p6,p7); })
		.def_static("task_smart_flee_ped", [](Py_Ped ped,Py_Ped fleeTarget,float distance,Py_Any fleeTime,BOOL p4,BOOL p5) -> void { return AI::TASK_SMART_FLEE_PED(ped.id,fleeTarget.id,distance,fleeTime.id,p4,p5); })
		.def_static("task_stand_guard", [](Py_Ped ped,float x,float y,float z,float heading,char* scenarioName) -> void { return AI::TASK_STAND_GUARD(ped.id,x,y,z,heading,scenarioName); })
		.def_static("task_stand_still", [](Py_Ped ped,int time) -> void { return AI::TASK_STAND_STILL(ped.id,time); })
		.def_static("task_start_scenario_at_position", [](Py_Ped ped,char* scenarioName,float x,float y,float z,float heading,Py_Any p6,BOOL p7,BOOL p8) -> void { return AI::TASK_START_SCENARIO_AT_POSITION(ped.id,scenarioName,x,y,z,heading,p6.id,p7,p8); })
		.def_static("task_start_scenario_in_place", [](Py_Ped ped,char* scenarioName,int unkDelay,BOOL playEnterAnim) -> void { return AI::TASK_START_SCENARIO_IN_PLACE(ped.id,scenarioName,unkDelay,playEnterAnim); })
		.def_static("task_stay_in_cover", [](Py_Any p0) -> void { return AI::TASK_STAY_IN_COVER(p0.id); })
		.def_static("task_stealth_kill", [](Py_Ped killer,Py_Ped target,Py_Hash killType,float p3,BOOL p4) -> void { return AI::TASK_STEALTH_KILL(killer.id,target.id,killType.id,p3,p4); })
		.def_static("task_stop_phone_gesture_animation", [](Py_Any p0) -> void { return AI::_TASK_STOP_PHONE_GESTURE_ANIMATION(p0.id); })
		.def_static("task_swap_weapon", [](Py_Ped ped,BOOL p1) -> void { return AI::TASK_SWAP_WEAPON(ped.id,p1); })
		.def_static("task_sweep_aim_entity", [](Py_Ped ped,char* anim,char* p2,char* p3,char* p4,int p5,Py_Vehicle vehicle,float p7,float p8) -> void { return AI::TASK_SWEEP_AIM_ENTITY(ped.id,anim,p2,p3,p4,p5,vehicle.id,p7,p8); })
		.def_static("task_synchronized_scene", [](Py_Ped ped,Py_Any scene,char* animDictionary,char* animationName,float p4,float p5,Py_Any p6,Py_Any p7,float p8,Py_Any p9) -> void { return AI::TASK_SYNCHRONIZED_SCENE(ped.id,scene.id,animDictionary,animationName,p4,p5,p6.id,p7.id,p8,p9.id); })
		.def_static("task_throw_projectile", [](Py_Any p0,float x,float y,float z) -> void { return AI::TASK_THROW_PROJECTILE(p0.id,x,y,z); })
		.def_static("task_toggle_duck", [](BOOL p0,BOOL p1) -> void { return AI::TASK_TOGGLE_DUCK(p0,p1); })
		.def_static("task_turn_ped_to_face_coord", [](Py_Any p0,float p1,float p2,float p3,Py_Any p4) -> void { return AI::TASK_TURN_PED_TO_FACE_COORD(p0.id,p1,p2,p3,p4.id); })
		.def_static("task_turn_ped_to_face_entity", [](Py_Ped ped,Py_Entity entity,int duration) -> void { return AI::TASK_TURN_PED_TO_FACE_ENTITY(ped.id,entity.id,duration); })
		.def_static("task_use_mobile_phone", [](Py_Ped ped,int p1) -> void { return AI::TASK_USE_MOBILE_PHONE(ped.id,p1); })
		.def_static("task_use_mobile_phone_timed", [](Py_Ped ped,int duration) -> void { return AI::TASK_USE_MOBILE_PHONE_TIMED(ped.id,duration); })
		.def_static("task_use_nearest_scenario_chain_to_coord", [](Py_Any p0,float p1,float p2,float p3,float p4,Py_Any p5) -> void { return AI::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(p0.id,p1,p2,p3,p4,p5.id); })
		.def_static("task_use_nearest_scenario_chain_to_coord_warp", [](Py_Any p0,float p1,float p2,float p3,float p4,Py_Any p5) -> void { return AI::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(p0.id,p1,p2,p3,p4,p5.id); })
		.def_static("task_use_nearest_scenario_to_coord", [](Py_Any p0,float p1,float p2,float p3,float p4,Py_Any p5) -> void { return AI::TASK_USE_NEAREST_SCENARIO_TO_COORD(p0.id,p1,p2,p3,p4,p5.id); })
		.def_static("task_use_nearest_scenario_to_coord_warp", [](Py_Ped ped,float x,float y,float z,float radius,Py_Any p5) -> void { return AI::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(ped.id,x,y,z,radius,p5.id); })
		.def_static("task_vehicle_aim_at_coord", [](Py_Vehicle vehicle,float x,float y,float z) -> void { return AI::TASK_VEHICLE_AIM_AT_COORD(vehicle.id,x,y,z); })
		.def_static("task_vehicle_aim_at_ped", [](Py_Ped ped,Py_Ped target) -> void { return AI::TASK_VEHICLE_AIM_AT_PED(ped.id,target.id); })
		.def_static("task_vehicle_chase", [](Py_Ped driver,Py_Entity targetEnt) -> void { return AI::TASK_VEHICLE_CHASE(driver.id,targetEnt.id); })
		.def_static("task_vehicle_drive_to_coord", [](Py_Ped ped,Py_Vehicle vehicle,float x,float y,float z,float speed,Py_Any p6,Py_Hash vehicleModel,int drivingMode,float stopRange,float p10) -> void { return AI::TASK_VEHICLE_DRIVE_TO_COORD(ped.id,vehicle.id,x,y,z,speed,p6.id,vehicleModel.id,drivingMode,stopRange,p10); })
		.def_static("task_vehicle_drive_to_coord_longrange", [](Py_Ped ped,Py_Vehicle vehicle,float x,float y,float z,float speed,int driveMode,float stopRange) -> void { return AI::TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(ped.id,vehicle.id,x,y,z,speed,driveMode,stopRange); })
		.def_static("task_vehicle_drive_wander", [](Py_Ped ped,Py_Vehicle vehicle,float speed,int drivingStyle) -> void { return AI::TASK_VEHICLE_DRIVE_WANDER(ped.id,vehicle.id,speed,drivingStyle); })
		.def_static("task_vehicle_escort", [](Py_Ped ped,Py_Vehicle vehicle,Py_Vehicle targetVehicle,int p3,float speed,int drivingStyle,float minDistance,int p7,float noRoadsDistance) -> void { return AI::TASK_VEHICLE_ESCORT(ped.id,vehicle.id,targetVehicle.id,p3,speed,drivingStyle,minDistance,p7,noRoadsDistance); })
		.def_static("task_vehicle_follow", [](Py_Ped driver,Py_Vehicle vehicle,Py_Entity targetEntity,int drivingStyle,float speed,float minDistance) -> void { return AI::_TASK_VEHICLE_FOLLOW(driver.id,vehicle.id,targetEntity.id,drivingStyle,speed,minDistance); })
		.def_static("task_vehicle_goto_navmesh", [](Py_Ped ped,Py_Vehicle vehicle,float x,float y,float z,float speed,int behaviorFlag,float stoppingRange) -> void { return AI::TASK_VEHICLE_GOTO_NAVMESH(ped.id,vehicle.id,x,y,z,speed,behaviorFlag,stoppingRange); })
		.def_static("task_vehicle_heli_protect", [](Py_Ped pilot,Py_Vehicle vehicle,Py_Entity entityToFollow,float targetSpeed,int p4,float radius,int altitude,int p7) -> void { return AI::TASK_VEHICLE_HELI_PROTECT(pilot.id,vehicle.id,entityToFollow.id,targetSpeed,p4,radius,altitude,p7); })
		.def_static("task_vehicle_mission", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,float p4,Py_Any p5,float p6,float p7,BOOL p8) -> void { return AI::TASK_VEHICLE_MISSION(p0.id,p1.id,p2.id,p3.id,p4,p5.id,p6,p7,p8); })
		.def_static("task_vehicle_mission_coors_target", [](Py_Any p0,Py_Any p1,float p2,float p3,float p4,Py_Any p5,float p6,Py_Any p7,float p8,float p9,BOOL p10) -> void { return AI::TASK_VEHICLE_MISSION_COORS_TARGET(p0.id,p1.id,p2,p3,p4,p5.id,p6,p7.id,p8,p9,p10); })
		.def_static("task_vehicle_mission_ped_target", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,float p4,Py_Any p5,float p6,float p7,BOOL p8) -> void { return AI::TASK_VEHICLE_MISSION_PED_TARGET(p0.id,p1.id,p2.id,p3.id,p4,p5.id,p6,p7,p8); })
		.def_static("task_vehicle_park", [](Py_Ped ped,Py_Vehicle vehicle,float x,float y,float z,float heading,int mode,float radius,BOOL keepEngineOn) -> void { return AI::TASK_VEHICLE_PARK(ped.id,vehicle.id,x,y,z,heading,mode,radius,keepEngineOn); })
		.def_static("task_vehicle_play_anim", [](Py_Vehicle vehicle,char* animation_set,char* animation_name) -> void { return AI::TASK_VEHICLE_PLAY_ANIM(vehicle.id,animation_set,animation_name); })
		.def_static("task_vehicle_shoot_at_coord", [](Py_Vehicle vehicle,float x,float y,float z,float p4) -> void { return AI::TASK_VEHICLE_SHOOT_AT_COORD(vehicle.id,x,y,z,p4); })
		.def_static("task_vehicle_shoot_at_ped", [](Py_Ped ped,Py_Ped target,float p2) -> void { return AI::TASK_VEHICLE_SHOOT_AT_PED(ped.id,target.id,p2); })
		.def_static("task_vehicle_temp_action", [](Py_Ped driver,Py_Vehicle vehicle,int action,int time) -> void { return AI::TASK_VEHICLE_TEMP_ACTION(driver.id,vehicle.id,action,time); })
		.def_static("task_wander_in_area", [](Py_Ped ped,float x,float y,float z,float radius,float minimalLenght,float timeBetweenWalks) -> void { return AI::TASK_WANDER_IN_AREA(ped.id,x,y,z,radius,minimalLenght,timeBetweenWalks); })
		.def_static("task_wander_standard", [](Py_Ped ped,float p1,int p2) -> void { return AI::TASK_WANDER_STANDARD(ped.id,p1,p2); })
		.def_static("task_warp_ped_into_vehicle", [](Py_Ped ped,Py_Vehicle vehicle,int seat) -> void { return AI::TASK_WARP_PED_INTO_VEHICLE(ped.id,vehicle.id,seat); })
		.def_static("task_writhe", [](Py_Ped ped,Py_Ped target,int time,BOOL p3) -> void { return AI::TASK_WRITHE(ped.id,target.id,time,p3); })
		.def_static("uncuff_ped", [](Py_Ped ped) -> void { return AI::UNCUFF_PED(ped.id); })
		.def_static("update_task_aim_gun_scripted_target", [](Py_Ped p0,Py_Ped p1,float p2,float p3,float p4,BOOL p5) -> void { return AI::UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(p0.id,p1.id,p2,p3,p4,p5); })
		.def_static("update_task_hands_up_duration", [](Py_Ped ped,int duration) -> void { return AI::UPDATE_TASK_HANDS_UP_DURATION(ped.id,duration); })
		.def_static("update_task_sweep_aim_entity", [](Py_Ped ped,Py_Entity entity) -> void { return AI::UPDATE_TASK_SWEEP_AIM_ENTITY(ped.id,entity.id); })
		.def_static("update_task_sweep_aim_position", [](Py_Any p0,float p1,float p2,float p3) -> void { return AI::UPDATE_TASK_SWEEP_AIM_POSITION(p0.id,p1,p2,p3); })
		.def_static("vehicle_waypoint_playback_override_speed", [](Py_Any p0,float p1) -> void { return AI::VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0.id,p1); })
		.def_static("vehicle_waypoint_playback_pause", [](Py_Any p0) -> void { return AI::VEHICLE_WAYPOINT_PLAYBACK_PAUSE(p0.id); })
		.def_static("vehicle_waypoint_playback_resume", [](Py_Any p0) -> void { return AI::VEHICLE_WAYPOINT_PLAYBACK_RESUME(p0.id); })
		.def_static("vehicle_waypoint_playback_use_default_speed", [](Py_Any p0) -> void { return AI::VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0.id); })
		.def_static("waypoint_playback_get_is_paused", [](Py_Any p0) -> BOOL { return AI::WAYPOINT_PLAYBACK_GET_IS_PAUSED(p0.id); })
		.def_static("waypoint_playback_override_speed", [](Py_Any p0,float p1,BOOL p2) -> void { return AI::WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0.id,p1,p2); })
		.def_static("waypoint_playback_pause", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return AI::WAYPOINT_PLAYBACK_PAUSE(p0.id,p1,p2); })
		.def_static("waypoint_playback_resume", [](Py_Any p0,BOOL p1,Py_Any p2,Py_Any p3) -> void { return AI::WAYPOINT_PLAYBACK_RESUME(p0.id,p1,p2.id,p3.id); })
		.def_static("waypoint_playback_start_aiming_at_coord", [](Py_Any p0,float p1,float p2,float p3,BOOL p4) -> void { return AI::WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(p0.id,p1,p2,p3,p4); })
		.def_static("waypoint_playback_start_aiming_at_ped", [](Py_Any p0,Py_Any p1,BOOL p2) -> void { return AI::WAYPOINT_PLAYBACK_START_AIMING_AT_PED(p0.id,p1.id,p2); })
		.def_static("waypoint_playback_start_shooting_at_coord", [](Py_Any p0,float p1,float p2,float p3,BOOL p4,Py_Any p5) -> void { return AI::WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(p0.id,p1,p2,p3,p4,p5.id); })
		.def_static("waypoint_playback_stop_aiming_or_shooting", [](Py_Any p0) -> void { return AI::WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(p0.id); })
		.def_static("waypoint_playback_use_default_speed", [](Py_Any p0) -> void { return AI::WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0.id); })
		.def_static("waypoint_recording_get_coord", [](Py_Any p0,Py_Any p1,Py_Any p2) -> Py_Any { return AI::WAYPOINT_RECORDING_GET_COORD(p0.id,p1.id,p2.id); })
;
	custom(py_Ai);
	py::class_<Py_Gameplay> py_Gameplay(m, "Gameplay");
	py_Gameplay
		.def_static("absf", [](float value) -> float { return GAMEPLAY::ABSF(value); })
		.def_static("absi", [](int value) -> int { return GAMEPLAY::ABSI(value); })
		.def_static("acos", [](float p0) -> float { return GAMEPLAY::ACOS(p0); })
		.def_static("add_hospital_restart", [](float x,float y,float z,float p3,Py_Any p4) -> int { return GAMEPLAY::ADD_HOSPITAL_RESTART(x,y,z,p3,p4.id); })
		.def_static("add_police_restart", [](float p0,float p1,float p2,float p3,Py_Any p4) -> Py_Any { return GAMEPLAY::ADD_POLICE_RESTART(p0,p1,p2,p3,p4.id); })
		.def_static("add_stunt_jump", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,float p8,float p9,float p10,float p11,float p12,float p13,float p14,Py_Any p15,Py_Any p16) -> Py_Any { return GAMEPLAY::ADD_STUNT_JUMP(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15.id,p16.id); })
		.def_static("add_stunt_jump_angled", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,float p8,float p9,float p10,float p11,float p12,float p13,float p14,float p15,float p16,Py_Any p17,Py_Any p18) -> Py_Any { return GAMEPLAY::ADD_STUNT_JUMP_ANGLED(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17.id,p18.id); })
		.def_static("are_strings_equal", [](char* string1,char* string2) -> BOOL { return GAMEPLAY::ARE_STRINGS_EQUAL(string1,string2); })
		.def_static("asin", [](float p0) -> float { return GAMEPLAY::ASIN(p0); })
		.def_static("atan", [](float p0) -> float { return GAMEPLAY::ATAN(p0); })
		.def_static("atan2", [](float p0,float p1) -> float { return GAMEPLAY::ATAN2(p0,p1); })
		.def_static("begin_replay_stats", [](Py_Any p0,Py_Any p1) -> void { return GAMEPLAY::BEGIN_REPLAY_STATS(p0.id,p1.id); })
		.def_static("cancel_stunt_jump", []() -> void { return GAMEPLAY::CANCEL_STUNT_JUMP(); })
		.def_static("clear_angled_area_of_vehicles", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,BOOL p7,BOOL p8,BOOL p9,BOOL p10,BOOL p11) -> void { return GAMEPLAY::CLEAR_ANGLED_AREA_OF_VEHICLES(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11); })
		.def_static("clear_area", [](float X,float Y,float Z,float radius,BOOL p4,BOOL p5,BOOL p6,BOOL p7) -> void { return GAMEPLAY::CLEAR_AREA(X,Y,Z,radius,p4,p5,p6,p7); })
		.def_static("clear_area_of_cops", [](float x,float y,float z,float radius,BOOL unk) -> void { return GAMEPLAY::CLEAR_AREA_OF_COPS(x,y,z,radius,unk); })
		.def_static("clear_area_of_objects", [](float x,float y,float z,float radius,int flag) -> void { return GAMEPLAY::CLEAR_AREA_OF_OBJECTS(x,y,z,radius,flag); })
		.def_static("clear_area_of_peds", [](float x,float y,float z,float radius,BOOL unk) -> void { return GAMEPLAY::CLEAR_AREA_OF_PEDS(x,y,z,radius,unk); })
		.def_static("clear_area_of_projectiles", [](float x,float y,float z,float radius,BOOL unk) -> void { return GAMEPLAY::CLEAR_AREA_OF_PROJECTILES(x,y,z,radius,unk); })
		.def_static("clear_area_of_vehicles", [](float x,float y,float z,float radius,BOOL p4,BOOL p5,BOOL p6,BOOL p7,BOOL p8) -> void { return GAMEPLAY::CLEAR_AREA_OF_VEHICLES(x,y,z,radius,p4,p5,p6,p7,p8); })
		.def_static("clear_cloud_hat", []() -> void { return GAMEPLAY::_CLEAR_CLOUD_HAT(); })
		.def_static("clear_override_weather", []() -> void { return GAMEPLAY::CLEAR_OVERRIDE_WEATHER(); })
		.def_static("clear_replay_stats", []() -> void { return GAMEPLAY::CLEAR_REPLAY_STATS(); })
		.def_static("clear_weather_type_persist", []() -> void { return GAMEPLAY::CLEAR_WEATHER_TYPE_PERSIST(); })
		.def_static("compare_strings", [](char* str1,char* str2,BOOL matchCase,int maxLength) -> int { return GAMEPLAY::COMPARE_STRINGS(str1,str2,matchCase,maxLength); })
		.def_static("create_incident", [](Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6,Py_Any p7) -> Py_Any { return GAMEPLAY::CREATE_INCIDENT(p1.id,p2.id,p3.id,p4.id,p5.id,p6.id,p7.id); })
		.def_static("create_lightning_thunder", []() -> void { return GAMEPLAY::_CREATE_LIGHTNING_THUNDER(); })
		.def_static("delete_stunt_jump", [](Py_Any p0) -> void { return GAMEPLAY::DELETE_STUNT_JUMP(p0.id); })
		.def_static("disable_automatic_respawn", [](BOOL disableRespawn) -> void { return GAMEPLAY::_DISABLE_AUTOMATIC_RESPAWN(disableRespawn); })
		.def_static("disable_hospital_restart", [](int hospitalIndex,BOOL toggle) -> void { return GAMEPLAY::DISABLE_HOSPITAL_RESTART(hospitalIndex,toggle); })
		.def_static("disable_police_restart", [](int policeIndex,BOOL toggle) -> void { return GAMEPLAY::DISABLE_POLICE_RESTART(policeIndex,toggle); })
		.def_static("disable_stunt_jump_set", [](Py_Any p0) -> void { return GAMEPLAY::DISABLE_STUNT_JUMP_SET(p0.id); })
		.def_static("display_onscreen_keyboard", [](BOOL p0,char* windowTitle,char* p2,char* defaultText,char* defaultConcat1,char* defaultConcat2,char* defaultConcat3,int maxInputLength) -> void { return GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(p0,windowTitle,p2,defaultText,defaultConcat1,defaultConcat2,defaultConcat3,maxInputLength); })
		.def_static("do_auto_save", []() -> void { return GAMEPLAY::DO_AUTO_SAVE(); })
		.def_static("enable_mp_dlc_maps", [](BOOL toggle) -> void { return GAMEPLAY::_ENABLE_MP_DLC_MAPS(toggle); })
		.def_static("enable_stunt_jump_set", [](Py_Any p0) -> void { return GAMEPLAY::ENABLE_STUNT_JUMP_SET(p0.id); })
		.def_static("enable_tennis_mode", [](Py_Ped ped,BOOL toggle,BOOL p2) -> void { return GAMEPLAY::ENABLE_TENNIS_MODE(ped.id,toggle,p2); })
		.def_static("end_replay_stats", []() -> void { return GAMEPLAY::END_REPLAY_STATS(); })
		.def_static("force_social_club_update", []() -> void { return GAMEPLAY::_FORCE_SOCIAL_CLUB_UPDATE(); })
		.def_static("get_allocated_stack_size", []() -> int { return GAMEPLAY::GET_ALLOCATED_STACK_SIZE(); })
		.def_static("get_angle_between_2d_vectors", [](float x1,float y1,float x2,float y2) -> float { return GAMEPLAY::GET_ANGLE_BETWEEN_2D_VECTORS(x1,y1,x2,y2); })
		.def_static("get_bits_in_range", [](int var,int rangeStart,int rangeEnd) -> Py_Any { return GAMEPLAY::GET_BITS_IN_RANGE(var,rangeStart,rangeEnd); })
		.def_static("get_current_weather_type", []() -> Py_Hash { return GAMEPLAY::_GET_CURRENT_WEATHER_TYPE(); })
		.def_static("get_distance_between_coords", [](float x1,float y1,float z1,float x2,float y2,float z2,BOOL p6) -> float { return GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(x1,y1,z1,x2,y2,z2,p6); })
		.def_static("get_frame_count", []() -> int { return GAMEPLAY::GET_FRAME_COUNT(); })
		.def_static("get_frame_time", []() -> float { return GAMEPLAY::GET_FRAME_TIME(); })
		.def_static("get_free_stack_slots_count", [](int stackSize) -> int { return GAMEPLAY::_GET_FREE_STACK_SLOTS_COUNT(stackSize); })
		.def_static("get_game_timer", []() -> Py_Any { return GAMEPLAY::GET_GAME_TIMER(); })
		.def_static("get_hash_key", [](char* value) -> Py_Hash { return GAMEPLAY::GET_HASH_KEY(value); })
		.def_static("get_heading_from_vector_2d", [](float dx,float dy) -> float { return GAMEPLAY::GET_HEADING_FROM_VECTOR_2D(dx,dy); })
		.def_static("get_index_of_current_level", []() -> int { return GAMEPLAY::GET_INDEX_OF_CURRENT_LEVEL(); })
		.def_static("get_mission_flag", []() -> BOOL { return GAMEPLAY::GET_MISSION_FLAG(); })
		.def_static("get_next_weather_type", []() -> Py_Hash { return GAMEPLAY::_GET_NEXT_WEATHER_TYPE(); })
		.def_static("get_onscreen_keyboard_result", []() -> char* { return GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT(); })
		.def_static("get_profile_setting", [](int profileSetting) -> int { return GAMEPLAY::GET_PROFILE_SETTING(profileSetting); })
		.def_static("get_rain_level", []() -> Py_Any { return GAMEPLAY::GET_RAIN_LEVEL(); })
		.def_static("get_random_event_flag", []() -> Py_Any { return GAMEPLAY::GET_RANDOM_EVENT_FLAG(); })
		.def_static("get_random_float_in_range", [](float startRange,float endRange) -> float { return GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(startRange,endRange); })
		.def_static("get_random_int_in_range", [](int startRange,int endRange) -> int { return GAMEPLAY::GET_RANDOM_INT_IN_RANGE(startRange,endRange); })
		.def_static("get_snow_level", []() -> Py_Any { return GAMEPLAY::GET_SNOW_LEVEL(); })
		.def_static("get_wind_direction", []() -> Vector3 { return GAMEPLAY::GET_WIND_DIRECTION(); })
		.def_static("get_wind_speed", []() -> float { return GAMEPLAY::GET_WIND_SPEED(); })
		.def_static("has_bullet_impacted_in_area", [](float p0,float p1,float p2,float p3,BOOL p4,BOOL p5) -> BOOL { return GAMEPLAY::HAS_BULLET_IMPACTED_IN_AREA(p0,p1,p2,p3,p4,p5); })
		.def_static("has_bullet_impacted_in_box", [](float p0,float p1,float p2,float p3,float p4,float p5,BOOL p6,BOOL p7) -> BOOL { return GAMEPLAY::HAS_BULLET_IMPACTED_IN_BOX(p0,p1,p2,p3,p4,p5,p6,p7); })
		.def_static("ignore_next_restart", [](BOOL toggle) -> void { return GAMEPLAY::IGNORE_NEXT_RESTART(toggle); })
		.def_static("is_area_occupied", [](float p0,float p1,float p2,float p3,float p4,float p5,BOOL p6,BOOL p7,BOOL p8,BOOL p9,BOOL p10,Py_Any p11,BOOL p12) -> BOOL { return GAMEPLAY::IS_AREA_OCCUPIED(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11.id,p12); })
		.def_static("is_aussie_version", []() -> BOOL { return GAMEPLAY::IS_AUSSIE_VERSION(); })
		.def_static("is_auto_save_in_progress", []() -> BOOL { return GAMEPLAY::IS_AUTO_SAVE_IN_PROGRESS(); })
		.def_static("is_bit_set", [](int value,int bit) -> BOOL { return GAMEPLAY::IS_BIT_SET(value,bit); })
		.def_static("is_bullet_in_angled_area", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,BOOL p7) -> BOOL { return GAMEPLAY::IS_BULLET_IN_ANGLED_AREA(p0,p1,p2,p3,p4,p5,p6,p7); })
		.def_static("is_bullet_in_area", [](float p0,float p1,float p2,float p3,BOOL p4) -> BOOL { return GAMEPLAY::IS_BULLET_IN_AREA(p0,p1,p2,p3,p4); })
		.def_static("is_bullet_in_box", [](float p0,float p1,float p2,float p3,float p4,float p5,BOOL p6) -> BOOL { return GAMEPLAY::IS_BULLET_IN_BOX(p0,p1,p2,p3,p4,p5,p6); })
		.def_static("is_durango_version", []() -> BOOL { return GAMEPLAY::IS_DURANGO_VERSION(); })
		.def_static("is_frontend_fading", []() -> BOOL { return GAMEPLAY::IS_FRONTEND_FADING(); })
		.def_static("is_incident_valid", [](Py_Any p0) -> BOOL { return GAMEPLAY::IS_INCIDENT_VALID(p0.id); })
		.def_static("is_memory_card_in_use", []() -> BOOL { return GAMEPLAY::IS_MEMORY_CARD_IN_USE(); })
		.def_static("is_minigame_in_progress", []() -> BOOL { return GAMEPLAY::IS_MINIGAME_IN_PROGRESS(); })
		.def_static("is_next_weather_type", [](char* weatherType) -> BOOL { return GAMEPLAY::IS_NEXT_WEATHER_TYPE(weatherType); })
		.def_static("is_orbis_version", []() -> BOOL { return GAMEPLAY::IS_ORBIS_VERSION(); })
		.def_static("is_pc_version", []() -> BOOL { return GAMEPLAY::IS_PC_VERSION(); })
		.def_static("is_point_obscured_by_a_mission_entity", [](float p0,float p1,float p2,float p3,float p4,float p5,Py_Any p6) -> BOOL { return GAMEPLAY::IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(p0,p1,p2,p3,p4,p5,p6.id); })
		.def_static("is_position_occupied", [](float p0,float p1,float p2,float p3,BOOL p4,BOOL p5,BOOL p6,BOOL p7,BOOL p8,Py_Any p9,BOOL p10) -> BOOL { return GAMEPLAY::IS_POSITION_OCCUPIED(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9.id,p10); })
		.def_static("is_prev_weather_type", [](char* weatherType) -> BOOL { return GAMEPLAY::IS_PREV_WEATHER_TYPE(weatherType); })
		.def_static("is_projectile_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,BOOL unknown) -> BOOL { return GAMEPLAY::IS_PROJECTILE_IN_AREA(x1,y1,z1,x2,y2,z2,unknown); })
		.def_static("is_projectile_type_in_angled_area", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,Py_Any p7,BOOL p8) -> BOOL { return GAMEPLAY::IS_PROJECTILE_TYPE_IN_ANGLED_AREA(p0,p1,p2,p3,p4,p5,p6,p7.id,p8); })
		.def_static("is_projectile_type_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,int type,BOOL p7) -> BOOL { return GAMEPLAY::IS_PROJECTILE_TYPE_IN_AREA(x1,y1,z1,x2,y2,z2,type,p7); })
		.def_static("is_ps3_version", []() -> BOOL { return GAMEPLAY::IS_PS3_VERSION(); })
		.def_static("is_sniper_bullet_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2) -> BOOL { return GAMEPLAY::IS_SNIPER_BULLET_IN_AREA(x1,y1,z1,x2,y2,z2); })
		.def_static("is_sniper_inverted", []() -> BOOL { return GAMEPLAY::IS_SNIPER_INVERTED(); })
		.def_static("is_string_null", [](char* string) -> BOOL { return GAMEPLAY::IS_STRING_NULL(string); })
		.def_static("is_string_null_or_empty", [](char* string) -> BOOL { return GAMEPLAY::IS_STRING_NULL_OR_EMPTY(string); })
		.def_static("is_stunt_jump_in_progress", []() -> BOOL { return GAMEPLAY::IS_STUNT_JUMP_IN_PROGRESS(); })
		.def_static("is_tennis_mode", [](Py_Ped ped) -> BOOL { return GAMEPLAY::IS_TENNIS_MODE(ped.id); })
		.def_static("is_this_a_minigame_script", []() -> BOOL { return GAMEPLAY::IS_THIS_A_MINIGAME_SCRIPT(); })
		.def_static("is_xbox360_version", []() -> BOOL { return GAMEPLAY::IS_XBOX360_VERSION(); })
		.def_static("network_set_script_is_safe_for_network_game", []() -> void { return GAMEPLAY::NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME(); })
		.def_static("override_save_house", [](BOOL p0,float p1,float p2,float p3,float p4,BOOL p5,float p6,float p7) -> BOOL { return GAMEPLAY::OVERRIDE_SAVE_HOUSE(p0,p1,p2,p3,p4,p5,p6,p7); })
		.def_static("populate_now", []() -> void { return GAMEPLAY::POPULATE_NOW(); })
		.def_static("remove_dispatch_spawn_blocking_area", [](Py_Any p0) -> void { return GAMEPLAY::REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(p0.id); })
		.def_static("reset_dispatch_ideal_spawn_distance", []() -> void { return GAMEPLAY::RESET_DISPATCH_IDEAL_SPAWN_DISTANCE(); })
		.def_static("reset_dispatch_spawn_blocking_areas", []() -> void { return GAMEPLAY::RESET_DISPATCH_SPAWN_BLOCKING_AREAS(); })
		.def_static("reset_localplayer_state", []() -> void { return GAMEPLAY::_RESET_LOCALPLAYER_STATE(); })
		.def_static("set_cloud_hat_transition", [](char* type,float transitionTime) -> void { return GAMEPLAY::_SET_CLOUD_HAT_TRANSITION(type,transitionTime); })
		.def_static("set_credits_active", [](BOOL toggle) -> void { return GAMEPLAY::SET_CREDITS_ACTIVE(toggle); })
		.def_static("set_dispatch_ideal_spawn_distance", [](float p0) -> void { return GAMEPLAY::SET_DISPATCH_IDEAL_SPAWN_DISTANCE(p0); })
		.def_static("set_dispatch_time_between_spawn_attempts", [](Py_Any p0,float p1) -> void { return GAMEPLAY::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0.id,p1); })
		.def_static("set_dispatch_time_between_spawn_attempts_multiplier", [](Py_Any p0,float p1) -> void { return GAMEPLAY::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(p0.id,p1); })
		.def_static("set_explosive_ammo_this_frame", [](Py_Player player) -> void { return GAMEPLAY::SET_EXPLOSIVE_AMMO_THIS_FRAME(player.id); })
		.def_static("set_explosive_melee_this_frame", [](Py_Player player) -> void { return GAMEPLAY::SET_EXPLOSIVE_MELEE_THIS_FRAME(player.id); })
		.def_static("set_fade_in_after_death_arrest", [](BOOL toggle) -> void { return GAMEPLAY::SET_FADE_IN_AFTER_DEATH_ARREST(toggle); })
		.def_static("set_fade_in_after_load", [](BOOL toggle) -> void { return GAMEPLAY::SET_FADE_IN_AFTER_LOAD(toggle); })
		.def_static("set_fade_out_after_arrest", [](BOOL toggle) -> void { return GAMEPLAY::SET_FADE_OUT_AFTER_ARREST(toggle); })
		.def_static("set_fade_out_after_death", [](BOOL toggle) -> void { return GAMEPLAY::SET_FADE_OUT_AFTER_DEATH(toggle); })
		.def_static("set_fake_wanted_level", [](int fakeWantedLevel) -> void { return GAMEPLAY::SET_FAKE_WANTED_LEVEL(fakeWantedLevel); })
		.def_static("set_fire_ammo_this_frame", [](Py_Player player) -> void { return GAMEPLAY::SET_FIRE_AMMO_THIS_FRAME(player.id); })
		.def_static("set_game_paused", [](BOOL toggle) -> void { return GAMEPLAY::SET_GAME_PAUSED(toggle); })
		.def_static("set_gravity_level", [](int level) -> void { return GAMEPLAY::SET_GRAVITY_LEVEL(level); })
		.def_static("set_minigame_in_progress", [](BOOL toggle) -> void { return GAMEPLAY::SET_MINIGAME_IN_PROGRESS(toggle); })
		.def_static("set_mission_flag", [](BOOL toggle) -> void { return GAMEPLAY::SET_MISSION_FLAG(toggle); })
		.def_static("set_override_weather", [](char* weatherType) -> void { return GAMEPLAY::SET_OVERRIDE_WEATHER(weatherType); })
		.def_static("set_rain_fx_intensity", [](float intensity) -> void { return GAMEPLAY::_SET_RAIN_FX_INTENSITY(intensity); })
		.def_static("set_random_event_flag", [](BOOL p0) -> void { return GAMEPLAY::SET_RANDOM_EVENT_FLAG(p0); })
		.def_static("set_random_seed", [](int time) -> void { return GAMEPLAY::SET_RANDOM_SEED(time); })
		.def_static("set_random_weather_type", []() -> void { return GAMEPLAY::SET_RANDOM_WEATHER_TYPE(); })
		.def_static("set_save_house", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return GAMEPLAY::SET_SAVE_HOUSE(p0.id,p1,p2); })
		.def_static("set_save_menu_active", [](BOOL p0) -> void { return GAMEPLAY::SET_SAVE_MENU_ACTIVE(p0); })
		.def_static("set_super_jump_this_frame", [](Py_Player player) -> void { return GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(player.id); })
		.def_static("set_this_script_can_be_paused", [](BOOL toggle) -> void { return GAMEPLAY::SET_THIS_SCRIPT_CAN_BE_PAUSED(toggle); })
		.def_static("set_this_script_can_remove_blips_created_by_any_script", [](BOOL toggle) -> void { return GAMEPLAY::SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(toggle); })
		.def_static("set_time_scale", [](float time) -> void { return GAMEPLAY::SET_TIME_SCALE(time); })
		.def_static("set_unk_map_flag", [](int flag) -> void { return GAMEPLAY::_SET_UNK_MAP_FLAG(flag); })
		.def_static("set_weather_type_now", [](char* weatherType) -> void { return GAMEPLAY::SET_WEATHER_TYPE_NOW(weatherType); })
		.def_static("set_weather_type_now_persist", [](char* weatherType) -> void { return GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST(weatherType); })
		.def_static("set_weather_type_over_time", [](char* weatherType,float time) -> void { return GAMEPLAY::_SET_WEATHER_TYPE_OVER_TIME(weatherType,time); })
		.def_static("set_weather_type_persist", [](char* weatherType) -> void { return GAMEPLAY::SET_WEATHER_TYPE_PERSIST(weatherType); })
		.def_static("set_weather_type_transition", [](Py_Hash sourceWeather,Py_Hash targetWeather,float transitionTime) -> void { return GAMEPLAY::_SET_WEATHER_TYPE_TRANSITION(sourceWeather.id,targetWeather.id,transitionTime); })
		.def_static("set_wind", [](float p0) -> void { return GAMEPLAY::SET_WIND(p0); })
		.def_static("set_wind_direction", [](float direction) -> void { return GAMEPLAY::SET_WIND_DIRECTION(direction); })
		.def_static("set_wind_speed", [](float speed) -> void { return GAMEPLAY::SET_WIND_SPEED(speed); })
		.def_static("shoot_single_bullet_between_coords", [](float x1,float y1,float z1,float x2,float y2,float z2,int damage,BOOL p7,Py_Hash weaponHash,Py_Ped ownerPed,BOOL isAudible,BOOL isVisible,float speed) -> void { return GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x1,y1,z1,x2,y2,z2,damage,p7,weaponHash.id,ownerPed.id,isAudible,isVisible,speed); })
		.def_static("stop_save_array", []() -> void { return GAMEPLAY::STOP_SAVE_ARRAY(); })
		.def_static("stop_save_data", []() -> void { return GAMEPLAY::STOP_SAVE_DATA(); })
		.def_static("stop_save_struct", []() -> void { return GAMEPLAY::STOP_SAVE_STRUCT(); })
		.def_static("tan", [](float degrees) -> float { return GAMEPLAY::TAN(degrees); })
		.def_static("terminate_all_scripts_with_this_name", [](char* scriptName) -> void { return GAMEPLAY::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(scriptName); })
		.def_static("update_onscreen_keyboard", []() -> int { return GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD(); })
		.def_static("using_mission_creator", [](BOOL toggle) -> void { return GAMEPLAY::USING_MISSION_CREATOR(toggle); })
;
	custom(py_Gameplay);
	py::class_<Py_Audio> py_Audio(m, "Audio");
	py_Audio
		.def_static("add_ped_to_conversation", [](Py_Any p0,Py_Any p1,char* p2) -> void { return AUDIO::ADD_PED_TO_CONVERSATION(p0.id,p1.id,p2); })
		.def_static("blip_siren", [](Py_Vehicle vehicle) -> void { return AUDIO::BLIP_SIREN(vehicle.id); })
		.def_static("cancel_music_event", [](char* eventName) -> BOOL { return AUDIO::CANCEL_MUSIC_EVENT(eventName); })
		.def_static("clear_all_broken_glass", []() -> void { return AUDIO::CLEAR_ALL_BROKEN_GLASS(); })
		.def_static("create_new_scripted_conversation", []() -> void { return AUDIO::CREATE_NEW_SCRIPTED_CONVERSATION(); })
		.def_static("disable_ped_pain_audio", [](Py_Ped ped,BOOL toggle) -> void { return AUDIO::DISABLE_PED_PAIN_AUDIO(ped.id,toggle); })
		.def_static("find_radio_station_index", [](int station) -> Py_Any { return AUDIO::FIND_RADIO_STATION_INDEX(station); })
		.def_static("freeze_radio_station", [](char* radioStation) -> void { return AUDIO::FREEZE_RADIO_STATION(radioStation); })
		.def_static("get_audible_music_track_text_id", []() -> int { return AUDIO::GET_AUDIBLE_MUSIC_TRACK_TEXT_ID(); })
		.def_static("get_current_scripted_conversation_line", []() -> Py_Any { return AUDIO::GET_CURRENT_SCRIPTED_CONVERSATION_LINE(); })
		.def_static("get_music_playtime", []() -> Py_Any { return AUDIO::GET_MUSIC_PLAYTIME(); })
		.def_static("get_network_id_from_sound_id", [](int soundId) -> Py_Any { return AUDIO::GET_NETWORK_ID_FROM_SOUND_ID(soundId); })
		.def_static("get_number_of_passenger_voice_variations", [](Py_Any p0) -> Py_Any { return AUDIO::GET_NUMBER_OF_PASSENGER_VOICE_VARIATIONS(p0.id); })
		.def_static("get_player_radio_station_genre", []() -> Py_Any { return AUDIO::GET_PLAYER_RADIO_STATION_GENRE(); })
		.def_static("get_player_radio_station_index", []() -> int { return AUDIO::GET_PLAYER_RADIO_STATION_INDEX(); })
		.def_static("get_player_radio_station_name", []() -> char* { return AUDIO::GET_PLAYER_RADIO_STATION_NAME(); })
		.def_static("get_radio_station_name", [](int radioStation) -> char* { return AUDIO::GET_RADIO_STATION_NAME(radioStation); })
		.def_static("get_sound_id", []() -> int { return AUDIO::GET_SOUND_ID(); })
		.def_static("get_stream_play_time", []() -> Py_Any { return AUDIO::GET_STREAM_PLAY_TIME(); })
		.def_static("get_vehicle_default_horn", [](Py_Vehicle veh) -> Py_Hash { return AUDIO::GET_VEHICLE_DEFAULT_HORN(veh.id); })
		.def_static("has_sound_finished", [](int soundId) -> BOOL { return AUDIO::HAS_SOUND_FINISHED(soundId); })
		.def_static("hint_ambient_bank", [](Py_Any p0,Py_Any p1) -> Py_Any { return AUDIO::HINT_AMBIENT_AUDIO_BANK(p0.id,p1.id); })
		.def_static("hint_script_bank", [](Py_Any p0,Py_Any p1) -> Py_Any { return AUDIO::HINT_SCRIPT_AUDIO_BANK(p0.id,p1.id); })
		.def_static("is_alarm_playing", [](char* alarmName) -> BOOL { return AUDIO::IS_ALARM_PLAYING(alarmName); })
		.def_static("is_ambient_speech_disabled", [](Py_Ped ped) -> BOOL { return AUDIO::IS_AMBIENT_SPEECH_DISABLED(ped.id); })
		.def_static("is_ambient_speech_playing", [](Py_Ped p0) -> BOOL { return AUDIO::IS_AMBIENT_SPEECH_PLAYING(p0.id); })
		.def_static("is_any_speech_playing", [](Py_Ped ped) -> BOOL { return AUDIO::IS_ANY_SPEECH_PLAYING(ped.id); })
		.def_static("is_game_in_control_of_music", []() -> BOOL { return AUDIO::IS_GAME_IN_CONTROL_OF_MUSIC(); })
		.def_static("is_horn_active", [](Py_Vehicle vehicle) -> BOOL { return AUDIO::IS_HORN_ACTIVE(vehicle.id); })
		.def_static("is_mission_complete_playing", []() -> BOOL { return AUDIO::IS_MISSION_COMPLETE_PLAYING(); })
		.def_static("is_mobile_phone_call_ongoing", []() -> BOOL { return AUDIO::IS_MOBILE_PHONE_CALL_ONGOING(); })
		.def_static("is_mobile_phone_radio_active", []() -> BOOL { return AUDIO::IS_MOBILE_PHONE_RADIO_ACTIVE(); })
		.def_static("is_ped_in_current_conversation", [](Py_Any p0) -> BOOL { return AUDIO::IS_PED_IN_CURRENT_CONVERSATION(p0.id); })
		.def_static("is_ped_ringtone_playing", [](Py_Any p0) -> BOOL { return AUDIO::IS_PED_RINGTONE_PLAYING(p0.id); })
		.def_static("is_radio_retuning", []() -> BOOL { return AUDIO::IS_RADIO_RETUNING(); })
		.def_static("is_scene_active", [](char* scene) -> BOOL { return AUDIO::IS_AUDIO_SCENE_ACTIVE(scene); })
		.def_static("is_scripted_conversation_loaded", []() -> BOOL { return AUDIO::IS_SCRIPTED_CONVERSATION_LOADED(); })
		.def_static("is_scripted_conversation_ongoing", []() -> BOOL { return AUDIO::IS_SCRIPTED_CONVERSATION_ONGOING(); })
		.def_static("is_scripted_music_playing", []() -> Py_Any { return AUDIO::AUDIO_IS_SCRIPTED_MUSIC_PLAYING(); })
		.def_static("is_scripted_speech_playing", [](Py_Any p0) -> BOOL { return AUDIO::IS_SCRIPTED_SPEECH_PLAYING(p0.id); })
		.def_static("is_stream_playing", []() -> BOOL { return AUDIO::IS_STREAM_PLAYING(); })
		.def_static("is_vehicle_radio_loud", [](Py_Vehicle vehicle) -> BOOL { return AUDIO::_IS_VEHICLE_RADIO_LOUD(vehicle.id); })
		.def_static("load_stream", [](char* streamName,char* soundSet) -> BOOL { return AUDIO::LOAD_STREAM(streamName,soundSet); })
		.def_static("load_stream_with_start_offset", [](char* streamName,int startOffset,char* soundSet) -> BOOL { return AUDIO::LOAD_STREAM_WITH_START_OFFSET(streamName,startOffset,soundSet); })
		.def_static("max_radio_station_index", []() -> int { return AUDIO::_MAX_RADIO_STATION_INDEX(); })
		.def_static("override_veh_horn", [](Py_Vehicle vehicle,BOOL mute,int p2) -> void { return AUDIO::OVERRIDE_VEH_HORN(vehicle.id,mute,p2); })
		.def_static("pause_scripted_conversation", [](BOOL p0) -> void { return AUDIO::PAUSE_SCRIPTED_CONVERSATION(p0); })
		.def_static("play_ambient_speech1", [](Py_Ped ped,char* speechName,char* speechParam) -> void { return AUDIO::_PLAY_AMBIENT_SPEECH1(ped.id,speechName,speechParam); })
		.def_static("play_ambient_speech2", [](Py_Ped ped,char* speechName,char* speechParam) -> void { return AUDIO::_PLAY_AMBIENT_SPEECH2(ped.id,speechName,speechParam); })
		.def_static("play_ambient_speech_with_voice", [](Py_Ped p0,char* speechName,char* voiceName,char* speechParam,BOOL p4) -> void { return AUDIO::_PLAY_AMBIENT_SPEECH_WITH_VOICE(p0.id,speechName,voiceName,speechParam,p4); })
		.def_static("play_end_credits_music", [](BOOL p0) -> void { return AUDIO::PLAY_END_CREDITS_MUSIC(p0); })
		.def_static("play_mission_complete_audio", [](char* audioName) -> void { return AUDIO::PLAY_MISSION_COMPLETE_AUDIO(audioName); })
		.def_static("play_pain", [](int painID,float p1,int p2) -> void { return AUDIO::PLAY_PAIN(painID,p1,p2); })
		.def_static("play_ped_ringtone", [](char* ringtoneName,Py_Ped ped,BOOL p2) -> void { return AUDIO::PLAY_PED_RINGTONE(ringtoneName,ped.id,p2); })
		.def_static("play_police_report", [](char* name,float p1) -> Py_Any { return AUDIO::PLAY_POLICE_REPORT(name,p1); })
		.def_static("play_sound", [](int soundId,char* soundName,char* setName,BOOL p3,Py_Any p4,BOOL p5) -> void { return AUDIO::PLAY_SOUND(soundId,soundName,setName,p3,p4.id,p5); })
		.def_static("play_sound_from_coord", [](int soundId,char* soundName,float x,float y,float z,char* setName,BOOL p6,Py_Any p7,BOOL p8) -> void { return AUDIO::PLAY_SOUND_FROM_COORD(soundId,soundName,x,y,z,setName,p6,p7.id,p8); })
		.def_static("play_sound_from_entity", [](int soundId,char* soundName,Py_Entity entity,char* setName,BOOL p4,Py_Any p5) -> void { return AUDIO::PLAY_SOUND_FROM_ENTITY(soundId,soundName,entity.id,setName,p4,p5.id); })
		.def_static("play_sound_frontend", [](int soundId,char* soundName,char* setName,BOOL p3) -> void { return AUDIO::PLAY_SOUND_FRONTEND(soundId,soundName,setName,p3); })
		.def_static("play_stream_from_object", [](Py_Object object) -> void { return AUDIO::PLAY_STREAM_FROM_OBJECT(object.id); })
		.def_static("play_stream_from_vehicle", [](Py_Vehicle vehicle) -> void { return AUDIO::PLAY_STREAM_FROM_VEHICLE(vehicle.id); })
		.def_static("play_stream_frontend", []() -> void { return AUDIO::PLAY_STREAM_FRONTEND(); })
		.def_static("play_synchronized_event", [](Py_Any p0) -> BOOL { return AUDIO::PLAY_SYNCHRONIZED_AUDIO_EVENT(p0.id); })
		.def_static("play_vehicle_door_close_sound", [](Py_Vehicle vehicle,Py_Any p1) -> void { return AUDIO::PLAY_VEHICLE_DOOR_CLOSE_SOUND(vehicle.id,p1.id); })
		.def_static("play_vehicle_door_open_sound", [](Py_Vehicle vehicle,Py_Any p1) -> void { return AUDIO::PLAY_VEHICLE_DOOR_OPEN_SOUND(vehicle.id,p1.id); })
		.def_static("preload_script_conversation", [](BOOL p0,BOOL p1,BOOL p2,BOOL p3) -> void { return AUDIO::PRELOAD_SCRIPT_CONVERSATION(p0,p1,p2,p3); })
		.def_static("preload_script_phone_conversation", [](BOOL p0,BOOL p1) -> void { return AUDIO::PRELOAD_SCRIPT_PHONE_CONVERSATION(p0,p1); })
		.def_static("prepare_alarm", [](char* alarmName) -> BOOL { return AUDIO::PREPARE_ALARM(alarmName); })
		.def_static("prepare_music_event", [](char* eventName) -> BOOL { return AUDIO::PREPARE_MUSIC_EVENT(eventName); })
		.def_static("prepare_synchronized_event", [](Py_Any p0,Py_Any p1) -> Py_Any { return AUDIO::PREPARE_SYNCHRONIZED_AUDIO_EVENT(p0.id,p1.id); })
		.def_static("register_script_with_audio", [](Py_Any p0) -> void { return AUDIO::REGISTER_SCRIPT_WITH_AUDIO(p0.id); })
		.def_static("release_ambient_bank", []() -> void { return AUDIO::RELEASE_AMBIENT_AUDIO_BANK(); })
		.def_static("release_mission_bank", []() -> void { return AUDIO::RELEASE_MISSION_AUDIO_BANK(); })
		.def_static("release_named_script_bank", [](char* audioBank) -> void { return AUDIO::RELEASE_NAMED_SCRIPT_AUDIO_BANK(audioBank); })
		.def_static("release_script_bank", []() -> void { return AUDIO::RELEASE_SCRIPT_AUDIO_BANK(); })
		.def_static("release_sound_id", [](int soundId) -> void { return AUDIO::RELEASE_SOUND_ID(soundId); })
		.def_static("request_ambient_bank", [](char* p0,BOOL p1) -> BOOL { return AUDIO::REQUEST_AMBIENT_AUDIO_BANK(p0,p1); })
		.def_static("request_mission_bank", [](char* p0,BOOL p1) -> BOOL { return AUDIO::REQUEST_MISSION_AUDIO_BANK(p0,p1); })
		.def_static("request_script_bank", [](char* p0,BOOL p1) -> BOOL { return AUDIO::REQUEST_SCRIPT_AUDIO_BANK(p0,p1); })
		.def_static("reset_ped_flags", [](Py_Any p0) -> void { return AUDIO::RESET_PED_AUDIO_FLAGS(p0.id); })
		.def_static("reset_trevor_rage", []() -> void { return AUDIO::RESET_TREVOR_RAGE(); })
		.def_static("restart_scripted_conversation", []() -> void { return AUDIO::RESTART_SCRIPTED_CONVERSATION(); })
		.def_static("set_aggressive_horns", [](BOOL toggle) -> void { return AUDIO::SET_AGGRESSIVE_HORNS(toggle); })
		.def_static("set_ambient_voice_name", [](Py_Ped ped,char* name) -> void { return AUDIO::SET_AMBIENT_VOICE_NAME(ped.id,name); })
		.def_static("set_ambient_zone_list_state_persistent", [](char* ambientZone,BOOL p1,BOOL p2) -> void { return AUDIO::SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(ambientZone,p1,p2); })
		.def_static("set_ambient_zone_state_persistent", [](char* ambientZone,BOOL p1,BOOL p2) -> void { return AUDIO::SET_AMBIENT_ZONE_STATE_PERSISTENT(ambientZone,p1,p2); })
		.def_static("set_animal_mood", [](Py_Any p0,Py_Any p1) -> void { return AUDIO::SET_ANIMAL_MOOD(p0.id,p1.id); })
		.def_static("set_emitter_radio_station", [](char* emitterName,char* radioStation) -> void { return AUDIO::SET_EMITTER_RADIO_STATION(emitterName,radioStation); })
		.def_static("set_flag", [](char* flagName,BOOL toggle) -> void { return AUDIO::SET_AUDIO_FLAG(flagName,toggle); })
		.def_static("set_frontend_radio_active", [](BOOL p0) -> void { return AUDIO::SET_FRONTEND_RADIO_ACTIVE(p0); })
		.def_static("set_gps_active", [](BOOL p0) -> void { return AUDIO::SET_GPS_ACTIVE(p0); })
		.def_static("set_horn_enabled", [](Py_Vehicle vehicle,BOOL p1) -> void { return AUDIO::SET_HORN_ENABLED(vehicle.id,p1); })
		.def_static("set_initial_player_station", [](char* radioStation) -> void { return AUDIO::SET_INITIAL_PLAYER_STATION(radioStation); })
		.def_static("set_microphone_position", [](BOOL p0,float x1,float y1,float z1,float x2,float y2,float z2,float x3,float y3,float z3) -> void { return AUDIO::SET_MICROPHONE_POSITION(p0,x1,y1,z1,x2,y2,z2,x3,y3,z3); })
		.def_static("set_mobile_phone_radio_state", [](BOOL p0) -> void { return AUDIO::SET_MOBILE_PHONE_RADIO_STATE(p0); })
		.def_static("set_mobile_radio_enabled_during_gameplay", [](BOOL Toggle) -> void { return AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(Toggle); })
		.def_static("set_ped_is_drunk", [](Py_Any p0,BOOL p1) -> void { return AUDIO::SET_PED_IS_DRUNK(p0.id,p1); })
		.def_static("set_player_angry", [](Py_Player player,BOOL IsAngry) -> void { return AUDIO::SET_PLAYER_ANGRY(player.id,IsAngry); })
		.def_static("set_radio_auto_unfreeze", [](BOOL p0) -> void { return AUDIO::SET_RADIO_AUTO_UNFREEZE(p0); })
		.def_static("set_radio_to_station_index", [](int radioStation) -> void { return AUDIO::SET_RADIO_TO_STATION_INDEX(radioStation); })
		.def_static("set_radio_to_station_name", [](char* radioStation) -> void { return AUDIO::SET_RADIO_TO_STATION_NAME(radioStation); })
		.def_static("set_radio_track", [](char* radioStation,char* radioTrack) -> void { return AUDIO::SET_RADIO_TRACK(radioStation,radioTrack); })
		.def_static("set_siren_with_no_driver", [](Py_Vehicle vehicle,BOOL set) -> void { return AUDIO::SET_SIREN_WITH_NO_DRIVER(vehicle.id,set); })
		.def_static("set_static_emitter_enabled", [](char* emitterName,BOOL toggle) -> void { return AUDIO::SET_STATIC_EMITTER_ENABLED(emitterName,toggle); })
		.def_static("set_user_radio_control_enabled", [](BOOL p0) -> void { return AUDIO::SET_USER_RADIO_CONTROL_ENABLED(p0); })
		.def_static("set_variable_on_stream", [](char* p0,float p1) -> void { return AUDIO::SET_VARIABLE_ON_STREAM(p0,p1); })
		.def_static("set_veh_radio_station", [](Py_Vehicle vehicle,char* radioStation) -> void { return AUDIO::SET_VEH_RADIO_STATION(vehicle.id,radioStation); })
		.def_static("set_vehicle_boost_active", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return AUDIO::SET_VEHICLE_BOOST_ACTIVE(vehicle.id,Toggle); })
		.def_static("set_vehicle_priority", [](Py_Vehicle vehicle,Py_Any p1) -> void { return AUDIO::SET_AUDIO_VEHICLE_PRIORITY(vehicle.id,p1.id); })
		.def_static("set_vehicle_radio_enabled", [](Py_Vehicle vehicle,BOOL toggle) -> void { return AUDIO::SET_VEHICLE_RADIO_ENABLED(vehicle.id,toggle); })
		.def_static("set_vehicle_radio_loud", [](Py_Vehicle vehicle,BOOL toggle) -> void { return AUDIO::SET_VEHICLE_RADIO_LOUD(vehicle.id,toggle); })
		.def_static("skip_radio_forward", []() -> void { return AUDIO::SKIP_RADIO_FORWARD(); })
		.def_static("skip_to_next_scripted_conversation_line", []() -> void { return AUDIO::SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE(); })
		.def_static("special_frontend_equal", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return AUDIO::SPECIAL_FRONTEND_EQUAL(p0.id,p1.id,p2.id); })
		.def_static("start_alarm", [](char* alarmName,BOOL p2) -> void { return AUDIO::START_ALARM(alarmName,p2); })
		.def_static("start_preloaded_conversation", []() -> void { return AUDIO::START_PRELOADED_CONVERSATION(); })
		.def_static("start_scene", [](char* sceneName) -> BOOL { return AUDIO::START_AUDIO_SCENE(sceneName); })
		.def_static("start_script_conversation", [](BOOL p0,BOOL p1,BOOL p2,BOOL p3) -> void { return AUDIO::START_SCRIPT_CONVERSATION(p0,p1,p2,p3); })
		.def_static("start_script_phone_conversation", [](BOOL p0,BOOL p1) -> void { return AUDIO::START_SCRIPT_PHONE_CONVERSATION(p0,p1); })
		.def_static("stop_alarm", [](char* alarmName,BOOL toggle) -> void { return AUDIO::STOP_ALARM(alarmName,toggle); })
		.def_static("stop_all_alarms", [](BOOL p0) -> void { return AUDIO::STOP_ALL_ALARMS(p0); })
		.def_static("stop_current_playing_ambient_speech", [](Py_Ped p0) -> void { return AUDIO::STOP_CURRENT_PLAYING_AMBIENT_SPEECH(p0.id); })
		.def_static("stop_ped_ringtone", [](Py_Any p0) -> void { return AUDIO::STOP_PED_RINGTONE(p0.id); })
		.def_static("stop_ped_speaking", [](Py_Ped ped,BOOL shaking) -> void { return AUDIO::STOP_PED_SPEAKING(ped.id,shaking); })
		.def_static("stop_scene", [](char* scene) -> void { return AUDIO::STOP_AUDIO_SCENE(scene); })
		.def_static("stop_scenes", []() -> void { return AUDIO::STOP_AUDIO_SCENES(); })
		.def_static("stop_scripted_conversation", [](BOOL p0) -> Py_Any { return AUDIO::STOP_SCRIPTED_CONVERSATION(p0); })
		.def_static("stop_sound", [](int soundId) -> void { return AUDIO::STOP_SOUND(soundId); })
		.def_static("stop_stream", []() -> void { return AUDIO::STOP_STREAM(); })
		.def_static("stop_synchronized_event", [](Py_Any p0) -> BOOL { return AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(p0.id); })
		.def_static("trigger_music_event", [](char* eventName) -> BOOL { return AUDIO::TRIGGER_MUSIC_EVENT(eventName); })
		.def_static("unfreeze_radio_station", [](char* radioStation) -> void { return AUDIO::UNFREEZE_RADIO_STATION(radioStation); })
		.def_static("unlock_mission_news_story", [](Py_Any p0) -> void { return AUDIO::UNLOCK_MISSION_NEWS_STORY(p0.id); })
		.def_static("unregister_script_with_audio", []() -> void { return AUDIO::UNREGISTER_SCRIPT_WITH_AUDIO(); })
		.def_static("use_siren_as_horn", [](Py_Any p0,BOOL p1) -> void { return AUDIO::USE_SIREN_AS_HORN(p0.id,p1); })
;
	custom(py_Audio);
	py::class_<Py_Cutscene> py_Cutscene(m, "Cutscene");
	py_Cutscene
		.def_static("can_set_exit_state_for_camera", [](BOOL p0) -> BOOL { return CUTSCENE::CAN_SET_EXIT_STATE_FOR_CAMERA(p0); })
		.def_static("get_section_playing", []() -> Py_Any { return CUTSCENE::GET_CUTSCENE_SECTION_PLAYING(); })
		.def_static("get_time", []() -> Py_Any { return CUTSCENE::GET_CUTSCENE_TIME(); })
		.def_static("get_total_duration", []() -> Py_Any { return CUTSCENE::GET_CUTSCENE_TOTAL_DURATION(); })
		.def_static("has_finished", []() -> BOOL { return CUTSCENE::HAS_CUTSCENE_FINISHED(); })
		.def_static("has_loaded", []() -> BOOL { return CUTSCENE::HAS_CUTSCENE_LOADED(); })
		.def_static("has_this_loaded", [](char* cutsceneName) -> BOOL { return CUTSCENE::HAS_THIS_CUTSCENE_LOADED(cutsceneName); })
		.def_static("is_active", []() -> BOOL { return CUTSCENE::IS_CUTSCENE_ACTIVE(); })
		.def_static("is_playing", []() -> BOOL { return CUTSCENE::IS_CUTSCENE_PLAYING(); })
		.def_static("register_synchronised_script_speech", []() -> void { return CUTSCENE::REGISTER_SYNCHRONISED_SCRIPT_SPEECH(); })
		.def_static("remove_cutscene", []() -> void { return CUTSCENE::REMOVE_CUTSCENE(); })
		.def_static("request_2", [](char* cutsceneName,int p1,int p2) -> void { return CUTSCENE::_REQUEST_CUTSCENE_2(cutsceneName,p1,p2); })
		.def_static("request_cutscene", [](char* cutsceneName,int p1) -> void { return CUTSCENE::REQUEST_CUTSCENE(cutsceneName,p1); })
		.def_static("set_fade_values", [](BOOL p0,BOOL p1,BOOL p2,BOOL p3) -> void { return CUTSCENE::SET_CUTSCENE_FADE_VALUES(p0,p1,p2,p3); })
		.def_static("set_origin", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return CUTSCENE::SET_CUTSCENE_ORIGIN(p0.id,p1.id,p2.id,p3.id,p4.id); })
		.def_static("set_trigger_area", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> void { return CUTSCENE::SET_CUTSCENE_TRIGGER_AREA(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("start_at_coords", [](float x,float y,float z,int p3) -> void { return CUTSCENE::START_CUTSCENE_AT_COORDS(x,y,z,p3); })
		.def_static("start_cutscene", [](int p0) -> void { return CUTSCENE::START_CUTSCENE(p0); })
		.def_static("stop_cutscene", [](BOOL p0) -> void { return CUTSCENE::STOP_CUTSCENE(p0); })
		.def_static("stop_immediately", []() -> void { return CUTSCENE::STOP_CUTSCENE_IMMEDIATELY(); })
		.def_static("was_skipped", []() -> BOOL { return CUTSCENE::WAS_CUTSCENE_SKIPPED(); })
;
	custom(py_Cutscene);
	py::class_<Py_Interior> py_Interior(m, "Interior");
	py_Interior
		.def_static("add_pickup_to_room_by_name", [](Py_Any pickup,char* roomName) -> void { return INTERIOR::ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(pickup.id,roomName); })
		.def_static("are_coords_colliding_with_exterior", [](float x,float y,float z) -> BOOL { return INTERIOR::_ARE_COORDS_COLLIDING_WITH_EXTERIOR(x,y,z); })
		.def_static("cap_interior", [](int interiorID,BOOL toggle) -> void { return INTERIOR::CAP_INTERIOR(interiorID,toggle); })
		.def_static("clear_room_for_entity", [](Py_Entity entity) -> void { return INTERIOR::CLEAR_ROOM_FOR_ENTITY(entity.id); })
		.def_static("disable_interior", [](int interiorID,BOOL toggle) -> void { return INTERIOR::DISABLE_INTERIOR(interiorID,toggle); })
		.def_static("disable_prop", [](int interiorID,char* propName) -> void { return INTERIOR::_DISABLE_INTERIOR_PROP(interiorID,propName); })
		.def_static("enable_prop", [](int interiorID,char* propName) -> void { return INTERIOR::_ENABLE_INTERIOR_PROP(interiorID,propName); })
		.def_static("force_room_for_entity", [](Py_Entity entity,int interiorID,Py_Hash roomHashKey) -> void { return INTERIOR::FORCE_ROOM_FOR_ENTITY(entity.id,interiorID,roomHashKey.id); })
		.def_static("get_at_coords", [](float x,float y,float z) -> int { return INTERIOR::GET_INTERIOR_AT_COORDS(x,y,z); })
		.def_static("get_at_coords_with_type", [](float x,float y,float z,char* interiorType) -> int { return INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x,y,z,interiorType); })
		.def_static("get_from_collision", [](float x,float y,float z) -> int { return INTERIOR::GET_INTERIOR_FROM_COLLISION(x,y,z); })
		.def_static("get_from_entity", [](Py_Entity entity) -> int { return INTERIOR::GET_INTERIOR_FROM_ENTITY(entity.id); })
		.def_static("get_group_id", [](int interiorID) -> Py_Any { return INTERIOR::GET_INTERIOR_GROUP_ID(interiorID); })
		.def_static("get_key_for_entity_in_room", [](Py_Entity entity) -> Py_Hash { return INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(entity.id); })
		.def_static("get_offset_from_in_world_coords", [](int interiorID,float x,float y,float z) -> Vector3 { return INTERIOR::GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(interiorID,x,y,z); })
		.def_static("get_room_key_from_entity", [](Py_Entity entity) -> Py_Hash { return INTERIOR::GET_ROOM_KEY_FROM_ENTITY(entity.id); })
		.def_static("get_room_key_from_gameplay_cam", []() -> Py_Hash { return INTERIOR::_GET_ROOM_KEY_FROM_GAMEPLAY_CAM(); })
		.def_static("hide_map_object_this_frame", [](Py_Hash mapObjectHash) -> void { return INTERIOR::_HIDE_MAP_OBJECT_THIS_FRAME(mapObjectHash.id); })
		.def_static("is_capped", [](int interiorID) -> BOOL { return INTERIOR::IS_INTERIOR_CAPPED(interiorID); })
		.def_static("is_disabled", [](int interiorID) -> BOOL { return INTERIOR::IS_INTERIOR_DISABLED(interiorID); })
		.def_static("is_prop_enabled", [](int interiorID,char* propName) -> BOOL { return INTERIOR::_IS_INTERIOR_PROP_ENABLED(interiorID,propName); })
		.def_static("is_ready", [](int interiorID) -> BOOL { return INTERIOR::IS_INTERIOR_READY(interiorID); })
		.def_static("is_scene", []() -> BOOL { return INTERIOR::IS_INTERIOR_SCENE(); })
		.def_static("is_valid_interior", [](int interiorID) -> BOOL { return INTERIOR::IS_VALID_INTERIOR(interiorID); })
		.def_static("refresh_interior", [](int interiorID) -> void { return INTERIOR::REFRESH_INTERIOR(interiorID); })
		.def_static("unpin_interior", [](int interiorID) -> void { return INTERIOR::UNPIN_INTERIOR(interiorID); })
;
	custom(py_Interior);
	py::class_<Py_Weapon> py_Weapon(m, "Weapon");
	py_Weapon
		.def_static("add_ammo_to_ped", [](Py_Ped ped,Py_Hash weaponHash,int ammo) -> void { return WEAPON::ADD_AMMO_TO_PED(ped.id,weaponHash.id,ammo); })
		.def_static("can_use_on_parachute", [](Py_Hash weaponHash) -> BOOL { return WEAPON::CAN_USE_WEAPON_ON_PARACHUTE(weaponHash.id); })
		.def_static("clear_entity_last_damage", [](Py_Entity entity) -> void { return WEAPON::CLEAR_ENTITY_LAST_WEAPON_DAMAGE(entity.id); })
		.def_static("clear_ped_last_damage", [](Py_Ped ped) -> void { return WEAPON::CLEAR_PED_LAST_WEAPON_DAMAGE(ped.id); })
		.def_static("create_object", [](Py_Hash weaponHash,int ammoCount,float x,float y,float z,BOOL showWorldModel,float heading,Py_Any p7) -> Py_Any { return WEAPON::CREATE_WEAPON_OBJECT(weaponHash.id,ammoCount,x,y,z,showWorldModel,heading,p7.id); })
		.def_static("does_take_component", [](Py_Hash weaponHash,Py_Hash componentHash) -> BOOL { return WEAPON::DOES_WEAPON_TAKE_WEAPON_COMPONENT(weaponHash.id,componentHash.id); })
		.def_static("enable_laser_sight_rendering", [](BOOL toggle) -> void { return WEAPON::ENABLE_LASER_SIGHT_RENDERING(toggle); })
		.def_static("explode_projectiles", [](Py_Ped ped,Py_Hash weaponHash,BOOL p2) -> void { return WEAPON::EXPLODE_PROJECTILES(ped.id,weaponHash.id,p2); })
		.def_static("get_ammo_in_ped_weapon", [](Py_Ped ped,Py_Hash weaponhash) -> int { return WEAPON::GET_AMMO_IN_PED_WEAPON(ped.id,weaponhash.id); })
		.def_static("get_best_ped_weapon", [](Py_Ped ped,BOOL p1) -> Py_Hash { return WEAPON::GET_BEST_PED_WEAPON(ped.id,p1); })
		.def_static("get_clip_size", [](Py_Hash weaponHash) -> int { return WEAPON::GET_WEAPON_CLIP_SIZE(weaponHash.id); })
		.def_static("get_component_type_model", [](Py_Hash componentHash) -> Py_Hash { return WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL(componentHash.id); })
		.def_static("get_current_ped_entity_index", [](Py_Ped ped) -> Py_Entity { return WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(ped.id); })
		.def_static("get_damage_type", [](Py_Hash weaponHash) -> int { return WEAPON::GET_WEAPON_DAMAGE_TYPE(weaponHash.id); })
		.def_static("get_is_ped_gadget_equipped", [](Py_Ped ped,Py_Hash gadgetHash) -> BOOL { return WEAPON::GET_IS_PED_GADGET_EQUIPPED(ped.id,gadgetHash.id); })
		.def_static("get_max_ammo_in_clip", [](Py_Ped ped,Py_Hash weaponHash,BOOL p2) -> int { return WEAPON::GET_MAX_AMMO_IN_CLIP(ped.id,weaponHash.id,p2); })
		.def_static("get_max_range_of_current_ped_weapon", [](Py_Ped ped) -> float { return WEAPON::GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(ped.id); })
		.def_static("get_object_from_ped", [](Py_Ped ped,BOOL p1) -> Py_Entity { return WEAPON::GET_WEAPON_OBJECT_FROM_PED(ped.id,p1); })
		.def_static("get_object_tint_index", [](Py_Entity weapon) -> int { return WEAPON::GET_WEAPON_OBJECT_TINT_INDEX(weapon.id); })
		.def_static("get_ped_ammo_by_type", [](Py_Ped ped,Py_Any ammoType) -> int { return WEAPON::GET_PED_AMMO_BY_TYPE(ped.id,ammoType.id); })
		.def_static("get_ped_ammo_type", [](Py_Ped ped,Py_Hash weaponHash) -> Py_Any { return WEAPON::_GET_PED_AMMO_TYPE(ped.id,weaponHash.id); })
		.def_static("get_ped_tint_index", [](Py_Ped ped,Py_Hash weaponHash) -> int { return WEAPON::GET_PED_WEAPON_TINT_INDEX(ped.id,weaponHash.id); })
		.def_static("get_ped_weapontype_in_slot", [](Py_Ped ped,Py_Hash weaponSlot) -> Py_Hash { return WEAPON::GET_PED_WEAPONTYPE_IN_SLOT(ped.id,weaponSlot.id); })
		.def_static("get_selected_ped_weapon", [](Py_Ped ped) -> Py_Hash { return WEAPON::GET_SELECTED_PED_WEAPON(ped.id); })
		.def_static("get_tint_count", [](Py_Hash weaponHash) -> int { return WEAPON::GET_WEAPON_TINT_COUNT(weaponHash.id); })
		.def_static("get_weapontype_group", [](Py_Hash weaponHash) -> Py_Any { return WEAPON::GET_WEAPONTYPE_GROUP(weaponHash.id); })
		.def_static("get_weapontype_model", [](Py_Hash weaponHash) -> Py_Any { return WEAPON::GET_WEAPONTYPE_MODEL(weaponHash.id); })
		.def_static("get_weapontype_slot", [](Py_Hash weaponHash) -> Py_Any { return WEAPON::GET_WEAPONTYPE_SLOT(weaponHash.id); })
		.def_static("give_component_to_object", [](Py_Object weaponObject,Py_Hash addonHash) -> void { return WEAPON::GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(weaponObject.id,addonHash.id); })
		.def_static("give_component_to_ped", [](Py_Ped ped,Py_Hash weaponHash,Py_Hash componentHash) -> void { return WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(ped.id,weaponHash.id,componentHash.id); })
		.def_static("give_delayed_to_ped", [](Py_Ped ped,Py_Hash weaponHash,int time,BOOL equipNow) -> void { return WEAPON::GIVE_DELAYED_WEAPON_TO_PED(ped.id,weaponHash.id,time,equipNow); })
		.def_static("give_object_to_ped", [](Py_Object weaponObject,Py_Ped ped) -> void { return WEAPON::GIVE_WEAPON_OBJECT_TO_PED(weaponObject.id,ped.id); })
		.def_static("give_to_ped", [](Py_Player ped,Py_Hash weaponHash,int ammoCount,BOOL p4,BOOL equipNow) -> void { return WEAPON::GIVE_WEAPON_TO_PED(ped.id,weaponHash.id,ammoCount,p4,equipNow); })
		.def_static("has_asset_loaded", [](Py_Hash weaponHash) -> BOOL { return WEAPON::HAS_WEAPON_ASSET_LOADED(weaponHash.id); })
		.def_static("has_entity_been_damaged_by_weapon", [](Py_Entity entity,Py_Hash weaponHash,int weaponType) -> BOOL { return WEAPON::HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(entity.id,weaponHash.id,weaponType); })
		.def_static("has_got_component", [](Py_Object weapon,Py_Hash addonHash) -> BOOL { return WEAPON::HAS_WEAPON_GOT_WEAPON_COMPONENT(weapon.id,addonHash.id); })
		.def_static("has_ped_been_damaged_by_weapon", [](Py_Ped ped,Py_Hash weaponHash,int weaponType) -> BOOL { return WEAPON::HAS_PED_BEEN_DAMAGED_BY_WEAPON(ped.id,weaponHash.id,weaponType); })
		.def_static("has_ped_got_component", [](Py_Ped ped,Py_Hash weaponHash,Py_Hash componentHash) -> BOOL { return WEAPON::HAS_PED_GOT_WEAPON_COMPONENT(ped.id,weaponHash.id,componentHash.id); })
		.def_static("has_ped_got_weapon", [](Py_Ped ped,Py_Hash weaponHash,BOOL p2) -> BOOL { return WEAPON::HAS_PED_GOT_WEAPON(ped.id,weaponHash.id,p2); })
		.def_static("has_vehicle_got_projectile_attached", [](Py_Ped driver,Py_Vehicle vehicle,Py_Hash weapon,Py_Any p3) -> BOOL { return WEAPON::HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(driver.id,vehicle.id,weapon.id,p3.id); })
		.def_static("hide_ped_for_scripted_cutscene", [](Py_Ped ped,BOOL toggle) -> void { return WEAPON::HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(ped.id,toggle); })
		.def_static("is_ped_armed", [](Py_Ped ped,int p1) -> BOOL { return WEAPON::IS_PED_ARMED(ped.id,p1); })
		.def_static("is_ped_component_active", [](Py_Ped ped,Py_Hash weaponHash,Py_Hash componentHash) -> BOOL { return WEAPON::IS_PED_WEAPON_COMPONENT_ACTIVE(ped.id,weaponHash.id,componentHash.id); })
		.def_static("is_ped_current_silenced", [](Py_Ped ped) -> BOOL { return WEAPON::IS_PED_CURRENT_WEAPON_SILENCED(ped.id); })
		.def_static("is_ped_ready_to_shoot", [](Py_Ped ped) -> BOOL { return WEAPON::IS_PED_WEAPON_READY_TO_SHOOT(ped.id); })
		.def_static("is_ped_reloading", [](Py_Ped ped) -> BOOL { return WEAPON::_IS_PED_RELOADING(ped.id); })
		.def_static("is_valid", [](Py_Hash weaponHash) -> BOOL { return WEAPON::IS_WEAPON_VALID(weaponHash.id); })
		.def_static("make_ped_reload", [](Py_Ped ped) -> BOOL { return WEAPON::MAKE_PED_RELOAD(ped.id); })
		.def_static("remove_all_ped_weapons", [](Py_Ped ped,BOOL toggle) -> void { return WEAPON::REMOVE_ALL_PED_WEAPONS(ped.id,toggle); })
		.def_static("remove_all_projectiles_of_type", [](Py_Any p0,BOOL p1) -> void { return WEAPON::REMOVE_ALL_PROJECTILES_OF_TYPE(p0.id,p1); })
		.def_static("remove_asset", [](Py_Hash weaponHash) -> void { return WEAPON::REMOVE_WEAPON_ASSET(weaponHash.id); })
		.def_static("remove_component_from_object", [](Py_Any p0,Py_Any p1) -> void { return WEAPON::REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(p0.id,p1.id); })
		.def_static("remove_component_from_ped", [](Py_Ped ped,Py_Hash weaponHash,Py_Hash componentHash) -> void { return WEAPON::REMOVE_WEAPON_COMPONENT_FROM_PED(ped.id,weaponHash.id,componentHash.id); })
		.def_static("remove_from_ped", [](Py_Ped ped,Py_Hash weaponHash) -> void { return WEAPON::REMOVE_WEAPON_FROM_PED(ped.id,weaponHash.id); })
		.def_static("request_asset", [](Py_Hash weaponHash,int p1,BOOL p2) -> void { return WEAPON::REQUEST_WEAPON_ASSET(weaponHash.id,p1,p2); })
		.def_static("request_high_detail_model", [](Py_Entity weaponObject) -> void { return WEAPON::REQUEST_WEAPON_HIGH_DETAIL_MODEL(weaponObject.id); })
		.def_static("set_ammo_in_clip", [](Py_Ped ped,Py_Hash weaponHash,int ammo) -> BOOL { return WEAPON::SET_AMMO_IN_CLIP(ped.id,weaponHash.id,ammo); })
		.def_static("set_animation_override", [](Py_Any p0,Py_Any p1) -> void { return WEAPON::SET_WEAPON_ANIMATION_OVERRIDE(p0.id,p1.id); })
		.def_static("set_current_ped_vehicle_weapon", [](Py_Ped ped,Py_Hash weaponHash) -> BOOL { return WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(ped.id,weaponHash.id); })
		.def_static("set_current_ped_weapon", [](Py_Ped ped,Py_Hash weaponHash,BOOL equipNow) -> void { return WEAPON::SET_CURRENT_PED_WEAPON(ped.id,weaponHash.id,equipNow); })
		.def_static("set_flash_light_fade_distance", [](float distance) -> Py_Any { return WEAPON::SET_FLASH_LIGHT_FADE_DISTANCE(distance); })
		.def_static("set_object_tint_index", [](Py_Entity weapon,int tint) -> void { return WEAPON::SET_WEAPON_OBJECT_TINT_INDEX(weapon.id,tint); })
		.def_static("set_ped_ammo", [](Py_Ped ped,Py_Hash weaponHash,int ammo) -> void { return WEAPON::SET_PED_AMMO(ped.id,weaponHash.id,ammo); })
		.def_static("set_ped_ammo_by_type", [](Py_Ped ped,Py_Any ammoType,int ammo) -> void { return WEAPON::SET_PED_AMMO_BY_TYPE(ped.id,ammoType.id,ammo); })
		.def_static("set_ped_ammo_to_drop", [](Py_Any p0,Py_Any p1) -> void { return WEAPON::SET_PED_AMMO_TO_DROP(p0.id,p1.id); })
		.def_static("set_ped_chance_of_firing_blanks", [](Py_Ped ped,float xBias,float yBias) -> void { return WEAPON::SET_PED_CHANCE_OF_FIRING_BLANKS(ped.id,xBias,yBias); })
		.def_static("set_ped_current_visible", [](Py_Ped ped,BOOL visible,BOOL deselectWeapon,BOOL p3,BOOL p4) -> void { return WEAPON::SET_PED_CURRENT_WEAPON_VISIBLE(ped.id,visible,deselectWeapon,p3,p4); })
		.def_static("set_ped_drops_inventory_weapon", [](Py_Ped ped,Py_Hash weaponHash,float p2,float p3,float p4,Py_Any p5) -> void { return WEAPON::SET_PED_DROPS_INVENTORY_WEAPON(ped.id,weaponHash.id,p2,p3,p4,p5.id); })
		.def_static("set_ped_drops_weapon", [](Py_Ped ped) -> void { return WEAPON::SET_PED_DROPS_WEAPON(ped.id); })
		.def_static("set_ped_drops_weapons_when_dead", [](Py_Ped ped,BOOL toggle) -> void { return WEAPON::SET_PED_DROPS_WEAPONS_WHEN_DEAD(ped.id,toggle); })
		.def_static("set_ped_gadget", [](Py_Ped ped,Py_Hash gadgetHash,BOOL p2) -> void { return WEAPON::SET_PED_GADGET(ped.id,gadgetHash.id,p2); })
		.def_static("set_ped_infinite_ammo", [](Py_Ped ped,BOOL toggle,Py_Hash weaponHash) -> void { return WEAPON::SET_PED_INFINITE_AMMO(ped.id,toggle,weaponHash.id); })
		.def_static("set_ped_infinite_ammo_clip", [](Py_Ped ped,BOOL toggle) -> void { return WEAPON::SET_PED_INFINITE_AMMO_CLIP(ped.id,toggle); })
		.def_static("set_ped_tint_index", [](Py_Ped ped,Py_Hash weaponHash,int colorIndex) -> void { return WEAPON::SET_PED_WEAPON_TINT_INDEX(ped.id,weaponHash.id,colorIndex); })
		.def_static("set_smokegrenade_assigned", [](Py_Any p0) -> BOOL { return WEAPON::SET_WEAPON_SMOKEGRENADE_ASSIGNED(p0.id); })
;
	custom(py_Weapon);
	py::class_<Py_Itemset> py_Itemset(m, "Itemset");
	py_Itemset
		.def_static("add_to_itemset", [](Py_Any p0,Py_Any p1) -> BOOL { return ITEMSET::ADD_TO_ITEMSET(p0.id,p1.id); })
		.def_static("clean_itemset", [](Py_Any p0) -> void { return ITEMSET::CLEAN_ITEMSET(p0.id); })
		.def_static("create_itemset", [](BOOL p0) -> Py_Any { return ITEMSET::CREATE_ITEMSET(p0); })
		.def_static("destroy_itemset", [](Py_Any p0) -> void { return ITEMSET::DESTROY_ITEMSET(p0.id); })
		.def_static("get_indexed_item_in_itemset", [](Py_Any p0,Py_Any p1) -> Py_Any { return ITEMSET::GET_INDEXED_ITEM_IN_ITEMSET(p0.id,p1.id); })
		.def_static("get_size", [](Py_Any p0) -> Py_Any { return ITEMSET::GET_ITEMSET_SIZE(p0.id); })
		.def_static("is_in_itemset", [](Py_Any p0,Py_Any p1) -> BOOL { return ITEMSET::IS_IN_ITEMSET(p0.id,p1.id); })
		.def_static("is_valid", [](Py_Any p0) -> BOOL { return ITEMSET::IS_ITEMSET_VALID(p0.id); })
		.def_static("remove_from_itemset", [](Py_Any p0,Py_Any p1) -> void { return ITEMSET::REMOVE_FROM_ITEMSET(p0.id,p1.id); })
;
	custom(py_Itemset);
	py::class_<Py_Streaming> py_Streaming(m, "Streaming");
	py_Streaming
		.def_static("begin_srl", []() -> void { return STREAMING::BEGIN_SRL(); })
		.def_static("clear_focus", []() -> void { return STREAMING::CLEAR_FOCUS(); })
		.def_static("clear_hd_area", []() -> void { return STREAMING::CLEAR_HD_AREA(); })
		.def_static("destroy_player_in_pause_menu", []() -> Py_Any { return STREAMING::DESTROY_PLAYER_IN_PAUSE_MENU(); })
		.def_static("does_anim_dict_exist", [](char* animDict) -> BOOL { return STREAMING::DOES_ANIM_DICT_EXIST(animDict); })
		.def_static("end_srl", []() -> void { return STREAMING::END_SRL(); })
		.def_static("get_ideal_player_switch_type", [](float x1,float y1,float z1,float x2,float y2,float z2) -> int { return STREAMING::GET_IDEAL_PLAYER_SWITCH_TYPE(x1,y1,z1,x2,y2,z2); })
		.def_static("get_number_of_requests", []() -> int { return STREAMING::GET_NUMBER_OF_STREAMING_REQUESTS(); })
		.def_static("get_player_short_switch_state", []() -> int { return STREAMING::GET_PLAYER_SHORT_SWITCH_STATE(); })
		.def_static("get_player_switch_state", []() -> int { return STREAMING::GET_PLAYER_SWITCH_STATE(); })
		.def_static("get_player_switch_type", []() -> int { return STREAMING::GET_PLAYER_SWITCH_TYPE(); })
		.def_static("has_anim_dict_loaded", [](char* animDict) -> BOOL { return STREAMING::HAS_ANIM_DICT_LOADED(animDict); })
		.def_static("has_anim_set_loaded", [](char* animSet) -> BOOL { return STREAMING::HAS_ANIM_SET_LOADED(animSet); })
		.def_static("has_clip_set_loaded", [](char* clipSet) -> BOOL { return STREAMING::HAS_CLIP_SET_LOADED(clipSet); })
		.def_static("has_collision_for_model_loaded", [](Py_Hash model) -> BOOL { return STREAMING::HAS_COLLISION_FOR_MODEL_LOADED(model.id); })
		.def_static("has_model_loaded", [](Py_Hash model) -> BOOL { return STREAMING::HAS_MODEL_LOADED(model.id); })
		.def_static("has_named_ptfx_asset_loaded", [](char* fxName) -> BOOL { return STREAMING::HAS_NAMED_PTFX_ASSET_LOADED(fxName); })
		.def_static("has_ptfx_asset_loaded", []() -> BOOL { return STREAMING::HAS_PTFX_ASSET_LOADED(); })
		.def_static("is_entity_focus", [](Py_Entity entity) -> BOOL { return STREAMING::IS_ENTITY_FOCUS(entity.id); })
		.def_static("is_ipl_active", [](char* iplName) -> BOOL { return STREAMING::IS_IPL_ACTIVE(iplName); })
		.def_static("is_model_a_vehicle", [](Py_Hash model) -> BOOL { return STREAMING::IS_MODEL_A_VEHICLE(model.id); })
		.def_static("is_model_in_cdimage", [](Py_Hash model) -> BOOL { return STREAMING::IS_MODEL_IN_CDIMAGE(model.id); })
		.def_static("is_model_valid", [](Py_Hash model) -> BOOL { return STREAMING::IS_MODEL_VALID(model.id); })
		.def_static("is_network_loading_scene", []() -> BOOL { return STREAMING::IS_NETWORK_LOADING_SCENE(); })
		.def_static("is_new_load_scene_active", []() -> BOOL { return STREAMING::IS_NEW_LOAD_SCENE_ACTIVE(); })
		.def_static("is_new_load_scene_loaded", []() -> BOOL { return STREAMING::IS_NEW_LOAD_SCENE_LOADED(); })
		.def_static("is_player_switch_in_progress", []() -> BOOL { return STREAMING::IS_PLAYER_SWITCH_IN_PROGRESS(); })
		.def_static("is_srl_loaded", []() -> BOOL { return STREAMING::IS_SRL_LOADED(); })
		.def_static("load_all_objects_now", []() -> void { return STREAMING::LOAD_ALL_OBJECTS_NOW(); })
		.def_static("load_scene", [](float x,float y,float z) -> void { return STREAMING::LOAD_SCENE(x,y,z); })
		.def_static("network_stop_load_scene", []() -> void { return STREAMING::NETWORK_STOP_LOAD_SCENE(); })
		.def_static("network_update_load_scene", []() -> Py_Any { return STREAMING::NETWORK_UPDATE_LOAD_SCENE(); })
		.def_static("new_load_scene_start", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,Py_Any p7) -> BOOL { return STREAMING::NEW_LOAD_SCENE_START(p0,p1,p2,p3,p4,p5,p6,p7.id); })
		.def_static("new_load_scene_stop", []() -> void { return STREAMING::NEW_LOAD_SCENE_STOP(); })
		.def_static("remove_anim_dict", [](char* animDict) -> void { return STREAMING::REMOVE_ANIM_DICT(animDict); })
		.def_static("remove_anim_set", [](char* animSet) -> void { return STREAMING::REMOVE_ANIM_SET(animSet); })
		.def_static("remove_clip_set", [](char* clipSet) -> void { return STREAMING::REMOVE_CLIP_SET(clipSet); })
		.def_static("remove_ipl", [](char* iplName) -> void { return STREAMING::REMOVE_IPL(iplName); })
		.def_static("remove_named_ptfx_asset", [](char* fxName) -> void { return STREAMING::_REMOVE_NAMED_PTFX_ASSET(fxName); })
		.def_static("remove_ptfx_asset", []() -> void { return STREAMING::REMOVE_PTFX_ASSET(); })
		.def_static("request_additional_collision_at_coord", [](float p0,float p1,float p2) -> void { return STREAMING::REQUEST_ADDITIONAL_COLLISION_AT_COORD(p0,p1,p2); })
		.def_static("request_anim_dict", [](char* animDict) -> void { return STREAMING::REQUEST_ANIM_DICT(animDict); })
		.def_static("request_anim_set", [](char* animSet) -> void { return STREAMING::REQUEST_ANIM_SET(animSet); })
		.def_static("request_clip_set", [](char* Alexandra) -> void { return STREAMING::REQUEST_CLIP_SET(Alexandra); })
		.def_static("request_collision_at_coord", [](float x,float y,float z) -> void { return STREAMING::REQUEST_COLLISION_AT_COORD(x,y,z); })
		.def_static("request_collision_for_model", [](Py_Hash model) -> void { return STREAMING::REQUEST_COLLISION_FOR_MODEL(model.id); })
		.def_static("request_ipl", [](char* iplName) -> void { return STREAMING::REQUEST_IPL(iplName); })
		.def_static("request_model", [](Py_Hash model) -> void { return STREAMING::REQUEST_MODEL(model.id); })
		.def_static("request_model_2", [](Py_Hash model) -> void { return STREAMING::_REQUEST_MODEL_2(model.id); })
		.def_static("request_named_ptfx_asset", [](char* fxName) -> void { return STREAMING::REQUEST_NAMED_PTFX_ASSET(fxName); })
		.def_static("request_ptfx_asset", []() -> void { return STREAMING::REQUEST_PTFX_ASSET(); })
		.def_static("set_ditch_police_models", [](Py_Any p0) -> void { return STREAMING::SET_DITCH_POLICE_MODELS(p0.id); })
		.def_static("set_focus_area", [](float x,float y,float z,float p3,float p4,float p5) -> void { return STREAMING::_SET_FOCUS_AREA(x,y,z,p3,p4,p5); })
		.def_static("set_focus_entity", [](Py_Entity entity) -> void { return STREAMING::SET_FOCUS_ENTITY(entity.id); })
		.def_static("set_game_pauses_for_streaming", [](BOOL toggle) -> void { return STREAMING::SET_GAME_PAUSES_FOR_STREAMING(toggle); })
		.def_static("set_hd_area", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return STREAMING::SET_HD_AREA(p0.id,p1.id,p2.id,p3.id); })
		.def_static("set_interior_active", [](int interiorID,BOOL toggle) -> void { return STREAMING::SET_INTERIOR_ACTIVE(interiorID,toggle); })
		.def_static("set_model_as_no_longer_needed", [](Py_Hash model) -> void { return STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model.id); })
		.def_static("set_ped_population_budget", [](int p0) -> void { return STREAMING::SET_PED_POPULATION_BUDGET(p0); })
		.def_static("set_player_inverted_up", []() -> Py_Any { return STREAMING::SET_PLAYER_INVERTED_UP(); })
		.def_static("set_reduce_ped_model_budget", [](BOOL toggle) -> void { return STREAMING::SET_REDUCE_PED_MODEL_BUDGET(toggle); })
		.def_static("set_reduce_vehicle_model_budget", [](BOOL toggle) -> void { return STREAMING::SET_REDUCE_VEHICLE_MODEL_BUDGET(toggle); })
		.def_static("set_srl_time", [](float p0) -> void { return STREAMING::SET_SRL_TIME(p0); })
		.def_static("set_streaming", [](BOOL toggle) -> void { return STREAMING::SET_STREAMING(toggle); })
		.def_static("set_vehicle_population_budget", [](int p0) -> void { return STREAMING::SET_VEHICLE_POPULATION_BUDGET(p0); })
		.def_static("start_player_switch", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return STREAMING::START_PLAYER_SWITCH(p0.id,p1.id,p2.id,p3.id); })
		.def_static("stop_player_switch", []() -> void { return STREAMING::STOP_PLAYER_SWITCH(); })
;
	custom(py_Streaming);
	py::class_<Py_Script> py_Script(m, "Script");
	py_Script
		.def_static("does_exist", [](char* scriptName) -> BOOL { return SCRIPT::DOES_SCRIPT_EXIST(scriptName); })
		.def_static("get_event_at_index", [](int p0,int eventIndex) -> int { return SCRIPT::GET_EVENT_AT_INDEX(p0,eventIndex); })
		.def_static("get_event_exists", [](int p0,int eventIndex) -> BOOL { return SCRIPT::GET_EVENT_EXISTS(p0,eventIndex); })
		.def_static("get_id_of_this_thread", []() -> int { return SCRIPT::GET_ID_OF_THIS_THREAD(); })
		.def_static("get_no_loading_screen", []() -> BOOL { return SCRIPT::_GET_NO_LOADING_SCREEN(); })
		.def_static("get_number_of_events", [](int p0) -> int { return SCRIPT::GET_NUMBER_OF_EVENTS(p0); })
		.def_static("get_number_of_instances_of_streamed_script", [](Py_Hash scriptHash) -> int { return SCRIPT::_GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT(scriptHash.id); })
		.def_static("get_this_hash", []() -> Py_Hash { return SCRIPT::_GET_THIS_SCRIPT_HASH(); })
		.def_static("get_this_name", []() -> char* { return SCRIPT::GET_THIS_SCRIPT_NAME(); })
		.def_static("get_thread_name", [](int threadId) -> char* { return SCRIPT::_GET_THREAD_NAME(threadId); })
		.def_static("has_loaded", [](char* scriptName) -> BOOL { return SCRIPT::HAS_SCRIPT_LOADED(scriptName); })
		.def_static("has_streamed_loaded", [](Py_Hash scriptHash) -> BOOL { return SCRIPT::_HAS_STREAMED_SCRIPT_LOADED(scriptHash.id); })
		.def_static("is_thread_active", [](int threadId) -> BOOL { return SCRIPT::IS_THREAD_ACTIVE(threadId); })
		.def_static("request_script", [](char* scriptName) -> void { return SCRIPT::REQUEST_SCRIPT(scriptName); })
		.def_static("request_streamed_script", [](Py_Hash scriptHash) -> void { return SCRIPT::_REQUEST_STREAMED_SCRIPT(scriptHash.id); })
		.def_static("set_as_no_longer_needed", [](char* scriptName) -> void { return SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(scriptName); })
		.def_static("set_no_loading_screen", [](BOOL toggle) -> void { return SCRIPT::SET_NO_LOADING_SCREEN(toggle); })
		.def_static("set_streamed_as_no_longer_needed", [](Py_Hash scriptHash) -> void { return SCRIPT::_SET_STREAMED_SCRIPT_AS_NO_LONGER_NEEDED(scriptHash.id); })
		.def_static("shutdown_loading_screen", []() -> void { return SCRIPT::SHUTDOWN_LOADING_SCREEN(); })
		.def_static("terminate_this_thread", []() -> void { return SCRIPT::TERMINATE_THIS_THREAD(); })
		.def_static("terminate_thread", [](int id) -> void { return SCRIPT::TERMINATE_THREAD(id); })
;
	custom(py_Script);
	py::class_<Py_Ui> py_Ui(m, "Ui");
	py_Ui
		.def_static("abort_text_chat", []() -> void { return UI::_ABORT_TEXT_CHAT(); })
		.def_static("activate_frontend_menu", [](Py_Hash menuhash,BOOL p1,int p2) -> void { return UI::ACTIVATE_FRONTEND_MENU(menuhash.id,p1,p2); })
		.def_static("add_blip_for_coord", [](float x,float y,float z) -> Py_Blip { return UI::ADD_BLIP_FOR_COORD(x,y,z); })
		.def_static("add_blip_for_entity", [](Py_Entity entity) -> int { return UI::ADD_BLIP_FOR_ENTITY(entity.id); })
		.def_static("add_blip_for_pickup", [](Py_Any p0) -> Py_Any { return UI::ADD_BLIP_FOR_PICKUP(p0.id); })
		.def_static("add_blip_for_radius", [](float x,float y,float z,float radius) -> Py_Blip { return UI::ADD_BLIP_FOR_RADIUS(x,y,z,radius); })
		.def_static("add_next_message_to_previous_briefs", [](BOOL p0) -> void { return UI::ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(p0); })
		.def_static("add_text_component_float", [](float value,int decimalPlaces) -> void { return UI::ADD_TEXT_COMPONENT_FLOAT(value,decimalPlaces); })
		.def_static("add_text_component_integer", [](int value) -> void { return UI::ADD_TEXT_COMPONENT_INTEGER(value); })
		.def_static("add_text_component_item_string", [](char* labelName) -> void { return UI::_ADD_TEXT_COMPONENT_ITEM_STRING(labelName); })
		.def_static("add_text_component_string", [](char* text) -> void { return UI::_ADD_TEXT_COMPONENT_STRING(text); })
		.def_static("add_text_component_string2", [](char* text) -> void { return UI::_ADD_TEXT_COMPONENT_STRING2(text); })
		.def_static("add_text_component_string3", [](char* text) -> void { return UI::_ADD_TEXT_COMPONENT_STRING3(text); })
		.def_static("add_text_component_substring_time", [](int timestamp,int flags) -> void { return UI::ADD_TEXT_COMPONENT_SUBSTRING_TIME(timestamp,flags); })
		.def_static("add_trevor_random_modifier", [](int headDisplayId) -> BOOL { return UI::ADD_TREVOR_RANDOM_MODIFIER(headDisplayId); })
		.def_static("begin_text_command_set_blip_name", [](char* gxtentry) -> void { return UI::BEGIN_TEXT_COMMAND_SET_BLIP_NAME(gxtentry); })
		.def_static("center_player_on_radar_this_frame", []() -> void { return UI::_CENTER_PLAYER_ON_RADAR_THIS_FRAME(); })
		.def_static("clear_additional_text", [](Py_Any additionalText,BOOL p1) -> void { return UI::CLEAR_ADDITIONAL_TEXT(additionalText.id,p1); })
		.def_static("clear_all_help_messages", []() -> void { return UI::CLEAR_ALL_HELP_MESSAGES(); })
		.def_static("clear_brief", []() -> void { return UI::CLEAR_BRIEF(); })
		.def_static("clear_floating_help", [](Py_Any p0,BOOL p1) -> void { return UI::CLEAR_FLOATING_HELP(p0.id,p1); })
		.def_static("clear_gps_flags", []() -> void { return UI::CLEAR_GPS_FLAGS(); })
		.def_static("clear_gps_player_waypoint", []() -> void { return UI::CLEAR_GPS_PLAYER_WAYPOINT(); })
		.def_static("clear_gps_race_track", []() -> void { return UI::CLEAR_GPS_RACE_TRACK(); })
		.def_static("clear_help", [](BOOL Enable) -> void { return UI::CLEAR_HELP(Enable); })
		.def_static("clear_ped_in_pause_menu", []() -> void { return UI::CLEAR_PED_IN_PAUSE_MENU(); })
		.def_static("clear_prints", []() -> void { return UI::CLEAR_PRINTS(); })
		.def_static("clear_small_prints", []() -> void { return UI::CLEAR_SMALL_PRINTS(); })
		.def_static("clear_this_print", [](char* p0) -> void { return UI::CLEAR_THIS_PRINT(p0); })
		.def_static("create_head_display", [](Py_Ped ped,char* username,BOOL pointedClanTag,BOOL isRockstarClan,char* clanTag,Py_Any p5) -> int { return UI::_CREATE_HEAD_DISPLAY(ped.id,username,pointedClanTag,isRockstarClan,clanTag,p5.id); })
		.def_static("disable_blip_name_for_var", []() -> Py_Any { return UI::DISABLE_BLIP_NAME_FOR_VAR(); })
		.def_static("disable_frontend_this_frame", []() -> void { return UI::DISABLE_FRONTEND_THIS_FRAME(); })
		.def_static("disable_radar_this_frame", []() -> void { return UI::_DISABLE_RADAR_THIS_FRAME(); })
		.def_static("display_ammo_this_frame", [](BOOL p0) -> void { return UI::DISPLAY_AMMO_THIS_FRAME(p0); })
		.def_static("display_area_name", [](BOOL toggle) -> void { return UI::DISPLAY_AREA_NAME(toggle); })
		.def_static("display_cash", [](BOOL toggle) -> void { return UI::DISPLAY_CASH(toggle); })
		.def_static("display_help_text_from_string_label", [](Py_Any p0,BOOL loop,BOOL beep,int shape) -> void { return UI::_DISPLAY_HELP_TEXT_FROM_STRING_LABEL(p0.id,loop,beep,shape); })
		.def_static("display_help_text_this_frame", [](char* message,BOOL p1) -> void { return UI::DISPLAY_HELP_TEXT_THIS_FRAME(message,p1); })
		.def_static("display_hud", [](BOOL Toggle) -> void { return UI::DISPLAY_HUD(Toggle); })
		.def_static("display_radar", [](BOOL Toggle) -> void { return UI::DISPLAY_RADAR(Toggle); })
		.def_static("display_sniper_scope_this_frame", []() -> void { return UI::DISPLAY_SNIPER_SCOPE_THIS_FRAME(); })
		.def_static("does_blip_exist", [](Py_Blip blip) -> BOOL { return UI::DOES_BLIP_EXIST(blip.id); })
		.def_static("does_ped_have_ai_blip", [](Py_Any p0) -> BOOL { return UI::DOES_PED_HAVE_AI_BLIP(p0.id); })
		.def_static("does_text_block_exist", [](char* gxt) -> BOOL { return UI::DOES_TEXT_BLOCK_EXIST(gxt); })
		.def_static("does_text_label_exist", [](char* gxt) -> BOOL { return UI::DOES_TEXT_LABEL_EXIST(gxt); })
		.def_static("draw_notification", [](BOOL blink,BOOL p1) -> int { return UI::_DRAW_NOTIFICATION(blink,p1); })
		.def_static("draw_notification_2", [](BOOL blink,BOOL p1) -> int { return UI::_DRAW_NOTIFICATION_2(blink,p1); })
		.def_static("draw_notification_3", [](BOOL blink,BOOL p1) -> int { return UI::_DRAW_NOTIFICATION_3(blink,p1); })
		.def_static("draw_notification_4", [](BOOL blink,BOOL p1) -> int { return UI::_DRAW_NOTIFICATION_4(blink,p1); })
		.def_static("draw_subtitle_timed", [](int time,BOOL p1) -> void { return UI::_DRAW_SUBTITLE_TIMED(time,p1); })
		.def_static("draw_text", [](float x,float y) -> void { return UI::_DRAW_TEXT(x,y); })
		.def_static("enable_deathblood_seethrough", [](BOOL p0) -> void { return UI::ENABLE_DEATHBLOOD_SEETHROUGH(p0); })
		.def_static("end_text_command_set_blip_name", [](Py_Blip blip) -> void { return UI::END_TEXT_COMMAND_SET_BLIP_NAME(blip.id); })
		.def_static("flash_ability_bar", [](Py_Any p0) -> void { return UI::FLASH_ABILITY_BAR(p0.id); })
		.def_static("flash_minimap_display", []() -> void { return UI::FLASH_MINIMAP_DISPLAY(); })
		.def_static("flash_wanted_display", [](BOOL p0) -> void { return UI::FLASH_WANTED_DISPLAY(p0); })
		.def_static("get_active_notification_handle", []() -> Py_Any { return UI::_GET_ACTIVE_NOTIFICATION_HANDLE(); })
		.def_static("get_blip_alpha", [](Py_Blip blip) -> int { return UI::GET_BLIP_ALPHA(blip.id); })
		.def_static("get_blip_colour", [](Py_Blip blip) -> int { return UI::GET_BLIP_COLOUR(blip.id); })
		.def_static("get_blip_coords", [](Py_Any p0) -> Vector3 { return UI::GET_BLIP_COORDS(p0.id); })
		.def_static("get_blip_from_entity", [](Py_Entity p0) -> Py_Blip { return UI::GET_BLIP_FROM_ENTITY(p0.id); })
		.def_static("get_blip_hud_colour", [](Py_Blip blip) -> Py_Any { return UI::GET_BLIP_HUD_COLOUR(blip.id); })
		.def_static("get_blip_info_id_coord", [](Py_Any p0) -> Vector3 { return UI::GET_BLIP_INFO_ID_COORD(p0.id); })
		.def_static("get_blip_info_id_display", [](Py_Blip blip) -> Py_Any { return UI::GET_BLIP_INFO_ID_DISPLAY(blip.id); })
		.def_static("get_blip_info_id_entity_index", [](Py_Any p0) -> Py_Any { return UI::GET_BLIP_INFO_ID_ENTITY_INDEX(p0.id); })
		.def_static("get_blip_info_id_iterator", []() -> Py_Any { return UI::_GET_BLIP_INFO_ID_ITERATOR(); })
		.def_static("get_blip_info_id_pickup_index", [](Py_Any p0) -> Py_Any { return UI::GET_BLIP_INFO_ID_PICKUP_INDEX(p0.id); })
		.def_static("get_blip_info_id_type", [](Py_Blip blip) -> Py_Any { return UI::GET_BLIP_INFO_ID_TYPE(blip.id); })
		.def_static("get_blip_sprite", [](Py_Blip blip) -> int { return UI::GET_BLIP_SPRITE(blip.id); })
		.def_static("get_current_website_id", []() -> int { return UI::GET_CURRENT_WEBSITE_ID(); })
		.def_static("get_default_script_rendertarget_render_id", []() -> Py_Any { return UI::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID(); })
		.def_static("get_first_blip_info_id", [](Py_Blip blip) -> Py_Blip { return UI::GET_FIRST_BLIP_INFO_ID(blip.id); })
		.def_static("get_hud_component_position", [](Py_Any p0) -> Vector3 { return UI::GET_HUD_COMPONENT_POSITION(p0.id); })
		.def_static("get_label_text", [](char* labelName) -> char* { return UI::_GET_LABEL_TEXT(labelName); })
		.def_static("get_length_of_literal_string", [](char* string) -> int { return UI::GET_LENGTH_OF_LITERAL_STRING(string); })
		.def_static("get_length_of_string_with_this_text_label", [](char* gxt) -> Py_Any { return UI::GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(gxt); })
		.def_static("get_main_player_blip_id", []() -> Py_Blip { return UI::GET_MAIN_PLAYER_BLIP_ID(); })
		.def_static("get_named_rendertarget_render_id", [](char* p0) -> Py_Any { return UI::GET_NAMED_RENDERTARGET_RENDER_ID(p0); })
		.def_static("get_next_blip_info_id", [](Py_Blip blip) -> Py_Blip { return UI::GET_NEXT_BLIP_INFO_ID(blip.id); })
		.def_static("get_number_of_active_blips", []() -> Py_Any { return UI::GET_NUMBER_OF_ACTIVE_BLIPS(); })
		.def_static("get_pause_menu_state", []() -> int { return UI::GET_PAUSE_MENU_STATE(); })
		.def_static("get_street_name_from_hash_key", [](Py_Hash hash) -> char* { return UI::GET_STREET_NAME_FROM_HASH_KEY(hash.id); })
		.def_static("get_text_screen_width", [](BOOL p0) -> float { return UI::_GET_TEXT_SCREEN_WIDTH(p0); })
		.def_static("get_text_substring", [](char* text,int position,int length) -> char* { return UI::_GET_TEXT_SUBSTRING(text,position,length); })
		.def_static("get_text_substring_safe", [](char* text,int position,int length,int maxLength) -> char* { return UI::_GET_TEXT_SUBSTRING_SAFE(text,position,length,maxLength); })
		.def_static("get_text_substring_slice", [](char* text,int startPosition,int endPosition) -> char* { return UI::_GET_TEXT_SUBSTRING_SLICE(text,startPosition,endPosition); })
		.def_static("give_ped_to_pause_menu", [](Py_Any p0,Py_Any p1) -> void { return UI::GIVE_PED_TO_PAUSE_MENU(p0.id,p1.id); })
		.def_static("has_additional_text_loaded", [](Py_Any additionalText) -> BOOL { return UI::HAS_ADDITIONAL_TEXT_LOADED(additionalText.id); })
		.def_static("has_head_display_loaded", [](int headDisplayId) -> BOOL { return UI::_HAS_HEAD_DISPLAY_LOADED(headDisplayId); })
		.def_static("has_this_additional_text_loaded", [](char* gxt,int slot) -> BOOL { return UI::HAS_THIS_ADDITIONAL_TEXT_LOADED(gxt,slot); })
		.def_static("hide_help_text_this_frame", []() -> void { return UI::HIDE_HELP_TEXT_THIS_FRAME(); })
		.def_static("hide_hud_and_radar_this_frame", []() -> void { return UI::HIDE_HUD_AND_RADAR_THIS_FRAME(); })
		.def_static("hide_hud_component_this_frame", [](int id) -> void { return UI::HIDE_HUD_COMPONENT_THIS_FRAME(id); })
		.def_static("hide_loading_on_fade_this_frame", []() -> void { return UI::HIDE_LOADING_ON_FADE_THIS_FRAME(); })
		.def_static("hide_number_on_blip", [](Py_Blip blip) -> void { return UI::HIDE_NUMBER_ON_BLIP(blip.id); })
		.def_static("hide_scripted_hud_component_this_frame", [](int id) -> void { return UI::HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id); })
		.def_static("hide_special_ability_lockon_operation", [](Py_Any p0,BOOL p1) -> void { return UI::HIDE_SPECIAL_ABILITY_LOCKON_OPERATION(p0.id,p1); })
		.def_static("is_blip_flashing", [](Py_Blip blip) -> BOOL { return UI::IS_BLIP_FLASHING(blip.id); })
		.def_static("is_blip_on_minimap", [](Py_Blip blip) -> BOOL { return UI::IS_BLIP_ON_MINIMAP(blip.id); })
		.def_static("is_blip_short_range", [](Py_Blip blip) -> BOOL { return UI::IS_BLIP_SHORT_RANGE(blip.id); })
		.def_static("is_help_message_being_displayed", []() -> BOOL { return UI::IS_HELP_MESSAGE_BEING_DISPLAYED(); })
		.def_static("is_help_message_fading_out", []() -> BOOL { return UI::IS_HELP_MESSAGE_FADING_OUT(); })
		.def_static("is_help_message_on_screen", []() -> BOOL { return UI::IS_HELP_MESSAGE_ON_SCREEN(); })
		.def_static("is_hud_component_active", [](int id) -> BOOL { return UI::IS_HUD_COMPONENT_ACTIVE(id); })
		.def_static("is_hud_hidden", []() -> BOOL { return UI::IS_HUD_HIDDEN(); })
		.def_static("is_hud_preference_switched_on", []() -> BOOL { return UI::IS_HUD_PREFERENCE_SWITCHED_ON(); })
		.def_static("is_message_being_displayed", []() -> BOOL { return UI::IS_MESSAGE_BEING_DISPLAYED(); })
		.def_static("is_mission_creator_blip", [](Py_Blip blip) -> BOOL { return UI::IS_MISSION_CREATOR_BLIP(blip.id); })
		.def_static("is_named_rendertarget_linked", [](Py_Hash hash) -> BOOL { return UI::IS_NAMED_RENDERTARGET_LINKED(hash.id); })
		.def_static("is_named_rendertarget_registered", [](char* p0) -> BOOL { return UI::IS_NAMED_RENDERTARGET_REGISTERED(p0); })
		.def_static("is_pause_menu_active", []() -> BOOL { return UI::IS_PAUSE_MENU_ACTIVE(); })
		.def_static("is_pause_menu_restarting", []() -> BOOL { return UI::IS_PAUSE_MENU_RESTARTING(); })
		.def_static("is_radar_hidden", []() -> BOOL { return UI::IS_RADAR_HIDDEN(); })
		.def_static("is_radar_preference_switched_on", []() -> BOOL { return UI::IS_RADAR_PREFERENCE_SWITCHED_ON(); })
		.def_static("is_scripted_hud_component_active", [](int id) -> BOOL { return UI::IS_SCRIPTED_HUD_COMPONENT_ACTIVE(id); })
		.def_static("is_streaming_additional_text", [](Py_Any additionalText) -> BOOL { return UI::IS_STREAMING_ADDITIONAL_TEXT(additionalText.id); })
		.def_static("is_subtitle_preference_switched_on", []() -> BOOL { return UI::IS_SUBTITLE_PREFERENCE_SWITCHED_ON(); })
		.def_static("is_text_chat_active", []() -> BOOL { return UI::_IS_TEXT_CHAT_ACTIVE(); })
		.def_static("is_waypoint_active", []() -> BOOL { return UI::IS_WAYPOINT_ACTIVE(); })
		.def_static("key_hud_colour", [](BOOL p0,Py_Any p1) -> void { return UI::KEY_HUD_COLOUR(p0,p1.id); })
		.def_static("link_named_rendertarget", [](Py_Hash hash) -> void { return UI::LINK_NAMED_RENDERTARGET(hash.id); })
		.def_static("lock_minimap_angle", [](int angle) -> void { return UI::LOCK_MINIMAP_ANGLE(angle); })
		.def_static("lock_minimap_position", [](float x,float y) -> void { return UI::LOCK_MINIMAP_POSITION(x,y); })
		.def_static("object_decal_toggle", [](Py_Hash hash) -> void { return UI::OBJECT_DECAL_TOGGLE(hash.id); })
		.def_static("pulse_blip", [](Py_Blip blip) -> void { return UI::PULSE_BLIP(blip.id); })
		.def_static("refresh_waypoint", []() -> void { return UI::REFRESH_WAYPOINT(); })
		.def_static("register_named_rendertarget", [](char* p0,BOOL p1) -> BOOL { return UI::REGISTER_NAMED_RENDERTARGET(p0,p1); })
		.def_static("remove_multiplayer_bank_cash", []() -> void { return UI::REMOVE_MULTIPLAYER_BANK_CASH(); })
		.def_static("remove_multiplayer_hud_cash", []() -> void { return UI::REMOVE_MULTIPLAYER_HUD_CASH(); })
		.def_static("remove_notification", [](int handle) -> void { return UI::_REMOVE_NOTIFICATION(handle); })
		.def_static("request_additional_text", [](char* gxt,int slot) -> void { return UI::REQUEST_ADDITIONAL_TEXT(gxt,slot); })
		.def_static("request_additional_text_2", [](char* gxt,int slot) -> void { return UI::_REQUEST_ADDITIONAL_TEXT_2(gxt,slot); })
		.def_static("reset_hud_component_values", [](Py_Any p0) -> void { return UI::RESET_HUD_COMPONENT_VALUES(p0.id); })
		.def_static("reset_reticule_values", []() -> void { return UI::RESET_RETICULE_VALUES(); })
		.def_static("responding_as_temp", [](float p0) -> void { return UI::RESPONDING_AS_TEMP(p0); })
		.def_static("restart_frontend_menu", [](Py_Hash menuHash,int p1) -> void { return UI::RESTART_FRONTEND_MENU(menuHash.id,p1); })
		.def_static("set_ability_bar_value", [](float p0,float p1) -> void { return UI::SET_ABILITY_BAR_VALUE(p0,p1); })
		.def_static("set_blip_alpha", [](Py_Blip blip,int alpha) -> void { return UI::SET_BLIP_ALPHA(blip.id,alpha); })
		.def_static("set_blip_as_friendly", [](Py_Blip blip,BOOL toggle) -> void { return UI::SET_BLIP_AS_FRIENDLY(blip.id,toggle); })
		.def_static("set_blip_as_mission_creator_blip", [](Py_Blip blip,BOOL toggle) -> void { return UI::SET_BLIP_AS_MISSION_CREATOR_BLIP(blip.id,toggle); })
		.def_static("set_blip_as_short_range", [](Py_Blip blip,BOOL p1) -> void { return UI::SET_BLIP_AS_SHORT_RANGE(blip.id,p1); })
		.def_static("set_blip_bright", [](Py_Any p0,Py_Any p1) -> void { return UI::SET_BLIP_BRIGHT(p0.id,p1.id); })
		.def_static("set_blip_category", [](Py_Blip blip,int index) -> void { return UI::SET_BLIP_CATEGORY(blip.id,index); })
		.def_static("set_blip_colour", [](Py_Blip blip,int color) -> void { return UI::SET_BLIP_COLOUR(blip.id,color); })
		.def_static("set_blip_coords", [](Py_Blip p0,float p1,float p2,float p3) -> void { return UI::SET_BLIP_COORDS(p0.id,p1,p2,p3); })
		.def_static("set_blip_display", [](Py_Blip blip,int p1) -> void { return UI::SET_BLIP_DISPLAY(blip.id,p1); })
		.def_static("set_blip_fade", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return UI::SET_BLIP_FADE(p0.id,p1.id,p2.id); })
		.def_static("set_blip_flash_interval", [](Py_Blip blip,Py_Any p1) -> void { return UI::SET_BLIP_FLASH_INTERVAL(blip.id,p1.id); })
		.def_static("set_blip_flash_timer", [](Py_Blip blip,int duration) -> void { return UI::SET_BLIP_FLASH_TIMER(blip.id,duration); })
		.def_static("set_blip_flashes", [](Py_Blip blip,BOOL toggle) -> void { return UI::SET_BLIP_FLASHES(blip.id,toggle); })
		.def_static("set_blip_flashes_alternate", [](Py_Blip blip,BOOL toggle) -> void { return UI::SET_BLIP_FLASHES_ALTERNATE(blip.id,toggle); })
		.def_static("set_blip_high_detail", [](Py_Any p0,BOOL p1) -> void { return UI::SET_BLIP_HIGH_DETAIL(p0.id,p1); })
		.def_static("set_blip_name_from_text_file", [](Py_Blip blip,char* blipname) -> void { return UI::SET_BLIP_NAME_FROM_TEXT_FILE(blip.id,blipname); })
		.def_static("set_blip_name_to_player_name", [](Py_Any p0,Py_Any p1) -> void { return UI::SET_BLIP_NAME_TO_PLAYER_NAME(p0.id,p1.id); })
		.def_static("set_blip_priority", [](Py_Blip blip,Py_Any p1) -> void { return UI::SET_BLIP_PRIORITY(blip.id,p1.id); })
		.def_static("set_blip_rotation", [](Py_Blip blip,int rotation) -> void { return UI::SET_BLIP_ROTATION(blip.id,rotation); })
		.def_static("set_blip_route", [](Py_Blip blip,BOOL enabled) -> void { return UI::SET_BLIP_ROUTE(blip.id,enabled); })
		.def_static("set_blip_route_colour", [](Py_Blip blip,int colour) -> void { return UI::SET_BLIP_ROUTE_COLOUR(blip.id,colour); })
		.def_static("set_blip_scale", [](Py_Blip blip,float scale) -> void { return UI::SET_BLIP_SCALE(blip.id,scale); })
		.def_static("set_blip_secondary_colour", [](Py_Blip blip,float r,float g,float b) -> void { return UI::SET_BLIP_SECONDARY_COLOUR(blip.id,r,g,b); })
		.def_static("set_blip_show_cone", [](Py_Any p0,BOOL p1) -> void { return UI::SET_BLIP_SHOW_CONE(p0.id,p1); })
		.def_static("set_blip_show_heading_indicator", [](Py_Blip blip,BOOL toggle) -> void { return UI::_SET_BLIP_SHOW_HEADING_INDICATOR(blip.id,toggle); })
		.def_static("set_blip_sprite", [](Py_Blip blip,int spriteId) -> void { return UI::SET_BLIP_SPRITE(blip.id,spriteId); })
		.def_static("set_draw_map_visible", [](BOOL toggle) -> void { return UI::_SET_DRAW_MAP_VISIBLE(toggle); })
		.def_static("set_frontend_active", [](BOOL p0) -> void { return UI::SET_FRONTEND_ACTIVE(p0); })
		.def_static("set_gps_flags", [](Py_Any p0,float p1) -> void { return UI::SET_GPS_FLAGS(p0.id,p1); })
		.def_static("set_gps_flashes", [](BOOL toggle) -> void { return UI::SET_GPS_FLASHES(toggle); })
		.def_static("set_head_display_flag", [](int headDisplayId,int sprite,BOOL enabled) -> void { return UI::_SET_HEAD_DISPLAY_FLAG(headDisplayId,sprite,enabled); })
		.def_static("set_head_display_string", [](int headDisplayId,char* string) -> void { return UI::_SET_HEAD_DISPLAY_STRING(headDisplayId,string); })
		.def_static("set_head_display_wanted", [](int headDisplayId,int wantedlvl) -> void { return UI::_SET_HEAD_DISPLAY_WANTED(headDisplayId,wantedlvl); })
		.def_static("set_hud_component_position", [](Py_Any p0,float p1,float p2) -> void { return UI::SET_HUD_COMPONENT_POSITION(p0.id,p1,p2); })
		.def_static("set_minimap_attitude_indicator_level", [](float p0,Py_Any p1) -> void { return UI::_SET_MINIMAP_ATTITUDE_INDICATOR_LEVEL(p0,p1.id); })
		.def_static("set_minimap_block_waypoint", [](BOOL p0) -> void { return UI::SET_MINIMAP_BLOCK_WAYPOINT(p0); })
		.def_static("set_minimap_component", [](Py_Any p0,Py_Any p1,Py_Any p2) -> Py_Any { return UI::SET_MINIMAP_COMPONENT(p0.id,p1.id,p2.id); })
		.def_static("set_mission_name", [](BOOL p0,char* name) -> void { return UI::SET_MISSION_NAME(p0,name); })
		.def_static("set_multiplayer_bank_cash", []() -> void { return UI::SET_MULTIPLAYER_BANK_CASH(); })
		.def_static("set_multiplayer_hud_cash", [](int p0,int p1) -> void { return UI::SET_MULTIPLAYER_HUD_CASH(p0,p1); })
		.def_static("set_new_waypoint", [](float x,float y) -> void { return UI::SET_NEW_WAYPOINT(x,y); })
		.def_static("set_notification_message", [](char* picName1,char* picName2,BOOL flash,int iconType,char* sender,char* subject) -> int { return UI::_SET_NOTIFICATION_MESSAGE(picName1,picName2,flash,iconType,sender,subject); })
		.def_static("set_notification_message_clan_tag", [](char* picName1,char* picName2,BOOL flash,int iconType,char* sender,char* subject,float duration,char* clanTag) -> int { return UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG(picName1,picName2,flash,iconType,sender,subject,duration,clanTag); })
		.def_static("set_notification_message_clan_tag_2", [](char* picName1,char* picName2,BOOL flash,int iconType1,char* sender,char* subject,float duration,char* clanTag,int iconType2,int p9) -> int { return UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2(picName1,picName2,flash,iconType1,sender,subject,duration,clanTag,iconType2,p9); })
		.def_static("set_notification_text_entry", [](char* type) -> void { return UI::_SET_NOTIFICATION_TEXT_ENTRY(type); })
		.def_static("set_pause_menu_active", [](BOOL toggle) -> void { return UI::SET_PAUSE_MENU_ACTIVE(toggle); })
		.def_static("set_player_blip_position_this_frame", [](float x,float y) -> void { return UI::_SET_PLAYER_BLIP_POSITION_THIS_FRAME(x,y); })
		.def_static("set_radar_as_exterior_this_frame", []() -> void { return UI::SET_RADAR_AS_EXTERIOR_THIS_FRAME(); })
		.def_static("set_radar_as_interior_this_frame", [](Py_Hash interior,float x,float y,int z,int p4) -> void { return UI::SET_RADAR_AS_INTERIOR_THIS_FRAME(interior.id,x,y,z,p4); })
		.def_static("set_radar_bigmap_enabled", [](BOOL toggleBigMap,BOOL showFullMap) -> void { return UI::_SET_RADAR_BIGMAP_ENABLED(toggleBigMap,showFullMap); })
		.def_static("set_radar_zoom", [](int p0) -> void { return UI::SET_RADAR_ZOOM(p0); })
		.def_static("set_radar_zoom_level_this_frame", [](float zoomLevel) -> void { return UI::_SET_RADAR_ZOOM_LEVEL_THIS_FRAME(zoomLevel); })
		.def_static("set_singleplayer_hud_cash", [](int pocketcash,int bankcash) -> void { return UI::_SET_SINGLEPLAYER_HUD_CASH(pocketcash,bankcash); })
		.def_static("set_text_centre", [](BOOL align) -> void { return UI::SET_TEXT_CENTRE(align); })
		.def_static("set_text_chat_unk", [](BOOL p0) -> void { return UI::_SET_TEXT_CHAT_UNK(p0); })
		.def_static("set_text_colour", [](int red,int green,int blue,int alpha) -> void { return UI::SET_TEXT_COLOUR(red,green,blue,alpha); })
		.def_static("set_text_component_format", [](char* inputType) -> void { return UI::_SET_TEXT_COMPONENT_FORMAT(inputType); })
		.def_static("set_text_drop_shadow", []() -> void { return UI::SET_TEXT_DROP_SHADOW(); })
		.def_static("set_text_dropshadow", [](int distance,int r,int g,int b,int a) -> void { return UI::SET_TEXT_DROPSHADOW(distance,r,g,b,a); })
		.def_static("set_text_edge", [](Py_Hash p0,int r,int g,int b,int a) -> void { return UI::SET_TEXT_EDGE(p0.id,r,g,b,a); })
		.def_static("set_text_entry", [](char* text) -> void { return UI::_SET_TEXT_ENTRY(text); })
		.def_static("set_text_entry_2", [](char* p0) -> void { return UI::_SET_TEXT_ENTRY_2(p0); })
		.def_static("set_text_entry_for_width", [](char* text) -> void { return UI::_SET_TEXT_ENTRY_FOR_WIDTH(text); })
		.def_static("set_text_font", [](int fontType) -> void { return UI::SET_TEXT_FONT(fontType); })
		.def_static("set_text_gxt_entry", [](char* entry) -> void { return UI::_SET_TEXT_GXT_ENTRY(entry); })
		.def_static("set_text_justification", [](int justifyType) -> void { return UI::SET_TEXT_JUSTIFICATION(justifyType); })
		.def_static("set_text_leading", [](BOOL p0) -> void { return UI::SET_TEXT_LEADING(p0); })
		.def_static("set_text_outline", []() -> void { return UI::SET_TEXT_OUTLINE(); })
		.def_static("set_text_proportional", [](BOOL p0) -> void { return UI::SET_TEXT_PROPORTIONAL(p0); })
		.def_static("set_text_render_id", [](Py_Any p0) -> void { return UI::SET_TEXT_RENDER_ID(p0.id); })
		.def_static("set_text_right_justify", [](BOOL toggle) -> void { return UI::SET_TEXT_RIGHT_JUSTIFY(toggle); })
		.def_static("set_text_scale", [](float p0,float size) -> void { return UI::SET_TEXT_SCALE(p0,size); })
		.def_static("set_text_wrap", [](float start,float end) -> void { return UI::SET_TEXT_WRAP(start,end); })
		.def_static("set_waypoint_off", []() -> void { return UI::SET_WAYPOINT_OFF(); })
		.def_static("set_widescreen_format", [](Py_Any p0) -> void { return UI::SET_WIDESCREEN_FORMAT(p0.id); })
		.def_static("show_cursor_this_frame", []() -> void { return UI::_SHOW_CURSOR_THIS_FRAME(); })
		.def_static("show_hud_component_this_frame", [](int id) -> void { return UI::SHOW_HUD_COMPONENT_THIS_FRAME(id); })
		.def_static("show_number_on_blip", [](Py_Blip blip,int number) -> void { return UI::SHOW_NUMBER_ON_BLIP(blip.id,number); })
		.def_static("show_social_club_legal_screen", []() -> void { return UI::_SHOW_SOCIAL_CLUB_LEGAL_SCREEN(); })
		.def_static("show_weapon_wheel", [](BOOL forcedShow) -> void { return UI::_SHOW_WEAPON_WHEEL(forcedShow); })
		.def_static("toggle_stealth_radar", [](BOOL toggle) -> void { return UI::TOGGLE_STEALTH_RADAR(toggle); })
		.def_static("unlock_minimap_angle", []() -> void { return UI::UNLOCK_MINIMAP_ANGLE(); })
		.def_static("unlock_minimap_position", []() -> void { return UI::UNLOCK_MINIMAP_POSITION(); })
;
	custom(py_Ui);
	py::class_<Py_Graphics> py_Graphics(m, "Graphics");
	py_Graphics
		.def_static("add_clan_decal_to_vehicle", [](Py_Vehicle vehicle,Py_Ped ped,int boneIndex,float x1,float x2,float x3,float y1,float y2,float y3,float z1,float z2,float z3,float scale,Py_Any p13,int alpha) -> BOOL { return GRAPHICS::_ADD_CLAN_DECAL_TO_VEHICLE(vehicle.id,ped.id,boneIndex,x1,x2,x3,y1,y2,y3,z1,z2,z3,scale,p13.id,alpha); })
		.def_static("add_decal", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,float p8,float p9,float p10,float p11,float p12,float p13,float p14,float p15,float p16,BOOL p17,BOOL p18,BOOL p19) -> Py_Any { return GRAPHICS::ADD_DECAL(p0.id,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19); })
		.def_static("add_entity_icon", [](Py_Entity entity,char* icon) -> Py_Any { return GRAPHICS::ADD_ENTITY_ICON(entity.id,icon); })
		.def_static("add_petrol_decal", [](float x,float y,float z,float Groundlvl,float Width,float Transparency) -> Py_Any { return GRAPHICS::ADD_PETROL_DECAL(x,y,z,Groundlvl,Width,Transparency); })
		.def_static("attach_tv_audio_to_entity", [](Py_Entity entity) -> void { return GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(entity.id); })
		.def_static("begin_text_component", [](char* componentType) -> void { return GRAPHICS::_BEGIN_TEXT_COMPONENT(componentType); })
		.def_static("call_scaleform_movie_function_float_params", [](int scaleform,char* functionName,float p2,float p3,float p4,float p5,float p6) -> void { return GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_FLOAT_PARAMS(scaleform,functionName,p2,p3,p4,p5,p6); })
		.def_static("call_scaleform_movie_function_mixed_params", [](int scaleform,char* functionName,float floatParam1,float floatParam2,float floatParam3,float floatParam4,float floatParam5,char* stringParam1,char* stringParam2,char* stringParam3,char* stringParam4,char* stringParam5) -> void { return GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform,functionName,floatParam1,floatParam2,floatParam3,floatParam4,floatParam5,stringParam1,stringParam2,stringParam3,stringParam4,stringParam5); })
		.def_static("call_scaleform_movie_function_string_params", [](int scaleform,char* functionName,char* param1,char* param2,char* param3,char* param4,char* param5) -> void { return GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_STRING_PARAMS(scaleform,functionName,param1,param2,param3,param4,param5); })
		.def_static("call_scaleform_movie_method", [](int scaleform,char* method) -> void { return GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD(scaleform,method); })
		.def_static("clear_draw_origin", []() -> void { return GRAPHICS::CLEAR_DRAW_ORIGIN(); })
		.def_static("clear_timecycle_modifier", []() -> void { return GRAPHICS::CLEAR_TIMECYCLE_MODIFIER(); })
		.def_static("create_checkpoint", [](int Type,float x,float y,float z,float x2,float y2,float z2,float radius,int R,int G,int B,int Alpha,int p12) -> Py_Any { return GRAPHICS::CREATE_CHECKPOINT(Type,x,y,z,x2,y2,z2,radius,R,G,B,Alpha,p12); })
		.def_static("create_tracked_point", []() -> Py_Object { return GRAPHICS::CREATE_TRACKED_POINT(); })
		.def_static("delete_checkpoint", [](Py_Any checkpoint) -> void { return GRAPHICS::DELETE_CHECKPOINT(checkpoint.id); })
		.def_static("destroy_tracked_point", [](Py_Object point) -> void { return GRAPHICS::DESTROY_TRACKED_POINT(point.id); })
		.def_static("disable_vehicle_distantlights", [](BOOL toggle) -> void { return GRAPHICS::DISABLE_VEHICLE_DISTANTLIGHTS(toggle); })
		.def_static("does_particle_fx_looped_exist", [](int ptfxHandle) -> BOOL { return GRAPHICS::DOES_PARTICLE_FX_LOOPED_EXIST(ptfxHandle); })
		.def_static("draw_box", [](float x1,float y1,float z1,float x2,float y2,float z2,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_BOX(x1,y1,z1,x2,y2,z2,r,g,b,alpha); })
		.def_static("draw_debug_box", [](float x1,float y1,float z1,float x2,float y2,float z2,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_DEBUG_BOX(x1,y1,z1,x2,y2,z2,r,g,b,alpha); })
		.def_static("draw_debug_cross", [](float x,float y,float z,float size,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_DEBUG_CROSS(x,y,z,size,r,g,b,alpha); })
		.def_static("draw_debug_line", [](float x1,float y1,float z1,float x2,float y2,float z2,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_DEBUG_LINE(x1,y1,z1,x2,y2,z2,r,g,b,alpha); })
		.def_static("draw_debug_line_with_two_colours", [](float x1,float y1,float z1,float x2,float y2,float z2,int r1,int g1,int b1,int r2,int g2,int b2,int alpha1,int alpha2) -> void { return GRAPHICS::DRAW_DEBUG_LINE_WITH_TWO_COLOURS(x1,y1,z1,x2,y2,z2,r1,g1,b1,r2,g2,b2,alpha1,alpha2); })
		.def_static("draw_debug_sphere", [](float x,float y,float z,float radius,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_DEBUG_SPHERE(x,y,z,radius,r,g,b,alpha); })
		.def_static("draw_debug_text", [](char* text,float x,float y,float z,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_DEBUG_TEXT(text,x,y,z,r,g,b,alpha); })
		.def_static("draw_debug_text_2d", [](char* text,float x,float y,float z,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_DEBUG_TEXT_2D(text,x,y,z,r,g,b,alpha); })
		.def_static("draw_light_with_range", [](float x,float y,float z,int r,int g,int b,float range,float intensity) -> void { return GRAPHICS::DRAW_LIGHT_WITH_RANGE(x,y,z,r,g,b,range,intensity); })
		.def_static("draw_light_with_range_with_shadow", [](float x,float y,float z,int r,int g,int b,float range,float intensity,float shadow) -> void { return GRAPHICS::_DRAW_LIGHT_WITH_RANGE_WITH_SHADOW(x,y,z,r,g,b,range,intensity,shadow); })
		.def_static("draw_line", [](float x1,float y1,float z1,float x2,float y2,float z2,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_LINE(x1,y1,z1,x2,y2,z2,r,g,b,alpha); })
		.def_static("draw_marker", [](int type,float x,float y,float z,float dirX,float dirY,float dirZ,float rotX,float rotY,float rotZ,float scaleX,float scaleY,float scaleZ,int colorR,int colorG,int colorB,int alpha,BOOL bobUpAndDown,BOOL faceCamera,int p19,BOOL rotate,char* textureDict,char* textureName,BOOL drawOnEnts) -> void { return GRAPHICS::DRAW_MARKER(type,x,y,z,dirX,dirY,dirZ,rotX,rotY,rotZ,scaleX,scaleY,scaleZ,colorR,colorG,colorB,alpha,bobUpAndDown,faceCamera,p19,rotate,textureDict,textureName,drawOnEnts); })
		.def_static("draw_poly", [](float x1,float y1,float z1,float x2,float y2,float z2,float x3,float y3,float z3,int r,int g,int b,int alpha) -> void { return GRAPHICS::DRAW_POLY(x1,y1,z1,x2,y2,z2,x3,y3,z3,r,g,b,alpha); })
		.def_static("draw_rect", [](float posX,float posY,float width,float height,int R,int G,int B,int A) -> void { return GRAPHICS::DRAW_RECT(posX,posY,width,height,R,G,B,A); })
		.def_static("draw_scaleform_movie", [](int handle,float posX,float posY,float width,float height,int red,int green,int blue,int alpha,int unkb) -> void { return GRAPHICS::DRAW_SCALEFORM_MOVIE(handle,posX,posY,width,height,red,green,blue,alpha,unkb); })
		.def_static("draw_scaleform_movie_3d", [](int scaleform,float posX,float posY,float posZ,float rotX,float rotY,float rotZ,float p7,float p8,float p9,float scaleX,float scaleY,float scaleZ,Py_Any p13) -> void { return GRAPHICS::DRAW_SCALEFORM_MOVIE_3D(scaleform,posX,posY,posZ,rotX,rotY,rotZ,p7,p8,p9,scaleX,scaleY,scaleZ,p13.id); })
		.def_static("draw_scaleform_movie_3d_non_additive", [](int scaleform,float posX,float posY,float posZ,float rotX,float rotY,float rotZ,float p7,float p8,float p9,float scaleX,float scaleY,float scaleZ,Py_Any p13) -> void { return GRAPHICS::_DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE(scaleform,posX,posY,posZ,rotX,rotY,rotZ,p7,p8,p9,scaleX,scaleY,scaleZ,p13.id); })
		.def_static("draw_scaleform_movie_fullscreen", [](int scaleform,int red,int green,int blue,int alpha,Py_Any unkb) -> void { return GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(scaleform,red,green,blue,alpha,unkb.id); })
		.def_static("draw_scaleform_movie_fullscreen_masked", [](int scaleform1,int scaleform2,int red,int green,int blue,int alpha) -> void { return GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(scaleform1,scaleform2,red,green,blue,alpha); })
		.def_static("draw_spot_light", [](float x,float y,float z,float dirVectorX,float dirVectorY,float dirVectorZ,int r,int g,int b,float distance,float brightness,float roundness,float radius,float fadeout) -> void { return GRAPHICS::DRAW_SPOT_LIGHT(x,y,z,dirVectorX,dirVectorY,dirVectorZ,r,g,b,distance,brightness,roundness,radius,fadeout); })
		.def_static("draw_spot_light_with_shadow", [](float x,float y,float z,float dirVectorX,float dirVectorY,float dirVectorZ,int r,int g,int b,float distance,float brightness,float roundness,float radius,float fadeout,float shadow) -> void { return GRAPHICS::_DRAW_SPOT_LIGHT_WITH_SHADOW(x,y,z,dirVectorX,dirVectorY,dirVectorZ,r,g,b,distance,brightness,roundness,radius,fadeout,shadow); })
		.def_static("draw_sprite", [](char* textureDict,char* textureName,float screenX,float screenY,float scaleX,float scaleY,float heading,int colorR,int colorG,int colorB,int colorA) -> void { return GRAPHICS::DRAW_SPRITE(textureDict,textureName,screenX,screenY,scaleX,scaleY,heading,colorR,colorG,colorB,colorA); })
		.def_static("draw_tv_channel", [](float posX,float posY,float scaleX,float scaleY,float rotation,int r,int g,int b,int a) -> void { return GRAPHICS::DRAW_TV_CHANNEL(posX,posY,scaleX,scaleY,rotation,r,g,b,a); })
		.def_static("enable_alien_blood_vfx", [](BOOL p0) -> void { return GRAPHICS::ENABLE_ALIEN_BLOOD_VFX(p0); })
		.def_static("enable_clown_blood_vfx", [](BOOL p0) -> void { return GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(p0); })
		.def_static("enable_movie_subtitles", [](BOOL toggle) -> void { return GRAPHICS::ENABLE_MOVIE_SUBTITLES(toggle); })
		.def_static("end_text_component", []() -> void { return GRAPHICS::_END_TEXT_COMPONENT(); })
		.def_static("fade_decals_in_range", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return GRAPHICS::FADE_DECALS_IN_RANGE(p0.id,p1.id,p2.id,p3.id,p4.id); })
		.def_static("get_decal_wash_level", [](Py_Any p0) -> float { return GRAPHICS::GET_DECAL_WASH_LEVEL(p0.id); })
		.def_static("get_is_hidef", []() -> BOOL { return GRAPHICS::GET_IS_HIDEF(); })
		.def_static("get_is_widescreen", []() -> BOOL { return GRAPHICS::GET_IS_WIDESCREEN(); })
		.def_static("get_maximum_number_of_photos", []() -> int { return GRAPHICS::GET_MAXIMUM_NUMBER_OF_PHOTOS(); })
		.def_static("get_safe_zone_size", []() -> Py_Any { return GRAPHICS::GET_SAFE_ZONE_SIZE(); })
		.def_static("get_screen_aspect_ratio", [](BOOL b) -> float { return GRAPHICS::_GET_SCREEN_ASPECT_RATIO(b); })
		.def_static("get_screen_effect_is_active", [](Py_Vehicle screeen) -> int { return GRAPHICS::_GET_SCREEN_EFFECT_IS_ACTIVE(screeen.id); })
		.def_static("get_texture_resolution", [](char* textureDict,char* textureName) -> Vector3 { return GRAPHICS::GET_TEXTURE_RESOLUTION(textureDict,textureName); })
		.def_static("get_timecycle_modifier_index", []() -> Py_Any { return GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX(); })
		.def_static("get_tv_channel", []() -> int { return GRAPHICS::GET_TV_CHANNEL(); })
		.def_static("get_tv_volume", []() -> float { return GRAPHICS::GET_TV_VOLUME(); })
		.def_static("has_hud_scaleform_loaded", [](int hudComponent) -> BOOL { return GRAPHICS::_HAS_HUD_SCALEFORM_LOADED(hudComponent); })
		.def_static("has_scaleform_container_movie_loaded_into_parent", [](int handle) -> BOOL { return GRAPHICS::HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(handle); })
		.def_static("has_scaleform_movie_loaded", [](int scaleform) -> BOOL { return GRAPHICS::HAS_SCALEFORM_MOVIE_LOADED(scaleform); })
		.def_static("has_streamed_texture_dict_loaded", [](char* textureDict) -> BOOL { return GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED(textureDict); })
		.def_static("has_vehicle_got_decal", [](Py_Vehicle vehicle,Py_Any p1) -> BOOL { return GRAPHICS::_HAS_VEHICLE_GOT_DECAL(vehicle.id,p1.id); })
		.def_static("is_decal_alive", [](Py_Any p0) -> BOOL { return GRAPHICS::IS_DECAL_ALIVE(p0.id); })
		.def_static("is_nightvision_inactive", []() -> BOOL { return GRAPHICS::_IS_NIGHTVISION_INACTIVE(); })
		.def_static("is_particle_fx_delayed_blink", []() -> float { return GRAPHICS::IS_PARTICLE_FX_DELAYED_BLINK(); })
		.def_static("is_seethrough_active", []() -> BOOL { return GRAPHICS::_IS_SEETHROUGH_ACTIVE(); })
		.def_static("is_tracked_point_visible", [](Py_Object point) -> BOOL { return GRAPHICS::IS_TRACKED_POINT_VISIBLE(point.id); })
		.def_static("move_vehicle_decals", [](Py_Any p0,Py_Any p1) -> void { return GRAPHICS::MOVE_VEHICLE_DECALS(p0.id,p1.id); })
		.def_static("pop_scaleform_movie_function", []() -> Py_Any { return GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION(); })
		.def_static("pop_scaleform_movie_function_void", []() -> void { return GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID(); })
		.def_static("pop_timecycle_modifier", []() -> void { return GRAPHICS::POP_TIMECYCLE_MODIFIER(); })
		.def_static("push_scaleform_movie_function", [](int scaleform,char* functionName) -> BOOL { return GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(scaleform,functionName); })
		.def_static("push_scaleform_movie_function_from_hud_component", [](int hudComponent,char* functionName) -> BOOL { return GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_FROM_HUD_COMPONENT(hudComponent,functionName); })
		.def_static("push_scaleform_movie_function_parameter_bool", [](BOOL value) -> void { return GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(value); })
		.def_static("push_scaleform_movie_function_parameter_float", [](float value) -> void { return GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT(value); })
		.def_static("push_scaleform_movie_function_parameter_int", [](int value) -> void { return GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(value); })
		.def_static("push_scaleform_movie_function_parameter_string", [](char* value) -> void { return GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING(value); })
		.def_static("push_timecycle_modifier", []() -> void { return GRAPHICS::PUSH_TIMECYCLE_MODIFIER(); })
		.def_static("release_movie_mesh_set", [](Py_Any p0) -> void { return GRAPHICS::RELEASE_MOVIE_MESH_SET(p0.id); })
		.def_static("remove_decal", [](Py_Any p0) -> void { return GRAPHICS::REMOVE_DECAL(p0.id); })
		.def_static("remove_decals_from_object", [](Py_Object obj) -> void { return GRAPHICS::REMOVE_DECALS_FROM_OBJECT(obj.id); })
		.def_static("remove_decals_from_object_facing", [](Py_Object obj,float x,float y,float z) -> void { return GRAPHICS::REMOVE_DECALS_FROM_OBJECT_FACING(obj.id,x,y,z); })
		.def_static("remove_decals_from_vehicle", [](Py_Vehicle vehicle) -> void { return GRAPHICS::REMOVE_DECALS_FROM_VEHICLE(vehicle.id); })
		.def_static("remove_decals_in_range", [](float x,float y,float z,float range) -> void { return GRAPHICS::REMOVE_DECALS_IN_RANGE(x,y,z,range); })
		.def_static("remove_particle_fx", [](Py_Any p0,BOOL p1) -> void { return GRAPHICS::REMOVE_PARTICLE_FX(p0.id,p1); })
		.def_static("remove_particle_fx_from_entity", [](Py_Any p0) -> void { return GRAPHICS::REMOVE_PARTICLE_FX_FROM_ENTITY(p0.id); })
		.def_static("remove_particle_fx_in_range", [](float X,float Y,float Z,float radius) -> void { return GRAPHICS::REMOVE_PARTICLE_FX_IN_RANGE(X,Y,Z,radius); })
		.def_static("request_hud_scaleform", [](int hudComponent) -> void { return GRAPHICS::_REQUEST_HUD_SCALEFORM(hudComponent); })
		.def_static("request_scaleform_movie", [](char* scaleformName) -> Py_Any { return GRAPHICS::REQUEST_SCALEFORM_MOVIE(scaleformName); })
		.def_static("request_scaleform_movie3", [](char* scaleformName) -> Py_Any { return GRAPHICS::_REQUEST_SCALEFORM_MOVIE3(scaleformName); })
		.def_static("request_scaleform_movie_instance", [](char* scaleformName) -> Py_Any { return GRAPHICS::REQUEST_SCALEFORM_MOVIE_INSTANCE(scaleformName); })
		.def_static("request_streamed_texture_dict", [](char* textureDict,BOOL toggle) -> void { return GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT(textureDict,toggle); })
		.def_static("set_blackout", [](BOOL enable) -> void { return GRAPHICS::_SET_BLACKOUT(enable); })
		.def_static("set_checkpoint_cylinder_height", [](Py_Any checkpoint,float nearHeight,float farHeight,float scaleRadius) -> void { return GRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(checkpoint.id,nearHeight,farHeight,scaleRadius); })
		.def_static("set_checkpoint_icon_rgba", [](Py_Any checkpoint,int colorR,int colorG,int colorB,int colorA) -> void { return GRAPHICS::_SET_CHECKPOINT_ICON_RGBA(checkpoint.id,colorR,colorG,colorB,colorA); })
		.def_static("set_checkpoint_rgba", [](Py_Any checkpoint,int colorR,int colorG,int colorB,int alpha) -> void { return GRAPHICS::SET_CHECKPOINT_RGBA(checkpoint.id,colorR,colorG,colorB,alpha); })
		.def_static("set_debug_lines_and_spheres_drawing_active", [](BOOL enabled) -> void { return GRAPHICS::SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(enabled); })
		.def_static("set_draw_origin", [](float x,float y,float z,Py_Any p3) -> void { return GRAPHICS::SET_DRAW_ORIGIN(x,y,z,p3.id); })
		.def_static("set_entity_icon_color", [](Py_Entity entity,int r,int g,int b,int a) -> void { return GRAPHICS::SET_ENTITY_ICON_COLOR(entity.id,r,g,b,a); })
		.def_static("set_entity_icon_visibility", [](Py_Entity entity,BOOL toggle) -> void { return GRAPHICS::SET_ENTITY_ICON_VISIBILITY(entity.id,toggle); })
		.def_static("set_far_shadows_suppressed", [](BOOL toggle) -> void { return GRAPHICS::_SET_FAR_SHADOWS_SUPPRESSED(toggle); })
		.def_static("set_flash", [](float p0,float p1,float fadeIn,float duration,float fadeOut) -> void { return GRAPHICS::SET_FLASH(p0,p1,fadeIn,duration,fadeOut); })
		.def_static("set_force_ped_footsteps_tracks", [](BOOL enabled) -> void { return GRAPHICS::_SET_FORCE_PED_FOOTSTEPS_TRACKS(enabled); })
		.def_static("set_force_vehicle_trails", [](BOOL enabled) -> void { return GRAPHICS::_SET_FORCE_VEHICLE_TRAILS(enabled); })
		.def_static("set_frozen_rendering_disabled", [](BOOL enabled) -> void { return GRAPHICS::_SET_FROZEN_RENDERING_DISABLED(enabled); })
		.def_static("set_nightvision", [](BOOL toggle) -> void { return GRAPHICS::SET_NIGHTVISION(toggle); })
		.def_static("set_noiseoveride", [](BOOL p0) -> void { return GRAPHICS::SET_NOISEOVERIDE(p0); })
		.def_static("set_noisinessoveride", [](float p0) -> void { return GRAPHICS::SET_NOISINESSOVERIDE(p0); })
		.def_static("set_particle_fx_blood_scale", [](BOOL p0) -> void { return GRAPHICS::SET_PARTICLE_FX_BLOOD_SCALE(p0); })
		.def_static("set_particle_fx_cam_inside_nonplayer_vehicle", [](Py_Any p0,BOOL p1) -> void { return GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(p0.id,p1); })
		.def_static("set_particle_fx_cam_inside_vehicle", [](BOOL p0) -> void { return GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(p0); })
		.def_static("set_particle_fx_looped_alpha", [](Py_Any p0,float p1) -> void { return GRAPHICS::SET_PARTICLE_FX_LOOPED_ALPHA(p0.id,p1); })
		.def_static("set_particle_fx_looped_colour", [](Py_Any ptfxHandle,float r,float g,float b,BOOL p4) -> void { return GRAPHICS::SET_PARTICLE_FX_LOOPED_COLOUR(ptfxHandle.id,r,g,b,p4); })
		.def_static("set_particle_fx_looped_evolution", [](int ptfxHandle,char* propertyName,float amount,BOOL p3) -> void { return GRAPHICS::SET_PARTICLE_FX_LOOPED_EVOLUTION(ptfxHandle,propertyName,amount,p3); })
		.def_static("set_particle_fx_looped_offsets", [](int ptfxHandle,float x,float y,float z,float rotX,float rotY,float rotZ) -> void { return GRAPHICS::SET_PARTICLE_FX_LOOPED_OFFSETS(ptfxHandle,x,y,z,rotX,rotY,rotZ); })
		.def_static("set_particle_fx_looped_range", [](Py_Any ptfxHandle,float range) -> void { return GRAPHICS::_SET_PARTICLE_FX_LOOPED_RANGE(ptfxHandle.id,range); })
		.def_static("set_particle_fx_looped_scale", [](Py_Any p0,float p1) -> void { return GRAPHICS::SET_PARTICLE_FX_LOOPED_SCALE(p0.id,p1); })
		.def_static("set_particle_fx_non_looped_alpha", [](float alpha) -> void { return GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_ALPHA(alpha); })
		.def_static("set_particle_fx_non_looped_colour", [](float r,float g,float b) -> void { return GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_COLOUR(r,g,b); })
		.def_static("set_particle_fx_shootout_boat", [](Py_Any p0) -> void { return GRAPHICS::SET_PARTICLE_FX_SHOOTOUT_BOAT(p0.id); })
		.def_static("set_ptfx_asset_next_call", [](char* name) -> void { return GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL(name); })
		.def_static("set_ptfx_asset_old_to_new", [](char* Old,char* New) -> void { return GRAPHICS::_SET_PTFX_ASSET_OLD_TO_NEW(Old,New); })
		.def_static("set_scaleform_movie_to_use_system_time", [](int scaleform,BOOL toggle) -> void { return GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(scaleform,toggle); })
		.def_static("set_screen_draw_position", [](int x,int y) -> void { return GRAPHICS::_SET_SCREEN_DRAW_POSITION(x,y); })
		.def_static("set_seethrough", [](BOOL Toggle) -> void { return GRAPHICS::SET_SEETHROUGH(Toggle); })
		.def_static("set_streamed_texture_dict_as_no_longer_needed", [](char* textureDict) -> void { return GRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(textureDict); })
		.def_static("set_timecycle_modifier", [](char* modifierName) -> void { return GRAPHICS::SET_TIMECYCLE_MODIFIER(modifierName); })
		.def_static("set_timecycle_modifier_strength", [](float strength) -> void { return GRAPHICS::SET_TIMECYCLE_MODIFIER_STRENGTH(strength); })
		.def_static("set_tracked_point_info", [](Py_Object point,float x,float y,float z,float radius) -> void { return GRAPHICS::SET_TRACKED_POINT_INFO(point.id,x,y,z,radius); })
		.def_static("set_transition_timecycle_modifier", [](char* modifierName,float transition) -> void { return GRAPHICS::SET_TRANSITION_TIMECYCLE_MODIFIER(modifierName,transition); })
		.def_static("set_tv_audio_frontend", [](BOOL toggle) -> void { return GRAPHICS::SET_TV_AUDIO_FRONTEND(toggle); })
		.def_static("set_tv_channel", [](int channel) -> void { return GRAPHICS::SET_TV_CHANNEL(channel); })
		.def_static("set_tv_volume", [](float volume) -> void { return GRAPHICS::SET_TV_VOLUME(volume); })
		.def_static("sitting_tv", [](Py_Any scaleform) -> char* { return GRAPHICS::SITTING_TV(scaleform.id); })
		.def_static("start_particle_fx_looped_at_coord", [](char* effectName,float x,float y,float z,float xRot,float yRot,float zRot,float scale,BOOL p8,BOOL p9,BOOL p10,BOOL p11) -> Py_Any { return GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD(effectName,x,y,z,xRot,yRot,zRot,scale,p8,p9,p10,p11); })
		.def_static("start_particle_fx_looped_on_entity", [](char* effectName,Py_Entity entity,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,float scale,BOOL p9,BOOL p10,BOOL p11) -> Py_Any { return GRAPHICS::START_PARTICLE_FX_LOOPED_ON_ENTITY(effectName,entity.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,scale,p9,p10,p11); })
		.def_static("start_particle_fx_looped_on_entity_2", [](char* effectName,Py_Entity entity,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,float scale,BOOL p9,BOOL p10,BOOL p11) -> Py_Any { return GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_2(effectName,entity.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,scale,p9,p10,p11); })
		.def_static("start_particle_fx_looped_on_entity_bone", [](char* effectName,Py_Entity entity,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,int boneIndex,float scale,BOOL p10,BOOL p11,BOOL p12) -> Py_Any { return GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName,entity.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,boneIndex,scale,p10,p11,p12); })
		.def_static("start_particle_fx_looped_on_entity_bone_2", [](char* effectName,Py_Entity entity,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,int boneIndex,float scale,BOOL p10,BOOL p11,BOOL p12) -> Py_Any { return GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE_2(effectName,entity.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,boneIndex,scale,p10,p11,p12); })
		.def_static("start_particle_fx_looped_on_ped_bone", [](char* effectName,Py_Ped ped,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,int boneIndex,float scale,BOOL p10,BOOL p11,BOOL p12) -> Py_Any { return GRAPHICS::START_PARTICLE_FX_LOOPED_ON_PED_BONE(effectName,ped.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,boneIndex,scale,p10,p11,p12); })
		.def_static("start_particle_fx_non_looped_at_coord", [](char* effectName,float x,float y,float z,float xRot,float yRot,float zRot,float scale,BOOL p8,BOOL p9,BOOL p10) -> BOOL { return GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName,x,y,z,xRot,yRot,zRot,scale,p8,p9,p10); })
		.def_static("start_particle_fx_non_looped_at_coord_2", [](char* effectName,float x,float y,float z,float xRot,float yRot,float zRot,float scale,BOOL p8,BOOL p9,BOOL p10) -> BOOL { return GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2(effectName,x,y,z,xRot,yRot,zRot,scale,p8,p9,p10); })
		.def_static("start_particle_fx_non_looped_on_entity", [](char* effectName,Py_Entity entity,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,float scale,BOOL p9,BOOL p10,BOOL p11) -> BOOL { return GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName,entity.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,scale,p9,p10,p11); })
		.def_static("start_particle_fx_non_looped_on_entity_2", [](char* effectName,Py_Entity entity,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,float scale,BOOL p9,BOOL p10,BOOL p11) -> BOOL { return GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2(effectName,entity.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,scale,p9,p10,p11); })
		.def_static("start_particle_fx_non_looped_on_ped_bone", [](char* effectName,Py_Ped ped,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,int boneIndex,float scale,BOOL p10,BOOL p11,BOOL p12) -> BOOL { return GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName,ped.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,boneIndex,scale,p10,p11,p12); })
		.def_static("start_particle_fx_non_looped_on_ped_bone_2", [](char* effectName,Py_Ped ped,float xOffset,float yOffset,float zOffset,float xRot,float yRot,float zRot,int boneIndex,float scale,BOOL p10,BOOL p11,BOOL p12) -> BOOL { return GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2(effectName,ped.id,xOffset,yOffset,zOffset,xRot,yRot,zRot,boneIndex,scale,p10,p11,p12); })
		.def_static("start_screen_effect", [](char* effectName,int playLength,BOOL loop) -> void { return GRAPHICS::_START_SCREEN_EFFECT(effectName,playLength,loop); })
		.def_static("stop_all_screen_effects", []() -> void { return GRAPHICS::_STOP_ALL_SCREEN_EFFECTS(); })
		.def_static("stop_particle_fx_looped", [](Py_Any p0,BOOL p1) -> void { return GRAPHICS::STOP_PARTICLE_FX_LOOPED(p0.id,p1); })
		.def_static("stop_screen_effect", [](char* effectName) -> void { return GRAPHICS::_STOP_SCREEN_EFFECT(effectName); })
		.def_static("transition_from_blurred", [](float transitionTime) -> BOOL { return GRAPHICS::_TRANSITION_FROM_BLURRED(transitionTime); })
		.def_static("transition_to_blurred", [](float transitionTime) -> BOOL { return GRAPHICS::_TRANSITION_TO_BLURRED(transitionTime); })
		.def_static("wash_decals_from_vehicle", [](Py_Any p0,float p1) -> void { return GRAPHICS::WASH_DECALS_FROM_VEHICLE(p0.id,p1); })
		.def_static("wash_decals_in_range", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return GRAPHICS::WASH_DECALS_IN_RANGE(p0.id,p1.id,p2.id,p3.id,p4.id); })
;
	custom(py_Graphics);
	py::class_<Py_Stats> py_Stats(m, "Stats");
	py_Stats
		.def_static("leaderboards_clear_cache_data", []() -> void { return STATS::LEADERBOARDS_CLEAR_CACHE_DATA(); })
		.def_static("leaderboards_get_cache_exists", [](Py_Any p0) -> BOOL { return STATS::LEADERBOARDS_GET_CACHE_EXISTS(p0.id); })
		.def_static("leaderboards_get_cache_time", [](Py_Any p0) -> Py_Any { return STATS::LEADERBOARDS_GET_CACHE_TIME(p0.id); })
		.def_static("leaderboards_get_column_id", [](Py_Any p0,Py_Any p1,Py_Any p2) -> Py_Any { return STATS::LEADERBOARDS_GET_COLUMN_ID(p0.id,p1.id,p2.id); })
		.def_static("leaderboards_get_column_type", [](Py_Any p0,Py_Any p1,Py_Any p2) -> Py_Any { return STATS::LEADERBOARDS_GET_COLUMN_TYPE(p0.id,p1.id,p2.id); })
		.def_static("leaderboards_get_number_of_columns", [](Py_Any p0,Py_Any p1) -> Py_Any { return STATS::LEADERBOARDS_GET_NUMBER_OF_COLUMNS(p0.id,p1.id); })
		.def_static("leaderboards_read_clear", [](Py_Any p0,Py_Any p1,Py_Any p2) -> Py_Any { return STATS::LEADERBOARDS_READ_CLEAR(p0.id,p1.id,p2.id); })
		.def_static("leaderboards_read_clear_all", []() -> Py_Any { return STATS::LEADERBOARDS_READ_CLEAR_ALL(); })
		.def_static("leaderboards_read_pending", [](Py_Any p0,Py_Any p1,Py_Any p2) -> BOOL { return STATS::LEADERBOARDS_READ_PENDING(p0.id,p1.id,p2.id); })
		.def_static("leaderboards_read_successful", [](Py_Any p0,Py_Any p1,Py_Any p2) -> BOOL { return STATS::LEADERBOARDS_READ_SUCCESSFUL(p0.id,p1.id,p2.id); })
		.def_static("playaward_xp", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return STATS::PLAYSTATS_AWARD_XP(p0.id,p1.id,p2.id); })
		.def_static("playcheat_applied", [](char* cheat) -> void { return STATS::PLAYSTATS_CHEAT_APPLIED(cheat); })
		.def_static("playcloth_change", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return STATS::PLAYSTATS_CLOTH_CHANGE(p0.id,p1.id,p2.id,p3.id,p4.id); })
		.def_static("playfriend_activity", [](Py_Any p0,Py_Any p1) -> void { return STATS::PLAYSTATS_FRIEND_ACTIVITY(p0.id,p1.id); })
		.def_static("playmatch_started", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6) -> void { return STATS::PLAYSTATS_MATCH_STARTED(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id,p6.id); })
		.def_static("playoddjob_done", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return STATS::PLAYSTATS_ODDJOB_DONE(p0.id,p1.id,p2.id); })
		.def_static("playprop_change", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return STATS::PLAYSTATS_PROP_CHANGE(p0.id,p1.id,p2.id,p3.id); })
		.def_static("playrace_checkpoint", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return STATS::PLAYSTATS_RACE_CHECKPOINT(p0.id,p1.id,p2.id,p3.id,p4.id); })
		.def_static("playrank_up", [](Py_Any p0) -> void { return STATS::PLAYSTATS_RANK_UP(p0.id); })
		.def_static("playshop_item", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4) -> void { return STATS::PLAYSTATS_SHOP_ITEM(p0.id,p1.id,p2.id,p3.id,p4.id); })
		.def_static("stat_clear_slot_for_reload", [](int statSlot) -> Py_Any { return STATS::STAT_CLEAR_SLOT_FOR_RELOAD(statSlot); })
		.def_static("stat_delete_slot", [](Py_Any p0) -> Py_Any { return STATS::STAT_DELETE_SLOT(p0.id); })
		.def_static("stat_get_bool_masked", [](Py_Hash statName,Py_Any p1,Py_Any p2) -> BOOL { return STATS::STAT_GET_BOOL_MASKED(statName.id,p1.id,p2.id); })
		.def_static("stat_get_license_plate", [](Py_Hash statName) -> char* { return STATS::STAT_GET_LICENSE_PLATE(statName.id); })
		.def_static("stat_get_string", [](Py_Hash statHash,char* outValue) -> BOOL { return STATS::STAT_GET_STRING(statHash.id,outValue); })
		.def_static("stat_get_user_id", [](Py_Any p0) -> Py_Any { return STATS::STAT_GET_USER_ID(p0.id); })
		.def_static("stat_increment", [](Py_Hash statName,float value) -> void { return STATS::STAT_INCREMENT(statName.id,value); })
		.def_static("stat_load", [](Py_Any p0) -> BOOL { return STATS::STAT_LOAD(p0.id); })
		.def_static("stat_load_pending", [](Py_Any p0) -> BOOL { return STATS::STAT_LOAD_PENDING(p0.id); })
		.def_static("stat_save", [](int p0,BOOL p1,int p2) -> BOOL { return STATS::STAT_SAVE(p0,p1,p2); })
		.def_static("stat_save_pending", []() -> Py_Any { return STATS::STAT_SAVE_PENDING(); })
		.def_static("stat_save_pending_or_requested", []() -> Py_Any { return STATS::STAT_SAVE_PENDING_OR_REQUESTED(); })
		.def_static("stat_set_bool", [](Py_Hash statName,BOOL value,BOOL save) -> BOOL { return STATS::STAT_SET_BOOL(statName.id,value,save); })
		.def_static("stat_set_bool_masked", [](Py_Hash statName,BOOL p1,Py_Any p2,BOOL save) -> BOOL { return STATS::STAT_SET_BOOL_MASKED(statName.id,p1,p2.id,save); })
		.def_static("stat_set_current_posix_time", [](Py_Hash statName,BOOL p1) -> BOOL { return STATS::STAT_SET_CURRENT_POSIX_TIME(statName.id,p1); })
		.def_static("stat_set_float", [](Py_Hash statName,float value,BOOL save) -> BOOL { return STATS::STAT_SET_FLOAT(statName.id,value,save); })
		.def_static("stat_set_gxt_label", [](Py_Hash statName,char* value,BOOL save) -> BOOL { return STATS::STAT_SET_GXT_LABEL(statName.id,value,save); })
		.def_static("stat_set_int", [](Py_Hash statName,int value,BOOL save) -> BOOL { return STATS::STAT_SET_INT(statName.id,value,save); })
		.def_static("stat_set_license_plate", [](Py_Hash statName,char* str) -> BOOL { return STATS::STAT_SET_LICENSE_PLATE(statName.id,str); })
		.def_static("stat_set_masked_int", [](Py_Hash statName,Py_Any p1,Py_Any p2,int p3,BOOL save) -> BOOL { return STATS::STAT_SET_MASKED_INT(statName.id,p1.id,p2.id,p3,save); })
		.def_static("stat_set_pos", [](Py_Hash statName,float x,float y,float z,BOOL save) -> BOOL { return STATS::STAT_SET_POS(statName.id,x,y,z,save); })
		.def_static("stat_set_profile_setting", [](int profileSetting,int value) -> void { return STATS::_STAT_SET_PROFILE_SETTING(profileSetting,value); })
		.def_static("stat_set_string", [](Py_Hash statName,char* value,BOOL save) -> BOOL { return STATS::STAT_SET_STRING(statName.id,value,save); })
		.def_static("stat_set_user_id", [](Py_Hash statName,char* value,BOOL save) -> BOOL { return STATS::STAT_SET_USER_ID(statName.id,value,save); })
		.def_static("stat_slot_is_loaded", [](Py_Any p0) -> BOOL { return STATS::STAT_SLOT_IS_LOADED(p0.id); })
;
	custom(py_Stats);
	py::class_<Py_Brain> py_Brain(m, "Brain");
	py_Brain
		.def_static("add_script_to_random_ped", [](char* name,Py_Hash model,float p2,float p3) -> void { return BRAIN::ADD_SCRIPT_TO_RANDOM_PED(name,model.id,p2,p3); })
		.def_static("disable_script_set", [](int brainSet) -> void { return BRAIN::DISABLE_SCRIPT_BRAIN_SET(brainSet); })
		.def_static("enable_script_set", [](int brainSet) -> void { return BRAIN::ENABLE_SCRIPT_BRAIN_SET(brainSet); })
		.def_static("is_object_within_activation_range", [](Py_Object object) -> BOOL { return BRAIN::IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(object.id); })
		.def_static("is_world_point_within_activation_range", []() -> BOOL { return BRAIN::IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE(); })
		.def_static("register_object_script_brain", [](char* scriptName,Py_Hash p1,int p2,float p3,int p4,int p5) -> void { return BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN(scriptName,p1.id,p2,p3,p4,p5); })
;
	custom(py_Brain);
	py::class_<Py_Mobile> py_Mobile(m, "Mobile");
	py_Mobile
		.def_static("can_phone_be_seen_on_screen", []() -> BOOL { return MOBILE::CAN_PHONE_BE_SEEN_ON_SCREEN(); })
		.def_static("cell_cam_activate", [](BOOL p0,BOOL p1) -> void { return MOBILE::CELL_CAM_ACTIVATE(p0,p1); })
		.def_static("cell_cam_is_char_visible_no_face_check", [](Py_Entity entity) -> BOOL { return MOBILE::CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(entity.id); })
		.def_static("create_phone", [](int phoneType) -> void { return MOBILE::CREATE_MOBILE_PHONE(phoneType); })
		.def_static("destroy_phone", []() -> void { return MOBILE::DESTROY_MOBILE_PHONE(); })
		.def_static("move_finger", [](int p0) -> void { return MOBILE::_MOVE_FINGER(p0); })
		.def_static("script_is_moving_phone_offscreen", [](BOOL toggle) -> void { return MOBILE::SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(toggle); })
		.def_static("set_phone_lean", [](BOOL Toggle) -> void { return MOBILE::_SET_PHONE_LEAN(Toggle); })
		.def_static("set_phone_position", [](float posX,float posY,float posZ) -> void { return MOBILE::SET_MOBILE_PHONE_POSITION(posX,posY,posZ); })
		.def_static("set_phone_rotation", [](float rotX,float rotY,float rotZ,Py_Any p3) -> void { return MOBILE::SET_MOBILE_PHONE_ROTATION(rotX,rotY,rotZ,p3.id); })
		.def_static("set_phone_scale", [](float scale) -> void { return MOBILE::SET_MOBILE_PHONE_SCALE(scale); })
;
	custom(py_Mobile);
	py::class_<Py_App> py_App(m, "App");
	py_App
		.def_static("clear_block", []() -> void { return APP::APP_CLEAR_BLOCK(); })
		.def_static("close_app", []() -> void { return APP::APP_CLOSE_APP(); })
		.def_static("close_block", []() -> void { return APP::APP_CLOSE_BLOCK(); })
		.def_static("data_valid", []() -> BOOL { return APP::APP_DATA_VALID(); })
		.def_static("delete_data", [](char* appName) -> BOOL { return APP::APP_DELETE_APP_DATA(appName); })
		.def_static("get_deleted_file_status", []() -> Py_Any { return APP::APP_GET_DELETED_FILE_STATUS(); })
		.def_static("get_float", [](char* property) -> float { return APP::APP_GET_FLOAT(property); })
		.def_static("get_int", [](char* property) -> int { return APP::APP_GET_INT(property); })
		.def_static("get_string", [](char* property) -> char* { return APP::APP_GET_STRING(property); })
		.def_static("has_linked_social_club_account", []() -> BOOL { return APP::APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT(); })
		.def_static("has_synced_data", [](char* appName) -> BOOL { return APP::APP_HAS_SYNCED_DATA(appName); })
		.def_static("save_data", []() -> void { return APP::APP_SAVE_DATA(); })
		.def_static("set_app", [](char* appName) -> void { return APP::APP_SET_APP(appName); })
		.def_static("set_block", [](char* blockName) -> void { return APP::APP_SET_BLOCK(blockName); })
		.def_static("set_float", [](char* property,float value) -> void { return APP::APP_SET_FLOAT(property,value); })
		.def_static("set_int", [](char* property,int value) -> void { return APP::APP_SET_INT(property,value); })
		.def_static("set_string", [](char* property,char* value) -> void { return APP::APP_SET_STRING(property,value); })
;
	custom(py_App);
	py::class_<Py_Time> py_Time(m, "Time");
	py_Time
		.def_static("add_to_clock_time", [](int hours,int minutes,int seconds) -> void { return TIME::ADD_TO_CLOCK_TIME(hours,minutes,seconds); })
		.def_static("advance_clock_to", [](int hour,int minute,int second) -> void { return TIME::ADVANCE_CLOCK_TIME_TO(hour,minute,second); })
		.def_static("get_clock_day_of_month", []() -> int { return TIME::GET_CLOCK_DAY_OF_MONTH(); })
		.def_static("get_clock_day_of_week", []() -> int { return TIME::GET_CLOCK_DAY_OF_WEEK(); })
		.def_static("get_clock_hours", []() -> int { return TIME::GET_CLOCK_HOURS(); })
		.def_static("get_clock_minutes", []() -> int { return TIME::GET_CLOCK_MINUTES(); })
		.def_static("get_clock_month", []() -> int { return TIME::GET_CLOCK_MONTH(); })
		.def_static("get_clock_seconds", []() -> int { return TIME::GET_CLOCK_SECONDS(); })
		.def_static("get_clock_year", []() -> int { return TIME::GET_CLOCK_YEAR(); })
		.def_static("get_milliseconds_per_game_minute", []() -> int { return TIME::GET_MILLISECONDS_PER_GAME_MINUTE(); })
		.def_static("pause_clock", [](BOOL toggle) -> void { return TIME::PAUSE_CLOCK(toggle); })
		.def_static("set_clock_date", [](int day,int month,int year) -> void { return TIME::SET_CLOCK_DATE(day,month,year); })
		.def_static("set_clock_time", [](int hour,int minute,int second) -> void { return TIME::SET_CLOCK_TIME(hour,minute,second); })
;
	custom(py_Time);
	py::class_<Py_Pathfind> py_Pathfind(m, "Pathfind");
	py_Pathfind
		.def_static("add_navmesh_blocking_object", [](float p0,float p1,float p2,float p3,float p4,float p5,float p6,BOOL p7,Py_Any p8) -> Py_Any { return PATHFIND::ADD_NAVMESH_BLOCKING_OBJECT(p0,p1,p2,p3,p4,p5,p6,p7,p8.id); })
		.def_static("add_navmesh_required_region", [](float p0,float p1,float p2) -> void { return PATHFIND::ADD_NAVMESH_REQUIRED_REGION(p0,p1,p2); })
		.def_static("are_all_navmesh_regions_loaded", []() -> BOOL { return PATHFIND::ARE_ALL_NAVMESH_REGIONS_LOADED(); })
		.def_static("calculate_travel_distance_between_points", [](float x1,float y1,float z1,float x2,float y2,float z2) -> float { return PATHFIND::CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(x1,y1,z1,x2,y2,z2); })
		.def_static("disable_navmesh_in_area", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6) -> void { return PATHFIND::DISABLE_NAVMESH_IN_AREA(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id,p6.id); })
		.def_static("get_closest_road", [](float x,float y,float z,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6,Py_Any p7,Py_Any p8,Py_Any p9,Py_Any p10) -> Py_Any { return PATHFIND::GET_CLOSEST_ROAD(x,y,z,p3.id,p4.id,p5.id,p6.id,p7.id,p8.id,p9.id,p10.id); })
		.def_static("get_is_slow_road_flag", [](int nodeID) -> BOOL { return PATHFIND::_GET_IS_SLOW_ROAD_FLAG(nodeID); })
		.def_static("get_nth_closest_vehicle_node_id", [](float x,float y,float z,Py_Any p3,Py_Any p4,float p5,float p6) -> int { return PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_ID(x,y,z,p3.id,p4.id,p5,p6); })
		.def_static("get_supports_gps_route_flag", [](int nodeID) -> BOOL { return PATHFIND::_GET_SUPPORTS_GPS_ROUTE_FLAG(nodeID); })
		.def_static("is_navmesh_loaded_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2) -> BOOL { return PATHFIND::IS_NAVMESH_LOADED_IN_AREA(x1,y1,z1,x2,y2,z2); })
		.def_static("is_point_on_road", [](float x,float y,float z,Py_Entity entity) -> BOOL { return PATHFIND::IS_POINT_ON_ROAD(x,y,z,entity.id); })
		.def_static("is_vehicle_node_id_valid", [](int vehicleNodeId) -> BOOL { return PATHFIND::IS_VEHICLE_NODE_ID_VALID(vehicleNodeId); })
		.def_static("remove_navmesh_blocking_object", [](Py_Any p0) -> void { return PATHFIND::REMOVE_NAVMESH_BLOCKING_OBJECT(p0.id); })
		.def_static("remove_navmesh_required_regions", []() -> void { return PATHFIND::REMOVE_NAVMESH_REQUIRED_REGIONS(); })
		.def_static("set_gps_disabled_zone", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> void { return PATHFIND::SET_GPS_DISABLED_ZONE(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("set_ignore_no_gps_flag", [](BOOL p0) -> void { return PATHFIND::SET_IGNORE_NO_GPS_FLAG(p0); })
		.def_static("set_ped_paths_back_to_original", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> void { return PATHFIND::SET_PED_PATHS_BACK_TO_ORIGINAL(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("set_ped_paths_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,BOOL unknown) -> void { return PATHFIND::SET_PED_PATHS_IN_AREA(x1,y1,z1,x2,y2,z2,unknown); })
		.def_static("set_roads_back_to_original", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> void { return PATHFIND::SET_ROADS_BACK_TO_ORIGINAL(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("set_roads_back_to_original_in_angled_area", [](float x1,float y1,float z1,float x2,float y2,float z2,float p6) -> void { return PATHFIND::SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(x1,y1,z1,x2,y2,z2,p6); })
		.def_static("set_roads_in_angled_area", [](float x1,float y1,float z1,float x2,float y2,float z2,float angle,BOOL unknown1,BOOL unknown2,BOOL unknown3) -> void { return PATHFIND::SET_ROADS_IN_ANGLED_AREA(x1,y1,z1,x2,y2,z2,angle,unknown1,unknown2,unknown3); })
		.def_static("set_roads_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,BOOL unknown1,BOOL unknown2) -> void { return PATHFIND::SET_ROADS_IN_AREA(x1,y1,z1,x2,y2,z2,unknown1,unknown2); })
		.def_static("update_navmesh_blocking_object", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,Py_Any p8) -> void { return PATHFIND::UPDATE_NAVMESH_BLOCKING_OBJECT(p0.id,p1,p2,p3,p4,p5,p6,p7,p8.id); })
;
	custom(py_Pathfind);
	py::class_<Py_Controls> py_Controls(m, "Controls");
	py_Controls
		.def_static("disable_all_control_actions", [](int controlGroup) -> void { return CONTROLS::DISABLE_ALL_CONTROL_ACTIONS(controlGroup); })
		.def_static("disable_control_action", [](int controlGroup,int control,BOOL disable) -> void { return CONTROLS::DISABLE_CONTROL_ACTION(controlGroup,control,disable); })
		.def_static("enable_all_control_actions", [](int controlGroup) -> void { return CONTROLS::ENABLE_ALL_CONTROL_ACTIONS(controlGroup); })
		.def_static("enable_control_action", [](int controlGroup,int control,BOOL enable) -> void { return CONTROLS::ENABLE_CONTROL_ACTION(controlGroup,control,enable); })
		.def_static("get_control_action_name", [](int index,int control,BOOL p2) -> char* { return CONTROLS::_GET_CONTROL_ACTION_NAME(index,control,p2); })
		.def_static("get_control_normal", [](int index,int control) -> float { return CONTROLS::GET_CONTROL_NORMAL(index,control); })
		.def_static("get_control_value", [](int index,int control) -> int { return CONTROLS::GET_CONTROL_VALUE(index,control); })
		.def_static("get_disabled_control_normal", [](int control,int variable) -> float { return CONTROLS::GET_DISABLED_CONTROL_NORMAL(control,variable); })
		.def_static("get_last_input_method", [](int index) -> BOOL { return CONTROLS::_GET_LAST_INPUT_METHOD(index); })
		.def_static("get_local_player_aim_state", []() -> Py_Any { return CONTROLS::GET_LOCAL_PLAYER_AIM_STATE(); })
		.def_static("is_control_enabled", [](int index,int control) -> BOOL { return CONTROLS::IS_CONTROL_ENABLED(index,control); })
		.def_static("is_control_just_pressed", [](int index,int control) -> BOOL { return CONTROLS::IS_CONTROL_JUST_PRESSED(index,control); })
		.def_static("is_control_just_released", [](int index,int control) -> BOOL { return CONTROLS::IS_CONTROL_JUST_RELEASED(index,control); })
		.def_static("is_control_pressed", [](int index,int control) -> BOOL { return CONTROLS::IS_CONTROL_PRESSED(index,control); })
		.def_static("is_control_released", [](int index,int control) -> BOOL { return CONTROLS::IS_CONTROL_RELEASED(index,control); })
		.def_static("is_disabled_control_just_pressed", [](int index,int control) -> BOOL { return CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(index,control); })
		.def_static("is_disabled_control_just_released", [](int index,int control) -> BOOL { return CONTROLS::IS_DISABLED_CONTROL_JUST_RELEASED(index,control); })
		.def_static("is_disabled_control_pressed", [](int index,int control) -> BOOL { return CONTROLS::IS_DISABLED_CONTROL_PRESSED(index,control); })
		.def_static("is_look_inverted", []() -> BOOL { return CONTROLS::IS_LOOK_INVERTED(); })
		.def_static("set_control_normal", [](int index,int control,float amount) -> BOOL { return CONTROLS::_SET_CONTROL_NORMAL(index,control,amount); })
		.def_static("set_input_exclusive", [](int controlGroup,int control) -> void { return CONTROLS::SET_INPUT_EXCLUSIVE(controlGroup,control); })
		.def_static("set_pad_shake", [](int p0,int duration,int frequency) -> void { return CONTROLS::SET_PAD_SHAKE(p0,duration,frequency); })
		.def_static("set_playerpad_shakes_when_controller_disabled", [](BOOL p0) -> void { return CONTROLS::SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(p0); })
		.def_static("stop_pad_shake", [](Py_Any p0) -> void { return CONTROLS::STOP_PAD_SHAKE(p0.id); })
;
	custom(py_Controls);
	py::class_<Py_Datafile> py_Datafile(m, "Datafile");
	py_Datafile
		.def_static("create", []() -> void { return DATAFILE::DATAFILE_CREATE(); })
		.def_static("delete", []() -> void { return DATAFILE::DATAFILE_DELETE(); })
		.def_static("load_ugc_file", [](char* filename) -> BOOL { return DATAFILE::_LOAD_UGC_FILE(filename); })
;
	custom(py_Datafile);
	py::class_<Py_Fire> py_Fire(m, "Fire");
	py_Fire
		.def_static("add_explosion", [](float x,float y,float z,int explosionType,float damageScale,BOOL isAudible,BOOL isInvisible,float cameraShake) -> void { return FIRE::ADD_EXPLOSION(x,y,z,explosionType,damageScale,isAudible,isInvisible,cameraShake); })
		.def_static("add_owned_explosion", [](Py_Ped ped,float x,float y,float z,int explosionType,float damageScale,BOOL isAudible,BOOL isInvisible,float cameraShake) -> void { return FIRE::ADD_OWNED_EXPLOSION(ped.id,x,y,z,explosionType,damageScale,isAudible,isInvisible,cameraShake); })
		.def_static("add_specfx_explosion", [](float x,float y,float z,int explosionType,Py_Hash explosionFx,float damageScale,BOOL isAudible,BOOL isInvisible,float cameraShake) -> void { return FIRE::_ADD_SPECFX_EXPLOSION(x,y,z,explosionType,explosionFx.id,damageScale,isAudible,isInvisible,cameraShake); })
		.def_static("get_number_of_fires_in_range", [](float x,float y,float z,float radius) -> int { return FIRE::GET_NUMBER_OF_FIRES_IN_RANGE(x,y,z,radius); })
		.def_static("get_ped_inside_explosion_area", [](int explosionType,float x1,float y1,float z1,float x2,float y2,float z2,float radius) -> Py_Entity { return FIRE::_GET_PED_INSIDE_EXPLOSION_AREA(explosionType,x1,y1,z1,x2,y2,z2,radius); })
		.def_static("is_entity_on_fire", [](Py_Entity entity) -> BOOL { return FIRE::IS_ENTITY_ON_FIRE(entity.id); })
		.def_static("is_explosion_in_angled_area", [](int explosionType,float x1,float y1,float z1,float x2,float y2,float z2,float angle) -> BOOL { return FIRE::IS_EXPLOSION_IN_ANGLED_AREA(explosionType,x1,y1,z1,x2,y2,z2,angle); })
		.def_static("is_explosion_in_area", [](int explosionType,float x1,float y1,float z1,float x2,float y2,float z2) -> BOOL { return FIRE::IS_EXPLOSION_IN_AREA(explosionType,x1,y1,z1,x2,y2,z2); })
		.def_static("is_explosion_in_sphere", [](int explosionType,float x,float y,float z,float radius) -> BOOL { return FIRE::IS_EXPLOSION_IN_SPHERE(explosionType,x,y,z,radius); })
		.def_static("remove_script_fire", [](Py_Any scriptHandle) -> void { return FIRE::REMOVE_SCRIPT_FIRE(scriptHandle.id); })
		.def_static("start_entity_fire", [](Py_Entity entity) -> Py_Any { return FIRE::START_ENTITY_FIRE(entity.id); })
		.def_static("start_script_fire", [](float X,float Y,float Z,int maxChildren,BOOL isGasFire) -> Py_Any { return FIRE::START_SCRIPT_FIRE(X,Y,Z,maxChildren,isGasFire); })
		.def_static("stop_entity_fire", [](Py_Entity entity) -> void { return FIRE::STOP_ENTITY_FIRE(entity.id); })
		.def_static("stop_in_range", [](float x,float y,float z,float radius) -> void { return FIRE::STOP_FIRE_IN_RANGE(x,y,z,radius); })
;
	custom(py_Fire);
	py::class_<Py_Decisionevent> py_Decisionevent(m, "Decisionevent");
	py_Decisionevent
		.def_static("add_shocking_event_at_position", [](int type,float x,float y,float z,float duration) -> Py_ScrHandle { return DECISIONEVENT::ADD_SHOCKING_EVENT_AT_POSITION(type,x,y,z,duration); })
		.def_static("add_shocking_event_for_entity", [](int type,Py_Entity entity,float duration) -> Py_ScrHandle { return DECISIONEVENT::ADD_SHOCKING_EVENT_FOR_ENTITY(type,entity.id,duration); })
		.def_static("block_decision_maker_event", [](Py_Hash name,int type) -> void { return DECISIONEVENT::BLOCK_DECISION_MAKER_EVENT(name.id,type); })
		.def_static("clear_decision_maker_event_response", [](Py_Hash name,int type) -> void { return DECISIONEVENT::CLEAR_DECISION_MAKER_EVENT_RESPONSE(name.id,type); })
		.def_static("is_shocking_event_in_sphere", [](int type,float x,float y,float z,float radius) -> BOOL { return DECISIONEVENT::IS_SHOCKING_EVENT_IN_SPHERE(type,x,y,z,radius); })
		.def_static("remove_all_shocking_events", [](BOOL p0) -> void { return DECISIONEVENT::REMOVE_ALL_SHOCKING_EVENTS(p0); })
		.def_static("remove_shocking_event", [](Py_ScrHandle event) -> BOOL { return DECISIONEVENT::REMOVE_SHOCKING_EVENT(event.id); })
		.def_static("remove_shocking_event_spawn_blocking_areas", []() -> void { return DECISIONEVENT::REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS(); })
		.def_static("set_decision_maker", [](Py_Ped ped,Py_Hash name) -> void { return DECISIONEVENT::SET_DECISION_MAKER(ped.id,name.id); })
		.def_static("suppress_agitation_events_next_frame", []() -> void { return DECISIONEVENT::SUPPRESS_AGITATION_EVENTS_NEXT_FRAME(); })
		.def_static("suppress_shocking_event_type_next_frame", [](int type) -> void { return DECISIONEVENT::SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(type); })
		.def_static("suppress_shocking_events_next_frame", []() -> void { return DECISIONEVENT::SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME(); })
		.def_static("unblock_decision_maker_event", [](Py_Hash name,int type) -> void { return DECISIONEVENT::UNBLOCK_DECISION_MAKER_EVENT(name.id,type); })
;
	custom(py_Decisionevent);
	py::class_<Py_Zone> py_Zone(m, "Zone");
	py_Zone
		.def_static("clear_popschedule_override_vehicle_model", [](int scheduleId) -> void { return ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(scheduleId); })
		.def_static("get_at_coords", [](float x,float y,float z) -> int { return ZONE::GET_ZONE_AT_COORDS(x,y,z); })
		.def_static("get_from_name_id", [](char* zoneName) -> int { return ZONE::GET_ZONE_FROM_NAME_ID(zoneName); })
		.def_static("get_hash_of_map_area_at_coords", [](float x,float y,float z) -> Py_Hash { return ZONE::GET_HASH_OF_MAP_AREA_AT_COORDS(x,y,z); })
		.def_static("get_name_of_zone", [](float x,float y,float z) -> char* { return ZONE::GET_NAME_OF_ZONE(x,y,z); })
		.def_static("get_popschedule", [](int zoneId) -> int { return ZONE::GET_ZONE_POPSCHEDULE(zoneId); })
		.def_static("get_scumminess", [](int zoneId) -> int { return ZONE::GET_ZONE_SCUMMINESS(zoneId); })
		.def_static("override_popschedule_vehicle_model", [](int scheduleId,Py_Hash vehicleHash) -> void { return ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(scheduleId,vehicleHash.id); })
		.def_static("set_enabled", [](int zoneId,BOOL toggle) -> void { return ZONE::SET_ZONE_ENABLED(zoneId,toggle); })
;
	custom(py_Zone);
	py::class_<Py_Rope> py_Rope(m, "Rope");
	py_Rope
		.def_static("activate_physics", [](Py_Entity entity) -> void { return ROPE::ACTIVATE_PHYSICS(entity.id); })
		.def_static("apply_impulse_to_cloth", [](float posX,float posY,float posZ,float vecX,float vecY,float vecZ,float impulse) -> void { return ROPE::APPLY_IMPULSE_TO_CLOTH(posX,posY,posZ,vecX,vecY,vecZ,impulse); })
		.def_static("are_textures_loaded", []() -> BOOL { return ROPE::ROPE_ARE_TEXTURES_LOADED(); })
		.def_static("attach_to_entity", [](Py_Any rope,Py_Entity entity,float x,float y,float z,BOOL p5) -> void { return ROPE::ATTACH_ROPE_TO_ENTITY(rope.id,entity.id,x,y,z,p5); })
		.def_static("break_entity_glass", [](Py_Any p0,float p1,float p2,float p3,float p4,float p5,float p6,float p7,float p8,Py_Any p9,BOOL p10) -> void { return ROPE::BREAK_ENTITY_GLASS(p0.id,p1,p2,p3,p4,p5,p6,p7,p8,p9.id,p10); })
		.def_static("convert_to_simple", [](Py_Object rope) -> void { return ROPE::ROPE_CONVERT_TO_SIMPLE(rope.id); })
		.def_static("delete_child_rope", [](Py_Object rope) -> void { return ROPE::DELETE_CHILD_ROPE(rope.id); })
		.def_static("detach_from_entity", [](Py_Any rope,Py_Entity entity) -> void { return ROPE::DETACH_ROPE_FROM_ENTITY(rope.id,entity.id); })
		.def_static("force_length", [](Py_Object rope,float length) -> void { return ROPE::ROPE_FORCE_LENGTH(rope.id,length); })
		.def_static("get_cgoffset", [](Py_Object rope) -> Vector3 { return ROPE::GET_CGOFFSET(rope.id); })
		.def_static("get_last_vertex_coord", [](Py_Object rope) -> Vector3 { return ROPE::GET_ROPE_LAST_VERTEX_COORD(rope.id); })
		.def_static("get_length", [](Py_Object rope) -> float { return ROPE::_GET_ROPE_LENGTH(rope.id); })
		.def_static("get_vertex_coord", [](Py_Object rope,int vertex) -> Vector3 { return ROPE::GET_ROPE_VERTEX_COORD(rope.id,vertex); })
		.def_static("get_vertex_count", [](Py_Object rope) -> int { return ROPE::GET_ROPE_VERTEX_COUNT(rope.id); })
		.def_static("load_data", [](Py_Object rope,char* rope_preset) -> void { return ROPE::LOAD_ROPE_DATA(rope.id,rope_preset); })
		.def_static("load_textures", []() -> void { return ROPE::ROPE_LOAD_TEXTURES(); })
		.def_static("pin_vertex", [](Py_Object rope,int vertex,float x,float y,float z) -> void { return ROPE::PIN_ROPE_VERTEX(rope.id,vertex,x,y,z); })
		.def_static("reset_length", [](Py_Object rope,BOOL length) -> void { return ROPE::ROPE_RESET_LENGTH(rope.id,length); })
		.def_static("set_cg_at_boundcenter", [](Py_Object rope) -> void { return ROPE::SET_CG_AT_BOUNDCENTER(rope.id); })
		.def_static("set_cgoffset", [](Py_Object rope,float x,float y,float z) -> void { return ROPE::SET_CGOFFSET(rope.id,x,y,z); })
		.def_static("set_damping", [](Py_Object rope,int vertex,float value) -> void { return ROPE::SET_DAMPING(rope.id,vertex,value); })
		.def_static("set_disable_breaking", [](Py_Object rope,BOOL enabled) -> void { return ROPE::SET_DISABLE_BREAKING(rope.id,enabled); })
		.def_static("set_disable_frag_damage", [](Py_Object object,BOOL toggle) -> void { return ROPE::SET_DISABLE_FRAG_DAMAGE(object.id,toggle); })
		.def_static("set_update_pinverts", [](Py_Object rope) -> void { return ROPE::ROPE_SET_UPDATE_PINVERTS(rope.id); })
		.def_static("start_unwinding_front", [](Py_Object rope) -> void { return ROPE::START_ROPE_UNWINDING_FRONT(rope.id); })
		.def_static("start_winding", [](Py_Object rope) -> void { return ROPE::START_ROPE_WINDING(rope.id); })
		.def_static("stop_unwinding_front", [](Py_Object rope) -> void { return ROPE::STOP_ROPE_UNWINDING_FRONT(rope.id); })
		.def_static("stop_winding", [](Py_Object rope) -> void { return ROPE::STOP_ROPE_WINDING(rope.id); })
		.def_static("unload_textures", []() -> void { return ROPE::ROPE_UNLOAD_TEXTURES(); })
		.def_static("unpin_vertex", [](Py_Object rope,int vertex) -> void { return ROPE::UNPIN_ROPE_VERTEX(rope.id,vertex); })
;
	custom(py_Rope);
	py::class_<Py_Water> py_Water(m, "Water");
	py_Water
		.def_static("modify_water", [](float x,float y,float z,float height) -> void { return WATER::MODIFY_WATER(x,y,z,height); })
		.def_static("test_probe_against_all_water", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6,Py_Any p7) -> BOOL { return WATER::TEST_PROBE_AGAINST_ALL_WATER(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id,p6.id,p7.id); })
		.def_static("test_probe_against_water", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6) -> BOOL { return WATER::TEST_PROBE_AGAINST_WATER(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id,p6.id); })
;
	custom(py_Water);
	py::class_<Py_Worldprobe> py_Worldprobe(m, "Worldprobe");
	py_Worldprobe
		.def_static("cast_3d_ray_point_to_point", [](float x1,float y1,float z1,float x2,float y2,float z2,float radius,int flags,Py_Entity entity,int p8) -> Py_Any { return WORLDPROBE::_CAST_3D_RAY_POINT_TO_POINT(x1,y1,z1,x2,y2,z2,radius,flags,entity.id,p8); })
		.def_static("cast_ray_point_to_point", [](float x1,float y1,float z1,float x2,float y2,float z2,int flags,Py_Entity entity,int p8) -> int { return WORLDPROBE::_CAST_RAY_POINT_TO_POINT(x1,y1,z1,x2,y2,z2,flags,entity.id,p8); })
;
	custom(py_Worldprobe);
	py::class_<Py_Network> py_Network(m, "Network");
	py_Network
		.def_static("accept_presence_invite", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_ACCEPT_PRESENCE_INVITE(p0.id); })
		.def_static("access_tunable_bool", [](char* tunableContext,char* tunableName) -> BOOL { return NETWORK::NETWORK_ACCESS_TUNABLE_BOOL(tunableContext,tunableName); })
		.def_static("access_tunable_bool_hash", [](Py_Hash TunableContext,Py_Hash TunableName) -> BOOL { return NETWORK::_NETWORK_ACCESS_TUNABLE_BOOL_HASH(TunableContext.id,TunableName.id); })
		.def_static("access_tunable_bool_hash_fail_val", [](Py_Hash TunableContext,Py_Hash TunableName,BOOL ReturnVal) -> BOOL { return NETWORK::_NETWORK_ACCESS_TUNABLE_BOOL_HASH_FAIL_VAL(TunableContext.id,TunableName.id,ReturnVal); })
		.def_static("activate_damage_tracker_on_id", [](int netID,BOOL p1) -> void { return NETWORK::ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(netID,p1); })
		.def_static("add_entity_area", [](float p0,float p1,float p2,float p3,float p4,float p5) -> Py_Any { return NETWORK::NETWORK_ADD_ENTITY_AREA(p0,p1,p2,p3,p4,p5); })
		.def_static("am_i_blocked_by_player", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_AM_I_BLOCKED_BY_PLAYER(player.id); })
		.def_static("am_i_muted_by_player", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_AM_I_MUTED_BY_PLAYER(player.id); })
		.def_static("are_integers_equal", [](int a,int b) -> int { return NETWORK::_ARE_INTEGERS_EQUAL(a,b); })
		.def_static("attach_synchronised_scene_to_entity", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return NETWORK::NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(p0.id,p1.id,p2.id); })
		.def_static("bail", []() -> void { return NETWORK::NETWORK_BAIL(); })
		.def_static("bail_transition", []() -> void { return NETWORK::NETWORK_BAIL_TRANSITION(); })
		.def_static("block_invites", [](BOOL p0) -> void { return NETWORK::NETWORK_BLOCK_INVITES(p0); })
		.def_static("can_bail", []() -> BOOL { return NETWORK::NETWORK_CAN_BAIL(); })
		.def_static("can_enter_multiplayer", []() -> BOOL { return NETWORK::NETWORK_CAN_ENTER_MULTIPLAYER(); })
		.def_static("can_register_mission_entities", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> BOOL { return NETWORK::CAN_REGISTER_MISSION_ENTITIES(p0.id,p1.id,p2.id,p3.id); })
		.def_static("can_register_mission_objects", [](Py_Any p0) -> BOOL { return NETWORK::CAN_REGISTER_MISSION_OBJECTS(p0.id); })
		.def_static("can_register_mission_peds", [](Py_Any p0) -> BOOL { return NETWORK::CAN_REGISTER_MISSION_PEDS(p0.id); })
		.def_static("can_register_mission_vehicles", [](Py_Any p0) -> BOOL { return NETWORK::CAN_REGISTER_MISSION_VEHICLES(p0.id); })
		.def_static("can_session_end", []() -> BOOL { return NETWORK::NETWORK_CAN_SESSION_END(); })
		.def_static("can_set_waypoint", []() -> BOOL { return NETWORK::NETWORK_CAN_SET_WAYPOINT(); })
		.def_static("clan_join", [](Py_Any clanHandle) -> Py_Any { return NETWORK::NETWORK_CLAN_JOIN(clanHandle.id); })
		.def_static("clear_found_gamers", []() -> void { return NETWORK::NETWORK_CLEAR_FOUND_GAMERS(); })
		.def_static("clear_transition_creator_handle", []() -> void { return NETWORK::NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE(); })
		.def_static("create_synchronised_scene", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6,Py_Any p7,Py_Any p8,Py_Any p9) -> Py_Any { return NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id,p6.id,p7.id,p8.id,p9.id); })
		.def_static("do_transition_to_game", [](BOOL p0,int maxPlayers) -> BOOL { return NETWORK::NETWORK_DO_TRANSITION_TO_GAME(p0,maxPlayers); })
		.def_static("do_transition_to_new_game", [](BOOL p0,int maxPlayers,BOOL p2) -> BOOL { return NETWORK::NETWORK_DO_TRANSITION_TO_NEW_GAME(p0,maxPlayers,p2); })
		.def_static("does_entity_exist_with_id", [](Py_Entity entity) -> BOOL { return NETWORK::NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(entity.id); })
		.def_static("does_id_exist", [](int netID) -> BOOL { return NETWORK::NETWORK_DOES_NETWORK_ID_EXIST(netID); })
		.def_static("does_tunable_exist", [](char* tunableContext,char* tunableName) -> BOOL { return NETWORK::NETWORK_DOES_TUNABLE_EXIST(tunableContext,tunableName); })
		.def_static("does_tunable_exist_hash", [](Py_Hash TunbaleContext,Py_Hash TunableName) -> BOOL { return NETWORK::_NETWORK_DOES_TUNABLE_EXIST_HASH(TunbaleContext.id,TunableName.id); })
		.def_static("download_bg_script_rpf", []() -> BOOL { return NETWORK::_DOWNLOAD_BG_SCRIPT_RPF(); })
		.def_static("download_tunables", []() -> void { return NETWORK::_DOWNLOAD_TUNABLES(); })
		.def_static("end_tutorial_session", []() -> void { return NETWORK::NETWORK_END_TUTORIAL_SESSION(); })
		.def_static("explode_vehicle", [](Py_Vehicle vehicle,BOOL p1,BOOL p2,BOOL p3) -> Py_Any { return NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle.id,p1,p2,p3); })
		.def_static("fade_in_entity", [](Py_Entity entity,BOOL p1) -> void { return NETWORK::NETWORK_FADE_IN_ENTITY(entity.id,p1); })
		.def_static("fade_out_entity", [](Py_Entity entity,BOOL p1,BOOL p2) -> void { return NETWORK::NETWORK_FADE_OUT_ENTITY(entity.id,p1,p2); })
		.def_static("fade_out_local_player", [](BOOL p0) -> void { return NETWORK::FADE_OUT_LOCAL_PLAYER(p0); })
		.def_static("format_time", [](int time) -> char* { return NETWORK::_FORMAT_TIME(time); })
		.def_static("gamertag_from_handle_pending", []() -> Py_Any { return NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_PENDING(); })
		.def_static("gamertag_from_handle_succeeded", []() -> Py_Any { return NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED(); })
		.def_static("get_activity_player_num", [](BOOL p0) -> Py_Any { return NETWORK::NETWORK_GET_ACTIVITY_PLAYER_NUM(p0); })
		.def_static("get_entity_from_id", [](int NetworkID) -> Py_Entity { return NETWORK::NETWORK_GET_ENTITY_FROM_NETWORK_ID(NetworkID); })
		.def_static("get_entity_is_local", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_GET_ENTITY_IS_LOCAL(p0.id); })
		.def_static("get_friend_count", []() -> int { return NETWORK::NETWORK_GET_FRIEND_COUNT(); })
		.def_static("get_friend_name", [](int friendIndex) -> char* { return NETWORK::_NETWORK_GET_FRIEND_NAME(friendIndex); })
		.def_static("get_host_of_script", [](char* scriptName,int p1,Py_Any p2) -> int { return NETWORK::NETWORK_GET_HOST_OF_SCRIPT(scriptName,p1,p2.id); })
		.def_static("get_host_of_this_script", []() -> Py_Any { return NETWORK::NETWORK_GET_HOST_OF_THIS_SCRIPT(); })
		.def_static("get_id_from_entity", [](Py_Entity entity) -> int { return NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(entity.id); })
		.def_static("get_max_friends", []() -> int { return NETWORK::NETWORK_GET_MAX_FRIENDS(); })
		.def_static("get_num_connected_players", []() -> int { return NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS(); })
		.def_static("get_num_found_gamers", []() -> Py_Any { return NETWORK::NETWORK_GET_NUM_FOUND_GAMERS(); })
		.def_static("get_num_participants", []() -> int { return NETWORK::NETWORK_GET_NUM_PARTICIPANTS(); })
		.def_static("get_num_participants_host", []() -> int { return NETWORK::_NETWORK_GET_NUM_PARTICIPANTS_HOST(); })
		.def_static("get_num_reserved_mission_objects", [](BOOL p0) -> int { return NETWORK::GET_NUM_RESERVED_MISSION_OBJECTS(p0); })
		.def_static("get_num_reserved_mission_peds", [](BOOL p0) -> int { return NETWORK::GET_NUM_RESERVED_MISSION_PEDS(p0); })
		.def_static("get_num_reserved_mission_vehicles", [](BOOL p0) -> int { return NETWORK::GET_NUM_RESERVED_MISSION_VEHICLES(p0); })
		.def_static("get_participant_index", [](Py_Any p0) -> Py_Any { return NETWORK::NETWORK_GET_PARTICIPANT_INDEX(p0.id); })
		.def_static("get_player_from_ped", [](Py_Ped ped) -> Py_Player { return NETWORK::_NETWORK_GET_PLAYER_FROM_PED(ped.id); })
		.def_static("get_player_index", [](Py_Ped PedHandle) -> Py_Any { return NETWORK::NETWORK_GET_PLAYER_INDEX(PedHandle.id); })
		.def_static("get_player_loudness", [](Py_Any p0) -> float { return NETWORK::NETWORK_GET_PLAYER_LOUDNESS(p0.id); })
		.def_static("get_posix_time", []() -> int { return NETWORK::_GET_POSIX_TIME(); })
		.def_static("get_presence_invite_id", [](Py_Any p0) -> Py_Any { return NETWORK::NETWORK_GET_PRESENCE_INVITE_ID(p0.id); })
		.def_static("get_presence_invite_inviter", [](Py_Any p0) -> Py_Any { return NETWORK::NETWORK_GET_PRESENCE_INVITE_INVITER(p0.id); })
		.def_static("get_script_status", []() -> Py_Any { return NETWORK::NETWORK_GET_SCRIPT_STATUS(); })
		.def_static("get_talker_proximity", []() -> Py_Any { return NETWORK::NETWORK_GET_TALKER_PROXIMITY(); })
		.def_static("get_this_script_is_script", []() -> BOOL { return NETWORK::NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT(); })
		.def_static("get_time", []() -> int { return NETWORK::GET_NETWORK_TIME(); })
		.def_static("get_time_difference", [](int a,int b) -> int { return NETWORK::GET_TIME_DIFFERENCE(a,b); })
		.def_static("get_time_offset", [](int a,int b) -> int { return NETWORK::GET_TIME_OFFSET(a,b); })
		.def_static("has_bg_script_been_downloaded", []() -> BOOL { return NETWORK::_HAS_BG_SCRIPT_BEEN_DOWNLOADED(); })
		.def_static("has_control_of_door", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_HAS_CONTROL_OF_DOOR(p0.id); })
		.def_static("has_control_of_entity", [](Py_Entity entity) -> BOOL { return NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(entity.id); })
		.def_static("has_control_of_id", [](int netID) -> BOOL { return NETWORK::NETWORK_HAS_CONTROL_OF_NETWORK_ID(netID); })
		.def_static("has_control_of_pickup", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_HAS_CONTROL_OF_PICKUP(p0.id); })
		.def_static("has_headset", []() -> BOOL { return NETWORK::NETWORK_HAS_HEADSET(); })
		.def_static("has_pending_invite", []() -> Py_Any { return NETWORK::NETWORK_HAS_PENDING_INVITE(); })
		.def_static("has_player_started_transition", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_HAS_PLAYER_STARTED_TRANSITION(p0.id); })
		.def_static("has_tunables_been_downloaded", []() -> BOOL { return NETWORK::_HAS_TUNABLES_BEEN_DOWNLOADED(); })
		.def_static("have_online_privileges", []() -> Py_Any { return NETWORK::NETWORK_HAVE_ONLINE_PRIVILEGES(); })
		.def_static("host_transition", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> Py_Any { return NETWORK::NETWORK_HOST_TRANSITION(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("is_activity_session", []() -> Py_Any { return NETWORK::NETWORK_IS_ACTIVITY_SESSION(); })
		.def_static("is_activity_spectator", []() -> Py_Any { return NETWORK::NETWORK_IS_ACTIVITY_SPECTATOR(); })
		.def_static("is_adding_friend", []() -> Py_Any { return NETWORK::NETWORK_IS_ADDING_FRIEND(); })
		.def_static("is_cloud_available", []() -> Py_Any { return NETWORK::NETWORK_IS_CLOUD_AVAILABLE(); })
		.def_static("is_damage_tracker_active_on_id", [](int netID) -> BOOL { return NETWORK::IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(netID); })
		.def_static("is_finding_gamers", []() -> Py_Any { return NETWORK::NETWORK_IS_FINDING_GAMERS(); })
		.def_static("is_game_in_progress", []() -> BOOL { return NETWORK::NETWORK_IS_GAME_IN_PROGRESS(); })
		.def_static("is_host", []() -> BOOL { return NETWORK::NETWORK_IS_HOST(); })
		.def_static("is_host_of_this_script", []() -> BOOL { return NETWORK::NETWORK_IS_HOST_OF_THIS_SCRIPT(); })
		.def_static("is_in_mp_cutscene", []() -> BOOL { return NETWORK::NETWORK_IS_IN_MP_CUTSCENE(); })
		.def_static("is_in_party", []() -> Py_Any { return NETWORK::NETWORK_IS_IN_PARTY(); })
		.def_static("is_in_session", []() -> BOOL { return NETWORK::NETWORK_IS_IN_SESSION(); })
		.def_static("is_in_spectator_mode", []() -> BOOL { return NETWORK::NETWORK_IS_IN_SPECTATOR_MODE(); })
		.def_static("is_in_transition", []() -> Py_Any { return NETWORK::NETWORK_IS_IN_TRANSITION(); })
		.def_static("is_in_tutorial_session", []() -> Py_Any { return NETWORK::NETWORK_IS_IN_TUTORIAL_SESSION(); })
		.def_static("is_local_player_invincible", []() -> BOOL { return NETWORK::NETWORK_IS_LOCAL_PLAYER_INVINCIBLE(); })
		.def_static("is_participant_active", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(p0.id); })
		.def_static("is_party_member", [](Py_Any p0) -> Py_Any { return NETWORK::NETWORK_IS_PARTY_MEMBER(p0.id); })
		.def_static("is_pending_friend", [](Py_Any p0) -> Py_Any { return NETWORK::NETWORK_IS_PENDING_FRIEND(p0.id); })
		.def_static("is_player_a_participant", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_IS_PLAYER_A_PARTICIPANT(p0.id); })
		.def_static("is_player_active", [](int playerID) -> BOOL { return NETWORK::NETWORK_IS_PLAYER_ACTIVE(playerID); })
		.def_static("is_player_animation_drawing_synchronized", []() -> void { return NETWORK::NETWORK_IS_PLAYER_ANIMATION_DRAWING_SYNCHRONIZED(); })
		.def_static("is_player_banned", []() -> int { return NETWORK::_IS_PLAYER_BANNED(); })
		.def_static("is_player_blocked_by_me", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_IS_PLAYER_BLOCKED_BY_ME(player.id); })
		.def_static("is_player_connected", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_IS_PLAYER_CONNECTED(p0.id); })
		.def_static("is_player_in_cutscene", [](Py_Player player) -> BOOL { return NETWORK::IS_PLAYER_IN_CUTSCENE(player.id); })
		.def_static("is_player_in_mp_cutscene", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_IS_PLAYER_IN_MP_CUTSCENE(player.id); })
		.def_static("is_player_muted_by_me", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_IS_PLAYER_MUTED_BY_ME(player.id); })
		.def_static("is_player_talking", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_IS_PLAYER_TALKING(player.id); })
		.def_static("is_rockstar_banned", []() -> int { return NETWORK::_IS_ROCKSTAR_BANNED(); })
		.def_static("is_session_active", []() -> BOOL { return NETWORK::NETWORK_IS_SESSION_ACTIVE(); })
		.def_static("is_session_busy", []() -> BOOL { return NETWORK::NETWORK_IS_SESSION_BUSY(); })
		.def_static("is_session_started", []() -> BOOL { return NETWORK::NETWORK_IS_SESSION_STARTED(); })
		.def_static("is_signed_in", []() -> Py_Any { return NETWORK::NETWORK_IS_SIGNED_IN(); })
		.def_static("is_signed_online", []() -> Py_Any { return NETWORK::NETWORK_IS_SIGNED_ONLINE(); })
		.def_static("is_socialclub_banned", []() -> int { return NETWORK::_IS_SOCIALCLUB_BANNED(); })
		.def_static("is_sphere_visible_to_another_machine", [](float p0,float p1,float p2,float p3) -> BOOL { return NETWORK::IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(p0,p1,p2,p3); })
		.def_static("is_sphere_visible_to_player", [](Py_Any p0,float p1,float p2,float p3,float p4) -> BOOL { return NETWORK::IS_SPHERE_VISIBLE_TO_PLAYER(p0.id,p1,p2,p3,p4); })
		.def_static("is_text_chat_active", []() -> BOOL { return NETWORK::_NETWORK_IS_TEXT_CHAT_ACTIVE(); })
		.def_static("is_transition_busy", []() -> Py_Any { return NETWORK::NETWORK_IS_TRANSITION_BUSY(); })
		.def_static("is_transition_host", []() -> Py_Any { return NETWORK::NETWORK_IS_TRANSITION_HOST(); })
		.def_static("is_transition_started", []() -> Py_Any { return NETWORK::NETWORK_IS_TRANSITION_STARTED(); })
		.def_static("is_transition_to_game", []() -> Py_Any { return NETWORK::NETWORK_IS_TRANSITION_TO_GAME(); })
		.def_static("is_vehicle_been_damaged_by_any_object", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return NETWORK::IS_NETWORK_VEHICLE_BEEN_DAMAGED_BY_ANY_OBJECT(p0.id,p1.id,p2.id); })
		.def_static("join_transition", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_JOIN_TRANSITION(p0.id); })
		.def_static("launch_transition", []() -> Py_Any { return NETWORK::NETWORK_LAUNCH_TRANSITION(); })
		.def_static("leave_transition", []() -> Py_Any { return NETWORK::NETWORK_LEAVE_TRANSITION(); })
		.def_static("net_to_ent", [](int netHandle) -> Py_Entity { return NETWORK::NET_TO_ENT(netHandle); })
		.def_static("net_to_obj", [](int netHandle) -> Py_Object { return NETWORK::NET_TO_OBJ(netHandle); })
		.def_static("net_to_ped", [](int netHandle) -> Py_Ped { return NETWORK::NET_TO_PED(netHandle); })
		.def_static("net_to_veh", [](int netHandle) -> Py_Vehicle { return NETWORK::NET_TO_VEH(netHandle); })
		.def_static("obj_to_net", [](Py_Object object) -> int { return NETWORK::OBJ_TO_NET(object.id); })
		.def_static("override_clock_time", [](int Hours,int Minutes,int Seconds) -> void { return NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(Hours,Minutes,Seconds); })
		.def_static("participant_id", []() -> int { return NETWORK::PARTICIPANT_ID(); })
		.def_static("participant_id_to_int", []() -> int { return NETWORK::PARTICIPANT_ID_TO_INT(); })
		.def_static("ped_to_net", [](Py_Ped ped) -> int { return NETWORK::PED_TO_NET(ped.id); })
		.def_static("player_get_name", [](Py_Player player) -> char* { return NETWORK::NETWORK_PLAYER_GET_NAME(player.id); })
		.def_static("player_has_headset", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_PLAYER_HAS_HEADSET(player.id); })
		.def_static("player_is_badsport", []() -> BOOL { return NETWORK::NETWORK_PLAYER_IS_BADSPORT(); })
		.def_static("player_is_cheater", []() -> Py_Any { return NETWORK::NETWORK_PLAYER_IS_CHEATER(); })
		.def_static("player_is_in_clan", []() -> BOOL { return NETWORK::_NETWORK_PLAYER_IS_IN_CLAN(); })
		.def_static("player_is_rockstar_dev", [](Py_Player player) -> BOOL { return NETWORK::NETWORK_PLAYER_IS_ROCKSTAR_DEV(player.id); })
		.def_static("remove_entity_area", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_REMOVE_ENTITY_AREA(p0.id); })
		.def_static("request_control_of_door", [](Py_Any p0) -> BOOL { return NETWORK::NETWORK_REQUEST_CONTROL_OF_DOOR(p0.id); })
		.def_static("request_control_of_entity", [](Py_Entity entity) -> BOOL { return NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(entity.id); })
		.def_static("request_control_of_id", [](int netID) -> BOOL { return NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netID); })
		.def_static("reserve_mission_objects", [](Py_Any p0) -> void { return NETWORK::RESERVE_NETWORK_MISSION_OBJECTS(p0.id); })
		.def_static("reserve_mission_peds", [](Py_Any p0) -> void { return NETWORK::RESERVE_NETWORK_MISSION_PEDS(p0.id); })
		.def_static("reserve_mission_vehicles", [](Py_Any p0) -> void { return NETWORK::RESERVE_NETWORK_MISSION_VEHICLES(p0.id); })
		.def_static("reset_body_tracker", []() -> void { return NETWORK::NETWORK_RESET_BODY_TRACKER(); })
		.def_static("resurrect_local_player", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> void { return NETWORK::NETWORK_RESURRECT_LOCAL_PLAYER(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("session_are_players_voting_to_kick", [](Py_Player player) -> BOOL { return NETWORK::_NETWORK_SESSION_ARE_PLAYERS_VOTING_TO_KICK(player.id); })
		.def_static("session_cancel_invite", []() -> void { return NETWORK::NETWORK_SESSION_CANCEL_INVITE(); })
		.def_static("session_end", [](BOOL p0,BOOL p1) -> BOOL { return NETWORK::NETWORK_SESSION_END(p0,p1); })
		.def_static("session_enter", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5) -> Py_Any { return NETWORK::NETWORK_SESSION_ENTER(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id); })
		.def_static("session_host", [](int p0,int maxPlayers,BOOL p2) -> BOOL { return NETWORK::NETWORK_SESSION_HOST(p0,maxPlayers,p2); })
		.def_static("session_host_friends_only", [](int p0,int maxPlayers) -> BOOL { return NETWORK::NETWORK_SESSION_HOST_FRIENDS_ONLY(p0,maxPlayers); })
		.def_static("session_host_single_player", [](Py_Any p0) -> void { return NETWORK::NETWORK_SESSION_HOST_SINGLE_PLAYER(p0.id); })
		.def_static("session_kick_player", [](Py_Player player) -> void { return NETWORK::NETWORK_SESSION_KICK_PLAYER(player.id); })
		.def_static("session_leave_single_player", []() -> void { return NETWORK::NETWORK_SESSION_LEAVE_SINGLE_PLAYER(); })
		.def_static("session_voice_host", []() -> void { return NETWORK::NETWORK_SESSION_VOICE_HOST(); })
		.def_static("session_voice_leave", []() -> void { return NETWORK::NETWORK_SESSION_VOICE_LEAVE(); })
		.def_static("set_activity_spectator", [](BOOL toggle) -> void { return NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR(toggle); })
		.def_static("set_activity_spectator_max", [](Py_Any p0) -> void { return NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR_MAX(p0.id); })
		.def_static("set_entity_can_blend", [](Py_Any p0,BOOL toggle) -> void { return NETWORK::NETWORK_SET_ENTITY_CAN_BLEND(p0.id,toggle); })
		.def_static("set_entity_locally_invisible", [](Py_Entity entity) -> void { return NETWORK::SET_ENTITY_LOCALLY_INVISIBLE(entity.id); })
		.def_static("set_entity_locally_visible", [](Py_Entity entity) -> void { return NETWORK::SET_ENTITY_LOCALLY_VISIBLE(entity.id); })
		.def_static("set_entity_visible_in_cutscene", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORK::SET_ENTITY_VISIBLE_IN_CUTSCENE(p0.id,p1,p2); })
		.def_static("set_friendly_fire_option", [](BOOL toggle) -> void { return NETWORK::NETWORK_SET_FRIENDLY_FIRE_OPTION(toggle); })
		.def_static("set_id_can_migrate", [](Py_Any p0,BOOL p1) -> void { return NETWORK::SET_NETWORK_ID_CAN_MIGRATE(p0.id,p1); })
		.def_static("set_id_exists_on_all_machines", [](int NetID,BOOL DoesExist) -> void { return NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(NetID,DoesExist); })
		.def_static("set_id_visible_in_cutscene", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(p0.id,p1,p2); })
		.def_static("set_in_mp_cutscene", [](BOOL p0,BOOL p1) -> void { return NETWORK::NETWORK_SET_IN_MP_CUTSCENE(p0,p1); })
		.def_static("set_in_spectator_mode", [](BOOL p0,Py_Any p1) -> void { return NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(p0,p1.id); })
		.def_static("set_keep_focuspoint", [](BOOL p0,Py_Any p1) -> void { return NETWORK::NETWORK_SET_KEEP_FOCUSPOINT(p0,p1.id); })
		.def_static("set_local_player_invincible_time", [](int time) -> void { return NETWORK::NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(time); })
		.def_static("set_local_player_invisible_locally", [](BOOL p0) -> void { return NETWORK::SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(p0); })
		.def_static("set_local_player_visible_in_cutscene", [](BOOL p0,BOOL p1) -> void { return NETWORK::SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(p0,p1); })
		.def_static("set_local_player_visible_locally", [](BOOL p0) -> void { return NETWORK::SET_LOCAL_PLAYER_VISIBLE_LOCALLY(p0); })
		.def_static("set_mission_finished", []() -> void { return NETWORK::NETWORK_SET_MISSION_FINISHED(); })
		.def_static("set_override_spectator_mode", [](BOOL toggle) -> void { return NETWORK::NETWORK_SET_OVERRIDE_SPECTATOR_MODE(toggle); })
		.def_static("set_player_invisible_locally", [](Py_Any p0,BOOL p1) -> void { return NETWORK::SET_PLAYER_INVISIBLE_LOCALLY(p0.id,p1); })
		.def_static("set_player_visible_locally", [](Py_Any p0,BOOL p1) -> void { return NETWORK::SET_PLAYER_VISIBLE_LOCALLY(p0.id,p1); })
		.def_static("set_property_id", [](Py_Any p0) -> void { return NETWORK::NETWORK_SET_PROPERTY_ID(p0.id); })
		.def_static("set_rich_presence", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> void { return NETWORK::NETWORK_SET_RICH_PRESENCE(p0.id,p1.id,p2.id,p3.id); })
		.def_static("set_store_enabled", [](BOOL toggle) -> void { return NETWORK::SET_STORE_ENABLED(toggle); })
		.def_static("set_talker_proximity", [](float p0) -> void { return NETWORK::NETWORK_SET_TALKER_PROXIMITY(p0); })
		.def_static("set_team_only_chat", [](BOOL toggle) -> void { return NETWORK::NETWORK_SET_TEAM_ONLY_CHAT(toggle); })
		.def_static("set_this_script_is_script", [](Py_Any p0,BOOL p1,Py_Any p2) -> void { return NETWORK::NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(p0.id,p1,p2.id); })
		.def_static("set_vehicle_respot_timer", [](Py_Any p0,Py_Any p1) -> void { return NETWORK::SET_NETWORK_VEHICLE_RESPOT_TIMER(p0.id,p1.id); })
		.def_static("set_voice_active", [](BOOL toggle) -> void { return NETWORK::NETWORK_SET_VOICE_ACTIVE(toggle); })
		.def_static("set_voice_channel", [](Py_Any p0) -> void { return NETWORK::NETWORK_SET_VOICE_CHANNEL(p0.id); })
		.def_static("shutdown_and_launch_single_player_game", []() -> void { return NETWORK::SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME(); })
		.def_static("start_synchronised_scene", [](Py_Any p0) -> void { return NETWORK::NETWORK_START_SYNCHRONISED_SCENE(p0.id); })
		.def_static("stop_synchronised_scene", [](Py_Any p0) -> void { return NETWORK::NETWORK_STOP_SYNCHRONISED_SCENE(p0.id); })
		.def_static("subtract_a_from_b_and_check_if_negative", [](int a,int b) -> BOOL { return NETWORK::_SUBTRACT_A_FROM_B_AND_CHECK_IF_NEGATIVE(a,b); })
		.def_static("subtract_b_from_a_and_check_if_negative", [](int a,int b) -> BOOL { return NETWORK::_SUBTRACT_B_FROM_A_AND_CHECK_IF_NEGATIVE(a,b); })
		.def_static("suppress_invite", [](BOOL p0) -> void { return NETWORK::NETWORK_SUPPRESS_INVITE(p0); })
		.def_static("texture_download_get_name", [](Py_Any p0) -> Py_Any { return NETWORK::TEXTURE_DOWNLOAD_GET_NAME(p0.id); })
		.def_static("texture_download_release", [](Py_Any p0) -> void { return NETWORK::TEXTURE_DOWNLOAD_RELEASE(p0.id); })
		.def_static("use_player_colour_instead_of_team_colour", [](BOOL toggle) -> void { return NETWORK::USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(toggle); })
		.def_static("using_weapontype", [](Py_Any p0) -> BOOL { return NETWORK::USING_NETWORK_WEAPONTYPE(p0.id); })
		.def_static("veh_to_net", [](Py_Vehicle vehicle) -> int { return NETWORK::VEH_TO_NET(vehicle.id); })
;
	custom(py_Network);
	py::class_<Py_Networkcash> py_Networkcash(m, "Networkcash");
	py_Networkcash
		.def_static("has_item_been_unlocked", [](Py_Any p0,BOOL p1,BOOL p2,BOOL p3,Py_Any p4) -> BOOL { return NETWORKCASH::_HAS_ITEM_BEEN_UNLOCKED(p0.id,p1,p2,p3,p4.id); })
		.def_static("network_buy_airstrike", [](int cost,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_BUY_AIRSTRIKE(cost,p1,p2); })
		.def_static("network_buy_bounty", [](int amount,Py_Player victim,BOOL p2,BOOL p3) -> void { return NETWORKCASH::NETWORK_BUY_BOUNTY(amount,victim.id,p2,p3); })
		.def_static("network_buy_healthcare", [](int cost,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_BUY_HEALTHCARE(cost,p1,p2); })
		.def_static("network_buy_heli_strike", [](int cost,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_BUY_HELI_STRIKE(cost,p1,p2); })
		.def_static("network_buy_item", [](Py_Ped player,Py_Hash item,Py_Any p2,Py_Any p3,BOOL p4,char* item_name,Py_Any p6,Py_Any p7,Py_Any p8,BOOL p9) -> void { return NETWORKCASH::NETWORK_BUY_ITEM(player.id,item.id,p2.id,p3.id,p4,item_name,p6.id,p7.id,p8.id,p9); })
		.def_static("network_buy_property", [](float propertyCost,Py_Hash propertyName,BOOL p2,BOOL p3) -> void { return NETWORKCASH::NETWORK_BUY_PROPERTY(propertyCost,propertyName.id,p2,p3); })
		.def_static("network_can_receive_player_cash", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3) -> BOOL { return NETWORKCASH::NETWORK_CAN_RECEIVE_PLAYER_CASH(p0.id,p1.id,p2.id,p3.id); })
		.def_static("network_delete_character", [](int characterIndex,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_DELETE_CHARACTER(characterIndex,p1,p2); })
		.def_static("network_earn_from_betting", [](int amount,char* p1) -> void { return NETWORKCASH::NETWORK_EARN_FROM_BETTING(amount,p1); })
		.def_static("network_earn_from_holdups", [](int amount) -> void { return NETWORKCASH::NETWORK_EARN_FROM_HOLDUPS(amount); })
		.def_static("network_earn_from_import_export", [](Py_Any p0,Py_Any p1) -> void { return NETWORKCASH::NETWORK_EARN_FROM_IMPORT_EXPORT(p0.id,p1.id); })
		.def_static("network_earn_from_job", [](int amount,char* p1) -> void { return NETWORKCASH::NETWORK_EARN_FROM_JOB(amount,p1); })
		.def_static("network_earn_from_pickup", [](int amount) -> void { return NETWORKCASH::NETWORK_EARN_FROM_PICKUP(amount); })
		.def_static("network_earn_from_property", [](int amount,Py_Hash propertyName) -> void { return NETWORKCASH::NETWORK_EARN_FROM_PROPERTY(amount,propertyName.id); })
		.def_static("network_earn_from_rockstar", [](int amount) -> void { return NETWORKCASH::NETWORK_EARN_FROM_ROCKSTAR(amount); })
		.def_static("network_earn_from_vehicle", [](Py_Any p0,Py_Any p1,Py_Any p2,Py_Any p3,Py_Any p4,Py_Any p5,Py_Any p6,Py_Any p7) -> void { return NETWORKCASH::NETWORK_EARN_FROM_VEHICLE(p0.id,p1.id,p2.id,p3.id,p4.id,p5.id,p6.id,p7.id); })
		.def_static("network_initialize_cash", [](int p0,int p1) -> void { return NETWORKCASH::NETWORK_INITIALIZE_CASH(p0,p1); })
		.def_static("network_refund_cash", [](int index,char* context,char* reason,BOOL unk) -> void { return NETWORKCASH::NETWORK_REFUND_CASH(index,context,reason,unk); })
		.def_static("network_spent_ammo_drop", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_AMMO_DROP(p0.id,p1,p2); })
		.def_static("network_spent_arrest_bail", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_ARREST_BAIL(p0.id,p1,p2); })
		.def_static("network_spent_boat_pickup", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_BOAT_PICKUP(p0.id,p1,p2); })
		.def_static("network_spent_bounty", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_BOUNTY(p0.id,p1,p2); })
		.def_static("network_spent_bull_shark", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_BULL_SHARK(p0.id,p1,p2); })
		.def_static("network_spent_buy_offtheradar", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_BUY_OFFTHERADAR(p0.id,p1,p2); })
		.def_static("network_spent_buy_passive_mode", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_BUY_PASSIVE_MODE(p0.id,p1,p2); })
		.def_static("network_spent_buy_reveal_players", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_BUY_REVEAL_PLAYERS(p0.id,p1,p2); })
		.def_static("network_spent_carwash", [](Py_Any p0,Py_Any p1,Py_Any p2,BOOL p3,BOOL p4) -> void { return NETWORKCASH::NETWORK_SPENT_CARWASH(p0.id,p1.id,p2.id,p3,p4); })
		.def_static("network_spent_cash_drop", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_CASH_DROP(p0.id,p1,p2); })
		.def_static("network_spent_cinema", [](Py_Any p0,Py_Any p1,BOOL p2,BOOL p3) -> void { return NETWORKCASH::NETWORK_SPENT_CINEMA(p0.id,p1.id,p2,p3); })
		.def_static("network_spent_heli_pickup", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_HELI_PICKUP(p0.id,p1,p2); })
		.def_static("network_spent_hire_mercenary", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_HIRE_MERCENARY(p0.id,p1,p2); })
		.def_static("network_spent_hire_mugger", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_HIRE_MUGGER(p0.id,p1,p2); })
		.def_static("network_spent_holdups", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_HOLDUPS(p0.id,p1,p2); })
		.def_static("network_spent_prostitutes", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_PROSTITUTES(p0.id,p1,p2); })
		.def_static("network_spent_taxi", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_TAXI(p0.id,p1,p2); })
		.def_static("network_spent_telescope", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return NETWORKCASH::NETWORK_SPENT_TELESCOPE(p0.id,p1,p2); })
;
	custom(py_Networkcash);
	py::class_<Py_Dlc1> py_Dlc1(m, "Dlc1");
	py_Dlc1
		.def_static("get_dlc_vehicle_flags", [](Py_Any p0) -> Py_Any { return DLC1::GET_DLC_VEHICLE_FLAGS(p0.id); })
		.def_static("get_dlc_vehicle_model", [](Py_Any p0) -> Py_Any { return DLC1::GET_DLC_VEHICLE_MODEL(p0.id); })
		.def_static("get_hash_name_for_component", [](Py_Entity entity,int componentId,int drawableVariant,int textureVariant) -> Py_Hash { return DLC1::GET_HASH_NAME_FOR_COMPONENT(entity.id,componentId,drawableVariant,textureVariant); })
		.def_static("get_hash_name_for_prop", [](Py_Entity entity,int componentId,int propIndex,int propTextureIndex) -> Py_Hash { return DLC1::GET_HASH_NAME_FOR_PROP(entity.id,componentId,propIndex,propTextureIndex); })
		.def_static("get_num_dlc_vehicles", []() -> int { return DLC1::GET_NUM_DLC_VEHICLES(); })
		.def_static("get_num_dlc_weapon_components", [](Py_Any p0) -> int { return DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(p0.id); })
		.def_static("get_num_dlc_weapons", []() -> int { return DLC1::GET_NUM_DLC_WEAPONS(); })
		.def_static("get_num_forced_components", [](Py_Hash componentHash) -> int { return DLC1::_GET_NUM_FORCED_COMPONENTS(componentHash.id); })
		.def_static("get_num_props_from_outfit", [](int playerId,int p1,int p2,BOOL p3,int p4,int componentId) -> int { return DLC1::_GET_NUM_PROPS_FROM_OUTFIT(playerId,p1,p2,p3,p4,componentId); })
		.def_static("init_shop_ped_component", [](Py_Player outComponent) -> void { return DLC1::INIT_SHOP_PED_COMPONENT(outComponent.id); })
		.def_static("is_outfit_empty", [](Py_Any outfit) -> BOOL { return DLC1::_IS_OUTFIT_EMPTY(outfit.id); })
;
	custom(py_Dlc1);
	py::class_<Py_Dlc2> py_Dlc2(m, "Dlc2");
	py_Dlc2
		.def_static("get_is_loading_screen_active", []() -> BOOL { return DLC2::GET_IS_LOADING_SCREEN_ACTIVE(); })
		.def_static("is_dlc_present", [](Py_Hash DlcHash) -> BOOL { return DLC2::IS_DLC_PRESENT(DlcHash.id); })
		.def_static("load_mp_dlc_maps", []() -> void { return DLC2::_LOAD_MP_DLC_MAPS(); })
		.def_static("load_sp_dlc_maps", []() -> void { return DLC2::_LOAD_SP_DLC_MAPS(); })
;
	custom(py_Dlc2);
	py::class_<Py_System> py_System(m, "System");
	py_System
		.def_static("ceil", [](float value) -> int { return SYSTEM::CEIL(value); })
		.def_static("cos", [](float value) -> float { return SYSTEM::COS(value); })
		.def_static("floor", [](float value) -> int { return SYSTEM::FLOOR(value); })
		.def_static("pow", [](float base,float exponent) -> float { return SYSTEM::POW(base,exponent); })
		.def_static("round", [](float value) -> int { return SYSTEM::ROUND(value); })
		.def_static("settimera", [](int value) -> void { return SYSTEM::SETTIMERA(value); })
		.def_static("settimerb", [](int value) -> void { return SYSTEM::SETTIMERB(value); })
		.def_static("shift_left", [](int value,int bitShift) -> int { return SYSTEM::SHIFT_LEFT(value,bitShift); })
		.def_static("shift_right", [](int value,int bitShift) -> int { return SYSTEM::SHIFT_RIGHT(value,bitShift); })
		.def_static("sin", [](float value) -> float { return SYSTEM::SIN(value); })
		.def_static("sqrt", [](float value) -> float { return SYSTEM::SQRT(value); })
		.def_static("start_new_script", [](char* scriptName,int stackSize) -> int { return SYSTEM::START_NEW_SCRIPT(scriptName,stackSize); })
		.def_static("start_new_streamed_script", [](Py_Hash scriptHash,int stackSize) -> int { return SYSTEM::_START_NEW_STREAMED_SCRIPT(scriptHash.id,stackSize); })
		.def_static("timera", []() -> int { return SYSTEM::TIMERA(); })
		.def_static("timerb", []() -> int { return SYSTEM::TIMERB(); })
		.def_static("timestep", []() -> float { return SYSTEM::TIMESTEP(); })
		.def_static("to_float", [](int value) -> float { return SYSTEM::TO_FLOAT(value); })
		.def_static("vdist", [](float x1,float y1,float z1,float x2,float y2,float z2) -> float { return SYSTEM::VDIST(x1,y1,z1,x2,y2,z2); })
		.def_static("vdist2", [](float x1,float y1,float z1,float x2,float y2,float z2) -> float { return SYSTEM::VDIST2(x1,y1,z1,x2,y2,z2); })
		.def_static("vmag", [](float p0,float p1,float p2) -> float { return SYSTEM::VMAG(p0,p1,p2); })
		.def_static("vmag2", [](float p0,float p1,float p2) -> float { return SYSTEM::VMAG2(p0,p1,p2); })
		.def_static("wait", [](int ms) -> void { return SYSTEM::WAIT(ms); })
;
	custom(py_System);
	py::class_<Py_Decorator> py_Decorator(m, "Decorator");
	py_Decorator
		.def_static("decor_exist_on", [](Py_Entity entity,char* propertyName) -> BOOL { return DECORATOR::DECOR_EXIST_ON(entity.id,propertyName); })
		.def_static("decor_get_bool", [](Py_Entity entity,char* propertyName) -> BOOL { return DECORATOR::DECOR_GET_BOOL(entity.id,propertyName); })
		.def_static("decor_get_float", [](Py_Entity entity,char* propertyName) -> float { return DECORATOR::_DECOR_GET_FLOAT(entity.id,propertyName); })
		.def_static("decor_get_int", [](Py_Entity entity,char* propertyName) -> int { return DECORATOR::DECOR_GET_INT(entity.id,propertyName); })
		.def_static("decor_is_registered_as_type", [](char* propertyName,int type) -> BOOL { return DECORATOR::DECOR_IS_REGISTERED_AS_TYPE(propertyName,type); })
		.def_static("decor_register", [](char* propertyName,int type) -> void { return DECORATOR::DECOR_REGISTER(propertyName,type); })
		.def_static("decor_register_lock", []() -> void { return DECORATOR::DECOR_REGISTER_LOCK(); })
		.def_static("decor_remove", [](Py_Entity entity,char* propertyName) -> BOOL { return DECORATOR::DECOR_REMOVE(entity.id,propertyName); })
		.def_static("decor_set_bool", [](Py_Entity entity,char* propertyName,BOOL value) -> BOOL { return DECORATOR::DECOR_SET_BOOL(entity.id,propertyName,value); })
		.def_static("decor_set_float", [](Py_Entity entity,char* propertyName,float value) -> BOOL { return DECORATOR::_DECOR_SET_FLOAT(entity.id,propertyName,value); })
		.def_static("decor_set_int", [](Py_Entity entity,char* propertyName,int value) -> BOOL { return DECORATOR::DECOR_SET_INT(entity.id,propertyName,value); })
		.def_static("decor_set_time", [](Py_Entity entity,char* propertyName,int value) -> BOOL { return DECORATOR::DECOR_SET_TIME(entity.id,propertyName,value); })
;
	custom(py_Decorator);
	py::class_<Py_Socialclub> py_Socialclub(m, "Socialclub");
	py_Socialclub
		.def_static("sc_get_nickname", []() -> char* { return SOCIALCLUB::_SC_GET_NICKNAME(); })
;
	custom(py_Socialclub);
	py::class_<Py_Unk> py_Unk(m, "Unk");
	py_Unk
		.def_static("get_broadcast_finshed_los_sound", [](BOOL p0) -> void { return UNK::_GET_BROADCAST_FINSHED_LOS_SOUND(p0); })
		.def_static("get_ui_language_id", []() -> int { return UNK::_GET_UI_LANGUAGE_ID(); })
		.def_static("get_user_language_id", []() -> int { return UNK::_GET_USER_LANGUAGE_ID(); })
		.def_static("return_zero", []() -> int { return UNK::_RETURN_ZERO(); })
;
	custom(py_Unk);
	py::class_<Py_Unk1> py_Unk1(m, "Unk1");
	py_Unk1
		.def_static("is_recording", []() -> BOOL { return UNK1::_IS_RECORDING(); })
		.def_static("set_recording_mode", [](int mode) -> void { return UNK1::_SET_RECORDING_MODE(mode); })
		.def_static("stop_recording_and_discard_clip", []() -> void { return UNK1::_STOP_RECORDING_AND_DISCARD_CLIP(); })
		.def_static("stop_recording_and_save_clip", []() -> void { return UNK1::_STOP_RECORDING_AND_SAVE_CLIP(); })
;
	custom(py_Unk1);
	py::class_<Py_Unk2> py_Unk2(m, "Unk2");
	py_Unk2
		.def_static("is_interior_rendering_disabled", []() -> BOOL { return UNK2::_IS_INTERIOR_RENDERING_DISABLED(); })
;
	custom(py_Unk2);
	py::class_<Py_Unk3> py_Unk3(m, "Unk3");
	py_Unk3
		.def_static("get_game_version", []() -> char* { return UNK3::_GET_GAME_VERSION(); })
		.def_static("network_shop_get_price", [](Py_Hash hash,Py_Hash hash2,BOOL p2) -> int { return UNK3::_NETWORK_SHOP_GET_PRICE(hash.id,hash2.id,p2); })
;
	custom(py_Unk3);
}

